2025-02-19 10:35:51 [main] INFO  predictor.demo.DemoApplication - Starting DemoApplication using Java 17.0.13 with PID 3980 (C:\Fullstack_apps\period-and-ovulation-predictor\backend\demo\target\classes started by Danil in C:\Fullstack_apps\period-and-ovulation-predictor)
2025-02-19 10:35:51 [main] INFO  predictor.demo.DemoApplication - No active profile set, falling back to 1 default profile: "default"
2025-02-19 10:35:57 [main] INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-02-19 10:35:57 [main] INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.34]
2025-02-19 10:35:57 [main] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-02-19 10:35:57 [main] INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-02-19 10:35:58 [main] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.6.5.Final
2025-02-19 10:35:58 [main] INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-02-19 10:35:59 [main] WARN  com.zaxxer.hikari.HikariConfig - predictor-period-ovulation - idleTimeout has been set but has no effect because the pool is operating as a fixed size pool.
2025-02-19 10:35:59 [main] INFO  com.zaxxer.hikari.HikariDataSource - predictor-period-ovulation - Starting...
2025-02-19 10:36:00 [main] INFO  com.zaxxer.hikari.pool.HikariPool - predictor-period-ovulation - Added connection com.mysql.cj.jdbc.ConnectionImpl@986b619
2025-02-19 10:36:00 [main] INFO  com.zaxxer.hikari.HikariDataSource - predictor-period-ovulation - Start completed.
2025-02-19 10:36:00 [main] WARN  org.hibernate.orm.deprecation - HHH90000025: MySQL8Dialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-02-19 10:36:00 [main] WARN  org.hibernate.orm.deprecation - HHH90000026: MySQL8Dialect has been deprecated; use org.hibernate.dialect.MySQLDialect instead
2025-02-19 10:36:00 [main] INFO  o.hibernate.orm.connections.pooling - HHH10001005: Database info:
	Database JDBC URL [Connecting through datasource 'HikariDataSource (predictor-period-ovulation)']
	Database driver: undefined/unknown
	Database version: 8.0
	Autocommit mode: undefined/unknown
	Isolation level: undefined/unknown
	Minimum pool size: undefined/unknown
	Maximum pool size: undefined/unknown
2025-02-19 10:36:03 [main] INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-02-19 10:36:06 [main] WARN  o.s.b.a.o.j.JpaBaseConfiguration$JpaWebConfiguration - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2025-02-19 10:36:08 [main] INFO  predictor.demo.DemoApplication - Started DemoApplication in 18.414 seconds (process running for 19.464)
2025-02-19 10:36:15 [http-nio-8080-exec-1] INFO  o.a.tomcat.util.http.parser.Cookie - A cookie header was received [g_state={"i_l":0}] that contained an invalid cookie. That cookie will be ignored.
 Note: further occurrences of this error will be logged at DEBUG level.
2025-02-19 10:36:15 [http-nio-8080-exec-1] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-02-19 10:36:16 [http-nio-8080-exec-2] WARN  o.a.c.util.SessionIdGeneratorBase - Creation of SecureRandom instance for session ID generation using [SHA1PRNG] took [158] milliseconds.
2025-02-19 10:36:32 [http-nio-8080-exec-8] INFO  predictor.demo.AppConfiguration - Processing OAuth2 login for: naama.antoniouk@gmail.com
2025-02-19 10:36:32 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - select u1_0.id,u1_0.created_date_time,u1_0.email,u1_0.google_sub,u1_0.is_active,u1_0.modified_date_time,u1_0.name,u1_0.picture,u1_0.refresh_token from user u1_0 where u1_0.google_sub=?
2025-02-19 10:36:33 [http-nio-8080-exec-8] INFO  predictor.demo.AppConfiguration - Found existing user: naama.antoniouk@gmail.com
2025-02-19 10:36:33 [http-nio-8080-exec-9] INFO  p.d.A.calendar.CalendarController - Fetching period events for user
2025-02-19 10:36:33 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - select u1_0.id,u1_0.created_date_time,u1_0.email,u1_0.google_sub,u1_0.is_active,u1_0.modified_date_time,u1_0.name,u1_0.picture,u1_0.refresh_token from user u1_0 where u1_0.google_sub=?
2025-02-19 10:36:33 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - select ed1_0.id,ed1_0.calendar_event_id,ed1_0.created_date_time,ed1_0.event_date,ed1_0.events_series,ed1_0.is_period_first_day,ed1_0.is_predicted,ed1_0.is_sync,ed1_0.modified_date_time,ed1_0.title,ed1_0.user_id from event_data ed1_0 where ed1_0.user_id=? and ed1_0.is_predicted=0
2025-02-19 10:36:33 [http-nio-8080-exec-10] INFO  p.d.A.calendar.CalendarController - Fetching period events for user
2025-02-19 10:36:33 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - select u1_0.id,u1_0.created_date_time,u1_0.email,u1_0.google_sub,u1_0.is_active,u1_0.modified_date_time,u1_0.name,u1_0.picture,u1_0.refresh_token from user u1_0 where u1_0.google_sub=?
2025-02-19 10:36:33 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - select ed1_0.id,ed1_0.calendar_event_id,ed1_0.created_date_time,ed1_0.event_date,ed1_0.events_series,ed1_0.is_period_first_day,ed1_0.is_predicted,ed1_0.is_sync,ed1_0.modified_date_time,ed1_0.title,ed1_0.user_id from event_data ed1_0 where ed1_0.user_id=? and ed1_0.is_predicted=0
2025-02-19 10:36:36 [http-nio-8080-exec-1] INFO  p.d.A.calendar.CalendarController - Generating new predictions
2025-02-19 10:36:36 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - select u1_0.id,u1_0.created_date_time,u1_0.email,u1_0.google_sub,u1_0.is_active,u1_0.modified_date_time,u1_0.name,u1_0.picture,u1_0.refresh_token from user u1_0 where u1_0.google_sub=?
2025-02-19 10:36:36 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - SELECT * FROM event_data WHERE id = (SELECT MAX(id) FROM event_data WHERE user_id = ? AND is_period_first_day = true AND is_predicted = false)
2025-02-19 10:36:36 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - select es1_0.id from events_series es1_0 left join user u1_0 on u1_0.id=es1_0.user_id where u1_0.id=? limit ?
2025-02-19 10:36:36 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - SELECT AVG(DATEDIFF(e1.event_date, (SELECT MAX(e2.event_date)    FROM EventData e2    WHERE e2.eventDate < e1.eventDate    AND e2.user.id = ?    AND e2.isPeriodFirstDay = true    AND e2.isPredicted = false)) FROM EventData e1 WHERE e1.user.id = ? AND e1.isPeriodFirstDay = true AND e1.isPredicted = false
2025-02-19 10:36:36 [http-nio-8080-exec-1] WARN  o.h.e.jdbc.spi.SqlExceptionHelper - SQL Error: 1064, SQLState: 42000
2025-02-19 10:36:36 [http-nio-8080-exec-1] ERROR o.h.e.jdbc.spi.SqlExceptionHelper - You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near 'FROM EventData e1 WHERE e1.user.id = 1 AND e1.isPeriodFirstDay = true AND e1.isP' at line 1
2025-02-19 10:36:36 [http-nio-8080-exec-1] ERROR p.d.A.calendar.CalendarController - Error generating predictions
org.springframework.dao.InvalidDataAccessResourceUsageException: JDBC exception executing SQL [SELECT AVG(DATEDIFF(e1.event_date, (SELECT MAX(e2.event_date)    FROM EventData e2    WHERE e2.eventDate < e1.eventDate    AND e2.user.id = ?    AND e2.isPeriodFirstDay = true    AND e2.isPredicted = false)) FROM EventData e1 WHERE e1.user.id = ? AND e1.isPeriodFirstDay = true AND e1.isPredicted = false] [You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near 'FROM EventData e1 WHERE e1.user.id = 1 AND e1.isPeriodFirstDay = true AND e1.isP' at line 1] [n/a]; SQL [n/a]
	at org.springframework.orm.jpa.vendor.HibernateJpaDialect.convertHibernateAccessException(HibernateJpaDialect.java:277)
	at org.springframework.orm.jpa.vendor.HibernateJpaDialect.translateExceptionIfPossible(HibernateJpaDialect.java:241)
	at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.translateExceptionIfPossible(AbstractEntityManagerFactoryBean.java:560)
	at org.springframework.dao.support.ChainedPersistenceExceptionTranslator.translateExceptionIfPossible(ChainedPersistenceExceptionTranslator.java:61)
	at org.springframework.dao.support.DataAccessUtils.translateIfNecessary(DataAccessUtils.java:343)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:160)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:136)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:223)
	at jdk.proxy2/jdk.proxy2.$Proxy137.calculateAverageCycleLength(Unknown Source)
	at predictor.demo.AppModules.eventData.EventDataServiceImp.calculateCycleLength(EventDataServiceImp.java:69)
	at predictor.demo.AppModules.eventsSeries.EventSeriesServiceImp.createNewEventsSeries(EventSeriesServiceImp.java:111)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:359)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:723)
	at predictor.demo.AppModules.eventsSeries.EventSeriesServiceImp$$SpringCGLIB$$0.createNewEventsSeries(<generated>)
	at predictor.demo.AppModules.calendar.CalendarController.generatePredictions(CalendarController.java:137)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:257)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:190)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:986)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:891)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1088)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:978)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:914)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:590)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:195)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:101)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.ui.DefaultLogoutPageGeneratingFilter.doFilterInternal(DefaultLogoutPageGeneratingFilter.java:58)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.ui.DefaultLoginPageGeneratingFilter.doFilter(DefaultLoginPageGeneratingFilter.java:220)
	at org.springframework.security.web.authentication.ui.DefaultLoginPageGeneratingFilter.doFilter(DefaultLoginPageGeneratingFilter.java:206)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.ui.DefaultResourcesFilter.doFilter(DefaultResourcesFilter.java:72)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:227)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:221)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.doFilterInternal(OAuth2AuthorizationRequestRedirectFilter.java:198)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:243)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:238)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:362)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:278)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:483)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:397)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:905)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1741)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1190)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:840)
Caused by: org.hibernate.exception.SQLGrammarException: JDBC exception executing SQL [SELECT AVG(DATEDIFF(e1.event_date, (SELECT MAX(e2.event_date)    FROM EventData e2    WHERE e2.eventDate < e1.eventDate    AND e2.user.id = ?    AND e2.isPeriodFirstDay = true    AND e2.isPredicted = false)) FROM EventData e1 WHERE e1.user.id = ? AND e1.isPeriodFirstDay = true AND e1.isPredicted = false] [You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near 'FROM EventData e1 WHERE e1.user.id = 1 AND e1.isPeriodFirstDay = true AND e1.isP' at line 1] [n/a]
	at org.hibernate.exception.internal.SQLExceptionTypeDelegate.convert(SQLExceptionTypeDelegate.java:66)
	at org.hibernate.exception.internal.StandardSQLExceptionConverter.convert(StandardSQLExceptionConverter.java:58)
	at org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:108)
	at org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:94)
	at org.hibernate.sql.results.jdbc.internal.DeferredResultSetAccess.executeQuery(DeferredResultSetAccess.java:268)
	at org.hibernate.sql.results.jdbc.internal.DeferredResultSetAccess.getResultSet(DeferredResultSetAccess.java:171)
	at org.hibernate.sql.results.jdbc.internal.AbstractResultSetAccess.getMetaData(AbstractResultSetAccess.java:36)
	at org.hibernate.sql.results.jdbc.internal.AbstractResultSetAccess.getColumnCount(AbstractResultSetAccess.java:52)
	at org.hibernate.query.results.ResultSetMappingImpl.resolve(ResultSetMappingImpl.java:194)
	at org.hibernate.sql.exec.internal.JdbcSelectExecutorStandardImpl.resolveJdbcValuesSource(JdbcSelectExecutorStandardImpl.java:340)
	at org.hibernate.sql.exec.internal.JdbcSelectExecutorStandardImpl.doExecuteQuery(JdbcSelectExecutorStandardImpl.java:137)
	at org.hibernate.sql.exec.internal.JdbcSelectExecutorStandardImpl.executeQuery(JdbcSelectExecutorStandardImpl.java:102)
	at org.hibernate.sql.exec.spi.JdbcSelectExecutor.executeQuery(JdbcSelectExecutor.java:91)
	at org.hibernate.sql.exec.spi.JdbcSelectExecutor.list(JdbcSelectExecutor.java:165)
	at org.hibernate.sql.exec.spi.JdbcSelectExecutor.list(JdbcSelectExecutor.java:142)
	at org.hibernate.sql.exec.spi.JdbcSelectExecutor.list(JdbcSelectExecutor.java:132)
	at org.hibernate.query.sql.internal.NativeSelectQueryPlanImpl.performList(NativeSelectQueryPlanImpl.java:135)
	at org.hibernate.query.sql.internal.NativeQueryImpl.doList(NativeQueryImpl.java:693)
	at org.hibernate.query.spi.AbstractSelectionQuery.list(AbstractSelectionQuery.java:143)
	at org.hibernate.query.spi.AbstractSelectionQuery.getSingleResult(AbstractSelectionQuery.java:275)
	at org.springframework.data.jpa.repository.query.JpaQueryExecution$SingleEntityExecution.doExecute(JpaQueryExecution.java:224)
	at org.springframework.data.jpa.repository.query.JpaQueryExecution.execute(JpaQueryExecution.java:93)
	at org.springframework.data.jpa.repository.query.AbstractJpaQuery.doExecute(AbstractJpaQuery.java:152)
	at org.springframework.data.jpa.repository.query.AbstractJpaQuery.execute(AbstractJpaQuery.java:140)
	at org.springframework.data.repository.core.support.RepositoryMethodInvoker.doInvoke(RepositoryMethodInvoker.java:170)
	at org.springframework.data.repository.core.support.RepositoryMethodInvoker.invoke(RepositoryMethodInvoker.java:158)
	at org.springframework.data.repository.core.support.QueryExecutorMethodInterceptor.doInvoke(QueryExecutorMethodInterceptor.java:170)
	at org.springframework.data.repository.core.support.QueryExecutorMethodInterceptor.invoke(QueryExecutorMethodInterceptor.java:149)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.data.projection.DefaultMethodInvokingMethodInterceptor.invoke(DefaultMethodInvokingMethodInterceptor.java:69)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:380)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:138)
	... 123 common frames omitted
Caused by: java.sql.SQLSyntaxErrorException: You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near 'FROM EventData e1 WHERE e1.user.id = 1 AND e1.isPeriodFirstDay = true AND e1.isP' at line 1
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:112)
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:114)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeInternal(ClientPreparedStatement.java:988)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeQuery(ClientPreparedStatement.java:1056)
	at com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
	at com.zaxxer.hikari.pool.HikariProxyPreparedStatement.executeQuery(HikariProxyPreparedStatement.java)
	at org.hibernate.sql.results.jdbc.internal.DeferredResultSetAccess.executeQuery(DeferredResultSetAccess.java:250)
	... 153 common frames omitted
2025-02-19 10:37:02 [main] INFO  predictor.demo.DemoApplication - Starting DemoApplication using Java 17.0.13 with PID 1816 (C:\Fullstack_apps\period-and-ovulation-predictor\backend\demo\target\classes started by Danil in C:\Fullstack_apps\period-and-ovulation-predictor)
2025-02-19 10:37:02 [main] INFO  predictor.demo.DemoApplication - No active profile set, falling back to 1 default profile: "default"
2025-02-19 10:37:08 [main] INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-02-19 10:37:08 [main] INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.34]
2025-02-19 10:37:08 [main] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-02-19 10:37:09 [main] INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-02-19 10:37:09 [main] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.6.5.Final
2025-02-19 10:37:09 [main] INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-02-19 10:37:10 [main] WARN  com.zaxxer.hikari.HikariConfig - predictor-period-ovulation - idleTimeout has been set but has no effect because the pool is operating as a fixed size pool.
2025-02-19 10:37:10 [main] INFO  com.zaxxer.hikari.HikariDataSource - predictor-period-ovulation - Starting...
2025-02-19 10:37:11 [main] INFO  com.zaxxer.hikari.pool.HikariPool - predictor-period-ovulation - Added connection com.mysql.cj.jdbc.ConnectionImpl@5fbae40
2025-02-19 10:37:11 [main] INFO  com.zaxxer.hikari.HikariDataSource - predictor-period-ovulation - Start completed.
2025-02-19 10:37:11 [main] WARN  org.hibernate.orm.deprecation - HHH90000025: MySQL8Dialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-02-19 10:37:11 [main] WARN  org.hibernate.orm.deprecation - HHH90000026: MySQL8Dialect has been deprecated; use org.hibernate.dialect.MySQLDialect instead
2025-02-19 10:37:11 [main] INFO  o.hibernate.orm.connections.pooling - HHH10001005: Database info:
	Database JDBC URL [Connecting through datasource 'HikariDataSource (predictor-period-ovulation)']
	Database driver: undefined/unknown
	Database version: 8.0
	Autocommit mode: undefined/unknown
	Isolation level: undefined/unknown
	Minimum pool size: undefined/unknown
	Maximum pool size: undefined/unknown
2025-02-19 10:37:14 [main] INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-02-19 10:37:17 [main] WARN  o.s.b.a.o.j.JpaBaseConfiguration$JpaWebConfiguration - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2025-02-19 10:37:19 [main] INFO  predictor.demo.DemoApplication - Started DemoApplication in 17.952 seconds (process running for 19.022)
2025-02-19 10:37:44 [http-nio-8080-exec-1] INFO  o.a.tomcat.util.http.parser.Cookie - A cookie header was received [g_state={"i_l":0};] that contained an invalid cookie. That cookie will be ignored.
 Note: further occurrences of this error will be logged at DEBUG level.
2025-02-19 10:37:44 [http-nio-8080-exec-1] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-02-19 10:37:44 [http-nio-8080-exec-3] WARN  o.a.c.util.SessionIdGeneratorBase - Creation of SecureRandom instance for session ID generation using [SHA1PRNG] took [157] milliseconds.
2025-02-19 10:37:52 [http-nio-8080-exec-6] INFO  predictor.demo.AppConfiguration - Processing OAuth2 login for: naama.antoniouk@gmail.com
2025-02-19 10:37:53 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - select u1_0.id,u1_0.created_date_time,u1_0.email,u1_0.google_sub,u1_0.is_active,u1_0.modified_date_time,u1_0.name,u1_0.picture,u1_0.refresh_token from user u1_0 where u1_0.google_sub=?
2025-02-19 10:37:53 [http-nio-8080-exec-6] INFO  predictor.demo.AppConfiguration - Found existing user: naama.antoniouk@gmail.com
2025-02-19 10:37:53 [http-nio-8080-exec-5] INFO  p.d.A.calendar.CalendarController - Fetching period events for user
2025-02-19 10:37:53 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - select u1_0.id,u1_0.created_date_time,u1_0.email,u1_0.google_sub,u1_0.is_active,u1_0.modified_date_time,u1_0.name,u1_0.picture,u1_0.refresh_token from user u1_0 where u1_0.google_sub=?
2025-02-19 10:37:53 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - select ed1_0.id,ed1_0.calendar_event_id,ed1_0.created_date_time,ed1_0.event_date,ed1_0.events_series,ed1_0.is_period_first_day,ed1_0.is_predicted,ed1_0.is_sync,ed1_0.modified_date_time,ed1_0.title,ed1_0.user_id from event_data ed1_0 where ed1_0.user_id=? and ed1_0.is_predicted=0
2025-02-19 10:37:53 [http-nio-8080-exec-4] INFO  p.d.A.calendar.CalendarController - Fetching period events for user
2025-02-19 10:37:54 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - select u1_0.id,u1_0.created_date_time,u1_0.email,u1_0.google_sub,u1_0.is_active,u1_0.modified_date_time,u1_0.name,u1_0.picture,u1_0.refresh_token from user u1_0 where u1_0.google_sub=?
2025-02-19 10:37:54 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - select ed1_0.id,ed1_0.calendar_event_id,ed1_0.created_date_time,ed1_0.event_date,ed1_0.events_series,ed1_0.is_period_first_day,ed1_0.is_predicted,ed1_0.is_sync,ed1_0.modified_date_time,ed1_0.title,ed1_0.user_id from event_data ed1_0 where ed1_0.user_id=? and ed1_0.is_predicted=0
2025-02-19 10:38:01 [http-nio-8080-exec-7] INFO  p.d.A.calendar.CalendarController - Generating new predictions
2025-02-19 10:38:01 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - select u1_0.id,u1_0.created_date_time,u1_0.email,u1_0.google_sub,u1_0.is_active,u1_0.modified_date_time,u1_0.name,u1_0.picture,u1_0.refresh_token from user u1_0 where u1_0.google_sub=?
2025-02-19 10:38:01 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - SELECT * FROM event_data WHERE id = (SELECT MAX(id) FROM event_data WHERE user_id = ? AND is_period_first_day = true AND is_predicted = false)
2025-02-19 10:38:01 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - select es1_0.id from events_series es1_0 left join user u1_0 on u1_0.id=es1_0.user_id where u1_0.id=? limit ?
2025-02-19 10:38:01 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - SELECT AVG(DATEDIFF(e1.event_date, (SELECT MAX(e2.event_date)    FROM EventData e2    WHERE e2.eventDate < e1.eventDate    AND e2.user.id = ?    AND e2.isPeriodFirstDay = true    AND e2.isPredicted = false)) FROM EventData e1 WHERE e1.user.id = ? AND e1.isPeriodFirstDay = true AND e1.isPredicted = false
2025-02-19 10:38:01 [http-nio-8080-exec-7] WARN  o.h.e.jdbc.spi.SqlExceptionHelper - SQL Error: 1064, SQLState: 42000
2025-02-19 10:38:01 [http-nio-8080-exec-7] ERROR o.h.e.jdbc.spi.SqlExceptionHelper - You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near 'FROM EventData e1 WHERE e1.user.id = 1 AND e1.isPeriodFirstDay = true AND e1.isP' at line 1
2025-02-19 10:38:01 [http-nio-8080-exec-7] ERROR p.d.A.calendar.CalendarController - Error generating predictions
org.springframework.dao.InvalidDataAccessResourceUsageException: JDBC exception executing SQL [SELECT AVG(DATEDIFF(e1.event_date, (SELECT MAX(e2.event_date)    FROM EventData e2    WHERE e2.eventDate < e1.eventDate    AND e2.user.id = ?    AND e2.isPeriodFirstDay = true    AND e2.isPredicted = false)) FROM EventData e1 WHERE e1.user.id = ? AND e1.isPeriodFirstDay = true AND e1.isPredicted = false] [You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near 'FROM EventData e1 WHERE e1.user.id = 1 AND e1.isPeriodFirstDay = true AND e1.isP' at line 1] [n/a]; SQL [n/a]
	at org.springframework.orm.jpa.vendor.HibernateJpaDialect.convertHibernateAccessException(HibernateJpaDialect.java:277)
	at org.springframework.orm.jpa.vendor.HibernateJpaDialect.translateExceptionIfPossible(HibernateJpaDialect.java:241)
	at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.translateExceptionIfPossible(AbstractEntityManagerFactoryBean.java:560)
	at org.springframework.dao.support.ChainedPersistenceExceptionTranslator.translateExceptionIfPossible(ChainedPersistenceExceptionTranslator.java:61)
	at org.springframework.dao.support.DataAccessUtils.translateIfNecessary(DataAccessUtils.java:343)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:160)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:136)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:223)
	at jdk.proxy2/jdk.proxy2.$Proxy137.calculateAverageCycleLength(Unknown Source)
	at predictor.demo.AppModules.eventData.EventDataServiceImp.calculateCycleLength(EventDataServiceImp.java:69)
	at predictor.demo.AppModules.eventsSeries.EventSeriesServiceImp.createNewEventsSeries(EventSeriesServiceImp.java:111)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:359)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:723)
	at predictor.demo.AppModules.eventsSeries.EventSeriesServiceImp$$SpringCGLIB$$0.createNewEventsSeries(<generated>)
	at predictor.demo.AppModules.calendar.CalendarController.generatePredictions(CalendarController.java:137)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:257)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:190)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:986)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:891)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1088)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:978)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:914)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:590)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:195)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:101)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.ui.DefaultLogoutPageGeneratingFilter.doFilterInternal(DefaultLogoutPageGeneratingFilter.java:58)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.ui.DefaultLoginPageGeneratingFilter.doFilter(DefaultLoginPageGeneratingFilter.java:220)
	at org.springframework.security.web.authentication.ui.DefaultLoginPageGeneratingFilter.doFilter(DefaultLoginPageGeneratingFilter.java:206)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.ui.DefaultResourcesFilter.doFilter(DefaultResourcesFilter.java:72)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:227)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:221)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.doFilterInternal(OAuth2AuthorizationRequestRedirectFilter.java:198)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:243)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:238)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:362)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:278)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:483)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:397)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:905)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1741)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1190)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:840)
Caused by: org.hibernate.exception.SQLGrammarException: JDBC exception executing SQL [SELECT AVG(DATEDIFF(e1.event_date, (SELECT MAX(e2.event_date)    FROM EventData e2    WHERE e2.eventDate < e1.eventDate    AND e2.user.id = ?    AND e2.isPeriodFirstDay = true    AND e2.isPredicted = false)) FROM EventData e1 WHERE e1.user.id = ? AND e1.isPeriodFirstDay = true AND e1.isPredicted = false] [You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near 'FROM EventData e1 WHERE e1.user.id = 1 AND e1.isPeriodFirstDay = true AND e1.isP' at line 1] [n/a]
	at org.hibernate.exception.internal.SQLExceptionTypeDelegate.convert(SQLExceptionTypeDelegate.java:66)
	at org.hibernate.exception.internal.StandardSQLExceptionConverter.convert(StandardSQLExceptionConverter.java:58)
	at org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:108)
	at org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:94)
	at org.hibernate.sql.results.jdbc.internal.DeferredResultSetAccess.executeQuery(DeferredResultSetAccess.java:268)
	at org.hibernate.sql.results.jdbc.internal.DeferredResultSetAccess.getResultSet(DeferredResultSetAccess.java:171)
	at org.hibernate.sql.results.jdbc.internal.AbstractResultSetAccess.getMetaData(AbstractResultSetAccess.java:36)
	at org.hibernate.sql.results.jdbc.internal.AbstractResultSetAccess.getColumnCount(AbstractResultSetAccess.java:52)
	at org.hibernate.query.results.ResultSetMappingImpl.resolve(ResultSetMappingImpl.java:194)
	at org.hibernate.sql.exec.internal.JdbcSelectExecutorStandardImpl.resolveJdbcValuesSource(JdbcSelectExecutorStandardImpl.java:340)
	at org.hibernate.sql.exec.internal.JdbcSelectExecutorStandardImpl.doExecuteQuery(JdbcSelectExecutorStandardImpl.java:137)
	at org.hibernate.sql.exec.internal.JdbcSelectExecutorStandardImpl.executeQuery(JdbcSelectExecutorStandardImpl.java:102)
	at org.hibernate.sql.exec.spi.JdbcSelectExecutor.executeQuery(JdbcSelectExecutor.java:91)
	at org.hibernate.sql.exec.spi.JdbcSelectExecutor.list(JdbcSelectExecutor.java:165)
	at org.hibernate.sql.exec.spi.JdbcSelectExecutor.list(JdbcSelectExecutor.java:142)
	at org.hibernate.sql.exec.spi.JdbcSelectExecutor.list(JdbcSelectExecutor.java:132)
	at org.hibernate.query.sql.internal.NativeSelectQueryPlanImpl.performList(NativeSelectQueryPlanImpl.java:135)
	at org.hibernate.query.sql.internal.NativeQueryImpl.doList(NativeQueryImpl.java:693)
	at org.hibernate.query.spi.AbstractSelectionQuery.list(AbstractSelectionQuery.java:143)
	at org.hibernate.query.spi.AbstractSelectionQuery.getSingleResult(AbstractSelectionQuery.java:275)
	at org.springframework.data.jpa.repository.query.JpaQueryExecution$SingleEntityExecution.doExecute(JpaQueryExecution.java:224)
	at org.springframework.data.jpa.repository.query.JpaQueryExecution.execute(JpaQueryExecution.java:93)
	at org.springframework.data.jpa.repository.query.AbstractJpaQuery.doExecute(AbstractJpaQuery.java:152)
	at org.springframework.data.jpa.repository.query.AbstractJpaQuery.execute(AbstractJpaQuery.java:140)
	at org.springframework.data.repository.core.support.RepositoryMethodInvoker.doInvoke(RepositoryMethodInvoker.java:170)
	at org.springframework.data.repository.core.support.RepositoryMethodInvoker.invoke(RepositoryMethodInvoker.java:158)
	at org.springframework.data.repository.core.support.QueryExecutorMethodInterceptor.doInvoke(QueryExecutorMethodInterceptor.java:170)
	at org.springframework.data.repository.core.support.QueryExecutorMethodInterceptor.invoke(QueryExecutorMethodInterceptor.java:149)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.data.projection.DefaultMethodInvokingMethodInterceptor.invoke(DefaultMethodInvokingMethodInterceptor.java:69)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:380)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:138)
	... 123 common frames omitted
Caused by: java.sql.SQLSyntaxErrorException: You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near 'FROM EventData e1 WHERE e1.user.id = 1 AND e1.isPeriodFirstDay = true AND e1.isP' at line 1
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:112)
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:114)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeInternal(ClientPreparedStatement.java:988)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeQuery(ClientPreparedStatement.java:1056)
	at com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
	at com.zaxxer.hikari.pool.HikariProxyPreparedStatement.executeQuery(HikariProxyPreparedStatement.java)
	at org.hibernate.sql.results.jdbc.internal.DeferredResultSetAccess.executeQuery(DeferredResultSetAccess.java:250)
	... 153 common frames omitted
2025-02-19 10:40:13 [main] INFO  predictor.demo.DemoApplication - Starting DemoApplication using Java 17.0.13 with PID 14092 (C:\Fullstack_apps\period-and-ovulation-predictor\backend\demo\target\classes started by Danil in C:\Fullstack_apps\period-and-ovulation-predictor)
2025-02-19 10:40:13 [main] INFO  predictor.demo.DemoApplication - No active profile set, falling back to 1 default profile: "default"
2025-02-19 10:40:19 [main] INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-02-19 10:40:19 [main] INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.34]
2025-02-19 10:40:19 [main] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-02-19 10:40:20 [main] INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-02-19 10:40:20 [main] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.6.5.Final
2025-02-19 10:40:20 [main] INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-02-19 10:40:21 [main] WARN  com.zaxxer.hikari.HikariConfig - predictor-period-ovulation - idleTimeout has been set but has no effect because the pool is operating as a fixed size pool.
2025-02-19 10:40:21 [main] INFO  com.zaxxer.hikari.HikariDataSource - predictor-period-ovulation - Starting...
2025-02-19 10:40:22 [main] INFO  com.zaxxer.hikari.pool.HikariPool - predictor-period-ovulation - Added connection com.mysql.cj.jdbc.ConnectionImpl@67f591c2
2025-02-19 10:40:22 [main] INFO  com.zaxxer.hikari.HikariDataSource - predictor-period-ovulation - Start completed.
2025-02-19 10:40:22 [main] WARN  org.hibernate.orm.deprecation - HHH90000025: MySQL8Dialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-02-19 10:40:22 [main] WARN  org.hibernate.orm.deprecation - HHH90000026: MySQL8Dialect has been deprecated; use org.hibernate.dialect.MySQLDialect instead
2025-02-19 10:40:22 [main] INFO  o.hibernate.orm.connections.pooling - HHH10001005: Database info:
	Database JDBC URL [Connecting through datasource 'HikariDataSource (predictor-period-ovulation)']
	Database driver: undefined/unknown
	Database version: 8.0
	Autocommit mode: undefined/unknown
	Isolation level: undefined/unknown
	Minimum pool size: undefined/unknown
	Maximum pool size: undefined/unknown
2025-02-19 10:40:25 [main] INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-02-19 10:40:28 [main] WARN  o.s.b.a.o.j.JpaBaseConfiguration$JpaWebConfiguration - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2025-02-19 10:40:30 [main] INFO  predictor.demo.DemoApplication - Started DemoApplication in 18.954 seconds (process running for 20.156)
2025-02-19 10:40:43 [http-nio-8080-exec-1] INFO  o.a.tomcat.util.http.parser.Cookie - A cookie header was received [g_state={"i_l":0};] that contained an invalid cookie. That cookie will be ignored.
 Note: further occurrences of this error will be logged at DEBUG level.
2025-02-19 10:40:43 [http-nio-8080-exec-1] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-02-19 10:40:43 [http-nio-8080-exec-2] WARN  o.a.c.util.SessionIdGeneratorBase - Creation of SecureRandom instance for session ID generation using [SHA1PRNG] took [213] milliseconds.
2025-02-19 10:40:48 [http-nio-8080-exec-4] INFO  predictor.demo.AppConfiguration - Processing OAuth2 login for: naama.antoniouk@gmail.com
2025-02-19 10:40:48 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - select u1_0.id,u1_0.created_date_time,u1_0.email,u1_0.google_sub,u1_0.is_active,u1_0.modified_date_time,u1_0.name,u1_0.picture,u1_0.refresh_token from user u1_0 where u1_0.google_sub=?
2025-02-19 10:40:49 [http-nio-8080-exec-4] INFO  predictor.demo.AppConfiguration - Found existing user: naama.antoniouk@gmail.com
2025-02-19 10:40:49 [http-nio-8080-exec-5] INFO  p.d.A.calendar.CalendarController - Fetching period events for user
2025-02-19 10:40:49 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - select u1_0.id,u1_0.created_date_time,u1_0.email,u1_0.google_sub,u1_0.is_active,u1_0.modified_date_time,u1_0.name,u1_0.picture,u1_0.refresh_token from user u1_0 where u1_0.google_sub=?
2025-02-19 10:40:49 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - select ed1_0.id,ed1_0.calendar_event_id,ed1_0.created_date_time,ed1_0.event_date,ed1_0.events_series,ed1_0.is_period_first_day,ed1_0.is_predicted,ed1_0.is_sync,ed1_0.modified_date_time,ed1_0.title,ed1_0.user_id from event_data ed1_0 where ed1_0.user_id=? and ed1_0.is_predicted=0
2025-02-19 10:40:49 [http-nio-8080-exec-6] INFO  p.d.A.calendar.CalendarController - Fetching period events for user
2025-02-19 10:40:49 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - select u1_0.id,u1_0.created_date_time,u1_0.email,u1_0.google_sub,u1_0.is_active,u1_0.modified_date_time,u1_0.name,u1_0.picture,u1_0.refresh_token from user u1_0 where u1_0.google_sub=?
2025-02-19 10:40:49 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - select ed1_0.id,ed1_0.calendar_event_id,ed1_0.created_date_time,ed1_0.event_date,ed1_0.events_series,ed1_0.is_period_first_day,ed1_0.is_predicted,ed1_0.is_sync,ed1_0.modified_date_time,ed1_0.title,ed1_0.user_id from event_data ed1_0 where ed1_0.user_id=? and ed1_0.is_predicted=0
2025-02-19 10:40:57 [http-nio-8080-exec-7] INFO  p.d.A.calendar.CalendarController - Generating new predictions
2025-02-19 10:40:57 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - select u1_0.id,u1_0.created_date_time,u1_0.email,u1_0.google_sub,u1_0.is_active,u1_0.modified_date_time,u1_0.name,u1_0.picture,u1_0.refresh_token from user u1_0 where u1_0.google_sub=?
2025-02-19 10:40:57 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - SELECT * FROM event_data WHERE id = (SELECT MAX(id) FROM event_data WHERE user_id = ? AND is_period_first_day = true AND is_predicted = false)
2025-02-19 10:40:57 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - select es1_0.id from events_series es1_0 left join user u1_0 on u1_0.id=es1_0.user_id where u1_0.id=? limit ?
2025-02-19 10:40:57 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - SELECT AVG(DATEDIFF(e1.event_date, (SELECT MAX(e2.event_date) FROM event_data e2 WHERE e2.event_date < e1.event_date AND e2.user_id = ? AND e2.is_period_first_day = true AND e2.is_predicted = false)) FROM event_data e1 WHERE e1.user_id = ? AND e1.is_period_first_day = true AND e1.is_predicted = false
2025-02-19 10:40:57 [http-nio-8080-exec-7] WARN  o.h.e.jdbc.spi.SqlExceptionHelper - SQL Error: 1064, SQLState: 42000
2025-02-19 10:40:57 [http-nio-8080-exec-7] ERROR o.h.e.jdbc.spi.SqlExceptionHelper - You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near 'FROM event_data e1 WHERE e1.user_id = 1 AND e1.is_period_first_day = true AND e1' at line 1
2025-02-19 10:40:57 [http-nio-8080-exec-7] ERROR p.d.A.calendar.CalendarController - Error generating predictions
org.springframework.dao.InvalidDataAccessResourceUsageException: JDBC exception executing SQL [SELECT AVG(DATEDIFF(e1.event_date, (SELECT MAX(e2.event_date) FROM event_data e2 WHERE e2.event_date < e1.event_date AND e2.user_id = ? AND e2.is_period_first_day = true AND e2.is_predicted = false)) FROM event_data e1 WHERE e1.user_id = ? AND e1.is_period_first_day = true AND e1.is_predicted = false] [You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near 'FROM event_data e1 WHERE e1.user_id = 1 AND e1.is_period_first_day = true AND e1' at line 1] [n/a]; SQL [n/a]
	at org.springframework.orm.jpa.vendor.HibernateJpaDialect.convertHibernateAccessException(HibernateJpaDialect.java:277)
	at org.springframework.orm.jpa.vendor.HibernateJpaDialect.translateExceptionIfPossible(HibernateJpaDialect.java:241)
	at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.translateExceptionIfPossible(AbstractEntityManagerFactoryBean.java:560)
	at org.springframework.dao.support.ChainedPersistenceExceptionTranslator.translateExceptionIfPossible(ChainedPersistenceExceptionTranslator.java:61)
	at org.springframework.dao.support.DataAccessUtils.translateIfNecessary(DataAccessUtils.java:343)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:160)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:136)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:223)
	at jdk.proxy2/jdk.proxy2.$Proxy137.calculateAverageCycleLength(Unknown Source)
	at predictor.demo.AppModules.eventData.EventDataServiceImp.calculateCycleLength(EventDataServiceImp.java:69)
	at predictor.demo.AppModules.eventsSeries.EventSeriesServiceImp.createNewEventsSeries(EventSeriesServiceImp.java:111)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:359)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:723)
	at predictor.demo.AppModules.eventsSeries.EventSeriesServiceImp$$SpringCGLIB$$0.createNewEventsSeries(<generated>)
	at predictor.demo.AppModules.calendar.CalendarController.generatePredictions(CalendarController.java:137)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:257)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:190)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:986)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:891)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1088)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:978)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:914)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:590)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:195)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:101)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.ui.DefaultLogoutPageGeneratingFilter.doFilterInternal(DefaultLogoutPageGeneratingFilter.java:58)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.ui.DefaultLoginPageGeneratingFilter.doFilter(DefaultLoginPageGeneratingFilter.java:220)
	at org.springframework.security.web.authentication.ui.DefaultLoginPageGeneratingFilter.doFilter(DefaultLoginPageGeneratingFilter.java:206)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.ui.DefaultResourcesFilter.doFilter(DefaultResourcesFilter.java:72)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:227)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:221)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.doFilterInternal(OAuth2AuthorizationRequestRedirectFilter.java:198)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:243)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:238)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:362)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:278)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:483)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:397)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:905)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1741)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1190)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:840)
Caused by: org.hibernate.exception.SQLGrammarException: JDBC exception executing SQL [SELECT AVG(DATEDIFF(e1.event_date, (SELECT MAX(e2.event_date) FROM event_data e2 WHERE e2.event_date < e1.event_date AND e2.user_id = ? AND e2.is_period_first_day = true AND e2.is_predicted = false)) FROM event_data e1 WHERE e1.user_id = ? AND e1.is_period_first_day = true AND e1.is_predicted = false] [You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near 'FROM event_data e1 WHERE e1.user_id = 1 AND e1.is_period_first_day = true AND e1' at line 1] [n/a]
	at org.hibernate.exception.internal.SQLExceptionTypeDelegate.convert(SQLExceptionTypeDelegate.java:66)
	at org.hibernate.exception.internal.StandardSQLExceptionConverter.convert(StandardSQLExceptionConverter.java:58)
	at org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:108)
	at org.hibernate.engine.jdbc.spi.SqlExceptionHelper.convert(SqlExceptionHelper.java:94)
	at org.hibernate.sql.results.jdbc.internal.DeferredResultSetAccess.executeQuery(DeferredResultSetAccess.java:268)
	at org.hibernate.sql.results.jdbc.internal.DeferredResultSetAccess.getResultSet(DeferredResultSetAccess.java:171)
	at org.hibernate.sql.results.jdbc.internal.AbstractResultSetAccess.getMetaData(AbstractResultSetAccess.java:36)
	at org.hibernate.sql.results.jdbc.internal.AbstractResultSetAccess.getColumnCount(AbstractResultSetAccess.java:52)
	at org.hibernate.query.results.ResultSetMappingImpl.resolve(ResultSetMappingImpl.java:194)
	at org.hibernate.sql.exec.internal.JdbcSelectExecutorStandardImpl.resolveJdbcValuesSource(JdbcSelectExecutorStandardImpl.java:340)
	at org.hibernate.sql.exec.internal.JdbcSelectExecutorStandardImpl.doExecuteQuery(JdbcSelectExecutorStandardImpl.java:137)
	at org.hibernate.sql.exec.internal.JdbcSelectExecutorStandardImpl.executeQuery(JdbcSelectExecutorStandardImpl.java:102)
	at org.hibernate.sql.exec.spi.JdbcSelectExecutor.executeQuery(JdbcSelectExecutor.java:91)
	at org.hibernate.sql.exec.spi.JdbcSelectExecutor.list(JdbcSelectExecutor.java:165)
	at org.hibernate.sql.exec.spi.JdbcSelectExecutor.list(JdbcSelectExecutor.java:142)
	at org.hibernate.sql.exec.spi.JdbcSelectExecutor.list(JdbcSelectExecutor.java:132)
	at org.hibernate.query.sql.internal.NativeSelectQueryPlanImpl.performList(NativeSelectQueryPlanImpl.java:135)
	at org.hibernate.query.sql.internal.NativeQueryImpl.doList(NativeQueryImpl.java:693)
	at org.hibernate.query.spi.AbstractSelectionQuery.list(AbstractSelectionQuery.java:143)
	at org.hibernate.query.spi.AbstractSelectionQuery.getSingleResult(AbstractSelectionQuery.java:275)
	at org.springframework.data.jpa.repository.query.JpaQueryExecution$SingleEntityExecution.doExecute(JpaQueryExecution.java:224)
	at org.springframework.data.jpa.repository.query.JpaQueryExecution.execute(JpaQueryExecution.java:93)
	at org.springframework.data.jpa.repository.query.AbstractJpaQuery.doExecute(AbstractJpaQuery.java:152)
	at org.springframework.data.jpa.repository.query.AbstractJpaQuery.execute(AbstractJpaQuery.java:140)
	at org.springframework.data.repository.core.support.RepositoryMethodInvoker.doInvoke(RepositoryMethodInvoker.java:170)
	at org.springframework.data.repository.core.support.RepositoryMethodInvoker.invoke(RepositoryMethodInvoker.java:158)
	at org.springframework.data.repository.core.support.QueryExecutorMethodInterceptor.doInvoke(QueryExecutorMethodInterceptor.java:170)
	at org.springframework.data.repository.core.support.QueryExecutorMethodInterceptor.invoke(QueryExecutorMethodInterceptor.java:149)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.data.projection.DefaultMethodInvokingMethodInterceptor.invoke(DefaultMethodInvokingMethodInterceptor.java:69)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:380)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:138)
	... 123 common frames omitted
Caused by: java.sql.SQLSyntaxErrorException: You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near 'FROM event_data e1 WHERE e1.user_id = 1 AND e1.is_period_first_day = true AND e1' at line 1
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:112)
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:114)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeInternal(ClientPreparedStatement.java:988)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeQuery(ClientPreparedStatement.java:1056)
	at com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
	at com.zaxxer.hikari.pool.HikariProxyPreparedStatement.executeQuery(HikariProxyPreparedStatement.java)
	at org.hibernate.sql.results.jdbc.internal.DeferredResultSetAccess.executeQuery(DeferredResultSetAccess.java:250)
	... 153 common frames omitted
2025-02-19 10:43:33 [main] INFO  predictor.demo.DemoApplication - Starting DemoApplication using Java 17.0.13 with PID 16432 (C:\Fullstack_apps\period-and-ovulation-predictor\backend\demo\target\classes started by Danil in C:\Fullstack_apps\period-and-ovulation-predictor)
2025-02-19 10:43:33 [main] INFO  predictor.demo.DemoApplication - No active profile set, falling back to 1 default profile: "default"
2025-02-19 10:43:39 [main] INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-02-19 10:43:39 [main] INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.34]
2025-02-19 10:43:39 [main] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-02-19 10:43:39 [main] INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-02-19 10:43:40 [main] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.6.5.Final
2025-02-19 10:43:40 [main] INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-02-19 10:43:41 [main] WARN  com.zaxxer.hikari.HikariConfig - predictor-period-ovulation - idleTimeout has been set but has no effect because the pool is operating as a fixed size pool.
2025-02-19 10:43:41 [main] INFO  com.zaxxer.hikari.HikariDataSource - predictor-period-ovulation - Starting...
2025-02-19 10:43:42 [main] INFO  com.zaxxer.hikari.pool.HikariPool - predictor-period-ovulation - Added connection com.mysql.cj.jdbc.ConnectionImpl@67f591c2
2025-02-19 10:43:42 [main] INFO  com.zaxxer.hikari.HikariDataSource - predictor-period-ovulation - Start completed.
2025-02-19 10:43:42 [main] WARN  org.hibernate.orm.deprecation - HHH90000025: MySQL8Dialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-02-19 10:43:42 [main] WARN  org.hibernate.orm.deprecation - HHH90000026: MySQL8Dialect has been deprecated; use org.hibernate.dialect.MySQLDialect instead
2025-02-19 10:43:42 [main] INFO  o.hibernate.orm.connections.pooling - HHH10001005: Database info:
	Database JDBC URL [Connecting through datasource 'HikariDataSource (predictor-period-ovulation)']
	Database driver: undefined/unknown
	Database version: 8.0
	Autocommit mode: undefined/unknown
	Isolation level: undefined/unknown
	Minimum pool size: undefined/unknown
	Maximum pool size: undefined/unknown
2025-02-19 10:43:45 [main] INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-02-19 10:43:49 [main] WARN  o.s.b.a.o.j.JpaBaseConfiguration$JpaWebConfiguration - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2025-02-19 10:43:51 [main] INFO  predictor.demo.DemoApplication - Started DemoApplication in 19.142 seconds (process running for 20.157)
2025-02-19 10:44:17 [http-nio-8080-exec-1] INFO  o.a.tomcat.util.http.parser.Cookie - A cookie header was received [g_state={"i_l":0};] that contained an invalid cookie. That cookie will be ignored.
 Note: further occurrences of this error will be logged at DEBUG level.
2025-02-19 10:44:17 [http-nio-8080-exec-1] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-02-19 10:44:17 [http-nio-8080-exec-2] WARN  o.a.c.util.SessionIdGeneratorBase - Creation of SecureRandom instance for session ID generation using [SHA1PRNG] took [157] milliseconds.
2025-02-19 10:44:22 [http-nio-8080-exec-4] INFO  predictor.demo.AppConfiguration - Processing OAuth2 login for: naama.antoniouk@gmail.com
2025-02-19 10:44:23 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - select u1_0.id,u1_0.created_date_time,u1_0.email,u1_0.google_sub,u1_0.is_active,u1_0.modified_date_time,u1_0.name,u1_0.picture,u1_0.refresh_token from user u1_0 where u1_0.google_sub=?
2025-02-19 10:44:23 [http-nio-8080-exec-4] INFO  predictor.demo.AppConfiguration - Found existing user: naama.antoniouk@gmail.com
2025-02-19 10:44:23 [http-nio-8080-exec-5] INFO  p.d.A.calendar.CalendarController - Fetching period events for user
2025-02-19 10:44:23 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - select u1_0.id,u1_0.created_date_time,u1_0.email,u1_0.google_sub,u1_0.is_active,u1_0.modified_date_time,u1_0.name,u1_0.picture,u1_0.refresh_token from user u1_0 where u1_0.google_sub=?
2025-02-19 10:44:24 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - select ed1_0.id,ed1_0.calendar_event_id,ed1_0.created_date_time,ed1_0.event_date,ed1_0.events_series,ed1_0.is_period_first_day,ed1_0.is_predicted,ed1_0.is_sync,ed1_0.modified_date_time,ed1_0.title,ed1_0.user_id from event_data ed1_0 where ed1_0.user_id=? and ed1_0.is_predicted=0
2025-02-19 10:44:24 [http-nio-8080-exec-6] INFO  p.d.A.calendar.CalendarController - Fetching period events for user
2025-02-19 10:44:24 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - select u1_0.id,u1_0.created_date_time,u1_0.email,u1_0.google_sub,u1_0.is_active,u1_0.modified_date_time,u1_0.name,u1_0.picture,u1_0.refresh_token from user u1_0 where u1_0.google_sub=?
2025-02-19 10:44:24 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - select ed1_0.id,ed1_0.calendar_event_id,ed1_0.created_date_time,ed1_0.event_date,ed1_0.events_series,ed1_0.is_period_first_day,ed1_0.is_predicted,ed1_0.is_sync,ed1_0.modified_date_time,ed1_0.title,ed1_0.user_id from event_data ed1_0 where ed1_0.user_id=? and ed1_0.is_predicted=0
2025-02-19 10:44:25 [http-nio-8080-exec-7] INFO  p.d.A.calendar.CalendarController - Generating new predictions
2025-02-19 10:44:25 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - select u1_0.id,u1_0.created_date_time,u1_0.email,u1_0.google_sub,u1_0.is_active,u1_0.modified_date_time,u1_0.name,u1_0.picture,u1_0.refresh_token from user u1_0 where u1_0.google_sub=?
2025-02-19 10:44:25 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - SELECT * FROM event_data WHERE id = (SELECT MAX(id) FROM event_data WHERE user_id = ? AND is_period_first_day = true AND is_predicted = false)
2025-02-19 10:44:25 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - select es1_0.id from events_series es1_0 left join user u1_0 on u1_0.id=es1_0.user_id where u1_0.id=? limit ?
2025-02-19 10:44:25 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - WITH period_events AS (     SELECT event_date,            LAG(event_date) OVER (ORDER BY event_date DESC) AS prev_event_date     FROM event_data     WHERE user_id = ?     AND is_period_first_day = true     AND is_predicted = false ) SELECT AVG(DATEDIFF(event_date, prev_event_date)) FROM period_events WHERE prev_event_date IS NOT NULL
2025-02-19 10:44:25 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - SELECT * FROM event_data WHERE id = (SELECT MAX(id) FROM event_data WHERE user_id = ? AND is_period_first_day = true AND is_predicted = false)
2025-02-19 10:44:25 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - select count(ed1_0.id) from event_data ed1_0 where ed1_0.user_id=? and ed1_0.is_predicted=0
2025-02-19 10:44:26 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - insert into events_series (calculated_cycle_length,prediction_date,user_id) values (?,?,?)
2025-02-19 10:44:26 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - SELECT * FROM event_data WHERE id = (SELECT MAX(id) FROM event_data WHERE user_id = ? AND is_period_first_day = true AND is_predicted = false)
2025-02-19 10:44:26 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - select count(*) from event_data ed1_0 where ed1_0.id=?
2025-02-19 10:44:26 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - insert into event_data (calendar_event_id,created_date_time,event_date,events_series,is_period_first_day,is_predicted,is_sync,modified_date_time,title,user_id) values (?,?,?,?,?,?,?,?,?,?)
2025-02-19 10:44:26 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - update event_data set calendar_event_id=?,event_date=?,events_series=?,is_period_first_day=?,is_predicted=?,is_sync=?,modified_date_time=?,title=? where id=?
2025-02-19 10:44:26 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - select count(*) from event_data ed1_0 where ed1_0.id=?
2025-02-19 10:44:27 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - insert into event_data (calendar_event_id,created_date_time,event_date,events_series,is_period_first_day,is_predicted,is_sync,modified_date_time,title,user_id) values (?,?,?,?,?,?,?,?,?,?)
2025-02-19 10:44:27 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - update event_data set calendar_event_id=?,event_date=?,events_series=?,is_period_first_day=?,is_predicted=?,is_sync=?,modified_date_time=?,title=? where id=?
2025-02-19 10:44:27 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - select count(*) from event_data ed1_0 where ed1_0.id=?
2025-02-19 10:44:27 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - insert into event_data (calendar_event_id,created_date_time,event_date,events_series,is_period_first_day,is_predicted,is_sync,modified_date_time,title,user_id) values (?,?,?,?,?,?,?,?,?,?)
2025-02-19 10:44:27 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - update event_data set calendar_event_id=?,event_date=?,events_series=?,is_period_first_day=?,is_predicted=?,is_sync=?,modified_date_time=?,title=? where id=?
2025-02-19 10:44:27 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - select count(*) from event_data ed1_0 where ed1_0.id=?
2025-02-19 10:44:27 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - insert into event_data (calendar_event_id,created_date_time,event_date,events_series,is_period_first_day,is_predicted,is_sync,modified_date_time,title,user_id) values (?,?,?,?,?,?,?,?,?,?)
2025-02-19 10:44:28 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - update event_data set calendar_event_id=?,event_date=?,events_series=?,is_period_first_day=?,is_predicted=?,is_sync=?,modified_date_time=?,title=? where id=?
2025-02-19 10:44:28 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - select count(*) from event_data ed1_0 where ed1_0.id=?
2025-02-19 10:44:28 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - insert into event_data (calendar_event_id,created_date_time,event_date,events_series,is_period_first_day,is_predicted,is_sync,modified_date_time,title,user_id) values (?,?,?,?,?,?,?,?,?,?)
2025-02-19 10:44:28 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - update event_data set calendar_event_id=?,event_date=?,events_series=?,is_period_first_day=?,is_predicted=?,is_sync=?,modified_date_time=?,title=? where id=?
2025-02-19 10:44:28 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - select count(*) from event_data ed1_0 where ed1_0.id=?
2025-02-19 10:44:28 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - insert into event_data (calendar_event_id,created_date_time,event_date,events_series,is_period_first_day,is_predicted,is_sync,modified_date_time,title,user_id) values (?,?,?,?,?,?,?,?,?,?)
2025-02-19 10:44:29 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - update event_data set calendar_event_id=?,event_date=?,events_series=?,is_period_first_day=?,is_predicted=?,is_sync=?,modified_date_time=?,title=? where id=?
2025-02-19 10:44:29 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - select count(*) from event_data ed1_0 where ed1_0.id=?
2025-02-19 10:44:29 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - insert into event_data (calendar_event_id,created_date_time,event_date,events_series,is_period_first_day,is_predicted,is_sync,modified_date_time,title,user_id) values (?,?,?,?,?,?,?,?,?,?)
2025-02-19 10:44:29 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - update event_data set calendar_event_id=?,event_date=?,events_series=?,is_period_first_day=?,is_predicted=?,is_sync=?,modified_date_time=?,title=? where id=?
2025-02-19 10:44:29 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - select count(*) from event_data ed1_0 where ed1_0.id=?
2025-02-19 10:44:29 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - insert into event_data (calendar_event_id,created_date_time,event_date,events_series,is_period_first_day,is_predicted,is_sync,modified_date_time,title,user_id) values (?,?,?,?,?,?,?,?,?,?)
2025-02-19 10:44:29 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - update event_data set calendar_event_id=?,event_date=?,events_series=?,is_period_first_day=?,is_predicted=?,is_sync=?,modified_date_time=?,title=? where id=?
2025-02-19 10:44:29 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - select count(*) from event_data ed1_0 where ed1_0.id=?
2025-02-19 10:44:29 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - insert into event_data (calendar_event_id,created_date_time,event_date,events_series,is_period_first_day,is_predicted,is_sync,modified_date_time,title,user_id) values (?,?,?,?,?,?,?,?,?,?)
2025-02-19 10:44:29 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - update event_data set calendar_event_id=?,event_date=?,events_series=?,is_period_first_day=?,is_predicted=?,is_sync=?,modified_date_time=?,title=? where id=?
2025-02-19 10:44:29 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - select count(*) from event_data ed1_0 where ed1_0.id=?
2025-02-19 10:44:29 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - insert into event_data (calendar_event_id,created_date_time,event_date,events_series,is_period_first_day,is_predicted,is_sync,modified_date_time,title,user_id) values (?,?,?,?,?,?,?,?,?,?)
2025-02-19 10:44:30 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - update event_data set calendar_event_id=?,event_date=?,events_series=?,is_period_first_day=?,is_predicted=?,is_sync=?,modified_date_time=?,title=? where id=?
2025-02-19 10:44:30 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - select count(*) from event_data ed1_0 where ed1_0.id=?
2025-02-19 10:44:30 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - insert into event_data (calendar_event_id,created_date_time,event_date,events_series,is_period_first_day,is_predicted,is_sync,modified_date_time,title,user_id) values (?,?,?,?,?,?,?,?,?,?)
2025-02-19 10:44:30 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - update event_data set calendar_event_id=?,event_date=?,events_series=?,is_period_first_day=?,is_predicted=?,is_sync=?,modified_date_time=?,title=? where id=?
2025-02-19 10:44:30 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - select count(*) from event_data ed1_0 where ed1_0.id=?
2025-02-19 10:44:30 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - insert into event_data (calendar_event_id,created_date_time,event_date,events_series,is_period_first_day,is_predicted,is_sync,modified_date_time,title,user_id) values (?,?,?,?,?,?,?,?,?,?)
2025-02-19 10:44:31 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - update event_data set calendar_event_id=?,event_date=?,events_series=?,is_period_first_day=?,is_predicted=?,is_sync=?,modified_date_time=?,title=? where id=?
2025-02-19 10:44:31 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - select count(*) from event_data ed1_0 where ed1_0.id=?
2025-02-19 10:44:31 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - insert into event_data (calendar_event_id,created_date_time,event_date,events_series,is_period_first_day,is_predicted,is_sync,modified_date_time,title,user_id) values (?,?,?,?,?,?,?,?,?,?)
2025-02-19 10:44:31 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - select count(*) from event_data ed1_0 where ed1_0.id=?
2025-02-19 10:44:31 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - insert into event_data (calendar_event_id,created_date_time,event_date,events_series,is_period_first_day,is_predicted,is_sync,modified_date_time,title,user_id) values (?,?,?,?,?,?,?,?,?,?)
2025-02-19 10:44:31 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - select count(*) from event_data ed1_0 where ed1_0.id=?
2025-02-19 10:44:31 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - insert into event_data (calendar_event_id,created_date_time,event_date,events_series,is_period_first_day,is_predicted,is_sync,modified_date_time,title,user_id) values (?,?,?,?,?,?,?,?,?,?)
2025-02-19 10:44:31 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - select count(*) from event_data ed1_0 where ed1_0.id=?
2025-02-19 10:44:31 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - insert into event_data (calendar_event_id,created_date_time,event_date,events_series,is_period_first_day,is_predicted,is_sync,modified_date_time,title,user_id) values (?,?,?,?,?,?,?,?,?,?)
2025-02-19 10:44:31 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - select count(*) from event_data ed1_0 where ed1_0.id=?
2025-02-19 10:44:31 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - insert into event_data (calendar_event_id,created_date_time,event_date,events_series,is_period_first_day,is_predicted,is_sync,modified_date_time,title,user_id) values (?,?,?,?,?,?,?,?,?,?)
2025-02-19 10:44:31 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - select count(*) from event_data ed1_0 where ed1_0.id=?
2025-02-19 10:44:31 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - insert into event_data (calendar_event_id,created_date_time,event_date,events_series,is_period_first_day,is_predicted,is_sync,modified_date_time,title,user_id) values (?,?,?,?,?,?,?,?,?,?)
2025-02-19 10:44:31 [http-nio-8080-exec-7] INFO  p.d.A.calendar.GoogleCalendarService - Successfully synced event: ?Period-Prediction? to Google Calendar
2025-02-19 10:44:31 [http-nio-8080-exec-7] INFO  p.d.A.calendar.GoogleCalendarService - Successfully synced event: ?Period-Prediction? to Google Calendar
2025-02-19 10:44:32 [http-nio-8080-exec-7] INFO  p.d.A.calendar.GoogleCalendarService - Successfully synced event: ?Period-Prediction? to Google Calendar
2025-02-19 10:44:32 [http-nio-8080-exec-7] INFO  p.d.A.calendar.GoogleCalendarService - Successfully synced event: ?Period-Prediction? to Google Calendar
2025-02-19 10:44:32 [http-nio-8080-exec-7] INFO  p.d.A.calendar.GoogleCalendarService - Successfully synced event: ?Period-Prediction? to Google Calendar
2025-02-19 10:44:33 [http-nio-8080-exec-7] INFO  p.d.A.calendar.GoogleCalendarService - Successfully synced event: ?Period-Prediction? to Google Calendar
2025-02-19 10:44:33 [http-nio-8080-exec-7] INFO  p.d.A.calendar.GoogleCalendarService - Successfully synced event: ?Period-Prediction? to Google Calendar
2025-02-19 10:44:33 [http-nio-8080-exec-7] INFO  p.d.A.calendar.GoogleCalendarService - Successfully synced event: ?Period-Prediction? to Google Calendar
2025-02-19 10:44:34 [http-nio-8080-exec-7] INFO  p.d.A.calendar.GoogleCalendarService - Successfully synced event: ?Period-Prediction? to Google Calendar
2025-02-19 10:44:34 [http-nio-8080-exec-7] INFO  p.d.A.calendar.GoogleCalendarService - Successfully synced event: ?Period-Prediction? to Google Calendar
2025-02-19 10:44:34 [http-nio-8080-exec-7] INFO  p.d.A.calendar.GoogleCalendarService - Successfully synced event: ?Period-Prediction? to Google Calendar
2025-02-19 10:44:34 [http-nio-8080-exec-7] INFO  p.d.A.calendar.GoogleCalendarService - Successfully synced event: ?Period-Prediction? to Google Calendar
2025-02-19 10:44:35 [http-nio-8080-exec-7] INFO  p.d.A.calendar.GoogleCalendarService - Successfully synced event: ??Ovulation-Prediction?? to Google Calendar
2025-02-19 10:44:35 [http-nio-8080-exec-7] INFO  p.d.A.calendar.GoogleCalendarService - Successfully synced event: ??Ovulation-Prediction?? to Google Calendar
2025-02-19 10:44:35 [http-nio-8080-exec-7] INFO  p.d.A.calendar.GoogleCalendarService - Successfully synced event: ??Ovulation-Prediction?? to Google Calendar
2025-02-19 10:44:36 [http-nio-8080-exec-7] INFO  p.d.A.calendar.GoogleCalendarService - Successfully synced event: ??Ovulation-Prediction?? to Google Calendar
2025-02-19 10:44:36 [http-nio-8080-exec-7] INFO  p.d.A.calendar.GoogleCalendarService - Successfully synced event: ??Ovulation-Prediction?? to Google Calendar
2025-02-19 10:44:36 [http-nio-8080-exec-7] INFO  p.d.A.calendar.GoogleCalendarService - Successfully synced event: ??Ovulation-Prediction?? to Google Calendar
2025-02-19 10:44:36 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - update event_data set calendar_event_id=?,event_date=?,events_series=?,is_period_first_day=?,is_predicted=?,is_sync=?,modified_date_time=?,title=? where id=?
2025-02-19 10:44:36 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - update event_data set calendar_event_id=?,event_date=?,events_series=?,is_period_first_day=?,is_predicted=?,is_sync=?,modified_date_time=?,title=? where id=?
2025-02-19 10:44:36 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - update event_data set calendar_event_id=?,event_date=?,events_series=?,is_period_first_day=?,is_predicted=?,is_sync=?,modified_date_time=?,title=? where id=?
2025-02-19 10:44:36 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - update event_data set calendar_event_id=?,event_date=?,events_series=?,is_period_first_day=?,is_predicted=?,is_sync=?,modified_date_time=?,title=? where id=?
2025-02-19 10:44:36 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - update event_data set calendar_event_id=?,event_date=?,events_series=?,is_period_first_day=?,is_predicted=?,is_sync=?,modified_date_time=?,title=? where id=?
2025-02-19 10:44:36 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - update event_data set calendar_event_id=?,event_date=?,events_series=?,is_period_first_day=?,is_predicted=?,is_sync=?,modified_date_time=?,title=? where id=?
2025-02-19 10:44:36 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - update event_data set calendar_event_id=?,event_date=?,events_series=?,is_period_first_day=?,is_predicted=?,is_sync=?,modified_date_time=?,title=? where id=?
2025-02-19 10:44:36 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - update event_data set calendar_event_id=?,event_date=?,events_series=?,is_period_first_day=?,is_predicted=?,is_sync=?,modified_date_time=?,title=? where id=?
2025-02-19 10:44:36 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - update event_data set calendar_event_id=?,event_date=?,events_series=?,is_period_first_day=?,is_predicted=?,is_sync=?,modified_date_time=?,title=? where id=?
2025-02-19 10:44:36 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - update event_data set calendar_event_id=?,event_date=?,events_series=?,is_period_first_day=?,is_predicted=?,is_sync=?,modified_date_time=?,title=? where id=?
2025-02-19 10:44:36 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - update event_data set calendar_event_id=?,event_date=?,events_series=?,is_period_first_day=?,is_predicted=?,is_sync=?,modified_date_time=?,title=? where id=?
2025-02-19 10:44:36 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - update event_data set calendar_event_id=?,event_date=?,events_series=?,is_period_first_day=?,is_predicted=?,is_sync=?,modified_date_time=?,title=? where id=?
2025-02-19 10:44:36 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - update event_data set calendar_event_id=?,event_date=?,events_series=?,is_period_first_day=?,is_predicted=?,is_sync=?,modified_date_time=?,title=? where id=?
2025-02-19 10:44:36 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - update event_data set calendar_event_id=?,event_date=?,events_series=?,is_period_first_day=?,is_predicted=?,is_sync=?,modified_date_time=?,title=? where id=?
2025-02-19 10:44:36 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - update event_data set calendar_event_id=?,event_date=?,events_series=?,is_period_first_day=?,is_predicted=?,is_sync=?,modified_date_time=?,title=? where id=?
2025-02-19 10:44:36 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - update event_data set calendar_event_id=?,event_date=?,events_series=?,is_period_first_day=?,is_predicted=?,is_sync=?,modified_date_time=?,title=? where id=?
2025-02-19 10:44:36 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - update event_data set calendar_event_id=?,event_date=?,events_series=?,is_period_first_day=?,is_predicted=?,is_sync=?,modified_date_time=?,title=? where id=?
2025-02-19 10:44:36 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - update event_data set calendar_event_id=?,event_date=?,events_series=?,is_period_first_day=?,is_predicted=?,is_sync=?,modified_date_time=?,title=? where id=?
2025-02-19 10:51:01 [main] INFO  predictor.demo.DemoApplication - Starting DemoApplication using Java 17.0.13 with PID 9444 (C:\Fullstack_apps\period-and-ovulation-predictor\backend\demo\target\classes started by Danil in C:\Fullstack_apps\period-and-ovulation-predictor)
2025-02-19 10:51:01 [main] INFO  predictor.demo.DemoApplication - No active profile set, falling back to 1 default profile: "default"
2025-02-19 10:51:07 [main] INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-02-19 10:51:07 [main] INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.34]
2025-02-19 10:51:07 [main] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-02-19 10:51:07 [main] INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-02-19 10:51:08 [main] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.6.5.Final
2025-02-19 10:51:08 [main] INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-02-19 10:51:09 [main] WARN  com.zaxxer.hikari.HikariConfig - predictor-period-ovulation - idleTimeout has been set but has no effect because the pool is operating as a fixed size pool.
2025-02-19 10:51:09 [main] INFO  com.zaxxer.hikari.HikariDataSource - predictor-period-ovulation - Starting...
2025-02-19 10:51:10 [main] INFO  com.zaxxer.hikari.pool.HikariPool - predictor-period-ovulation - Added connection com.mysql.cj.jdbc.ConnectionImpl@2c08c787
2025-02-19 10:51:10 [main] INFO  com.zaxxer.hikari.HikariDataSource - predictor-period-ovulation - Start completed.
2025-02-19 10:51:10 [main] WARN  org.hibernate.orm.deprecation - HHH90000025: MySQL8Dialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-02-19 10:51:10 [main] WARN  org.hibernate.orm.deprecation - HHH90000026: MySQL8Dialect has been deprecated; use org.hibernate.dialect.MySQLDialect instead
2025-02-19 10:51:10 [main] INFO  o.hibernate.orm.connections.pooling - HHH10001005: Database info:
	Database JDBC URL [Connecting through datasource 'HikariDataSource (predictor-period-ovulation)']
	Database driver: undefined/unknown
	Database version: 8.0
	Autocommit mode: undefined/unknown
	Isolation level: undefined/unknown
	Minimum pool size: undefined/unknown
	Maximum pool size: undefined/unknown
2025-02-19 10:51:12 [main] INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-02-19 10:51:16 [main] WARN  o.s.b.a.o.j.JpaBaseConfiguration$JpaWebConfiguration - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2025-02-19 10:51:18 [main] INFO  predictor.demo.DemoApplication - Started DemoApplication in 18.26 seconds (process running for 19.444)
2025-02-19 11:10:33 [http-nio-8080-exec-1] INFO  o.a.tomcat.util.http.parser.Cookie - A cookie header was received [g_state={"i_l":0};] that contained an invalid cookie. That cookie will be ignored.
 Note: further occurrences of this error will be logged at DEBUG level.
2025-02-19 11:10:33 [http-nio-8080-exec-1] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-02-19 11:10:33 [http-nio-8080-exec-2] WARN  o.a.c.util.SessionIdGeneratorBase - Creation of SecureRandom instance for session ID generation using [SHA1PRNG] took [157] milliseconds.
2025-02-19 11:10:40 [http-nio-8080-exec-5] INFO  predictor.demo.AppConfiguration - Processing OAuth2 login for: naama.antoniouk@gmail.com
2025-02-19 11:10:41 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - select u1_0.id,u1_0.created_date_time,u1_0.email,u1_0.google_sub,u1_0.is_active,u1_0.modified_date_time,u1_0.name,u1_0.picture,u1_0.refresh_token from user u1_0 where u1_0.google_sub=?
2025-02-19 11:10:41 [http-nio-8080-exec-5] INFO  predictor.demo.AppConfiguration - Found existing user: naama.antoniouk@gmail.com
2025-02-19 11:10:41 [http-nio-8080-exec-3] INFO  p.d.A.calendar.CalendarController - Fetching period events for user
2025-02-19 11:10:41 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - select u1_0.id,u1_0.created_date_time,u1_0.email,u1_0.google_sub,u1_0.is_active,u1_0.modified_date_time,u1_0.name,u1_0.picture,u1_0.refresh_token from user u1_0 where u1_0.google_sub=?
2025-02-19 11:10:41 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - select ed1_0.id,ed1_0.calendar_event_id,ed1_0.created_date_time,ed1_0.event_date,ed1_0.events_series,ed1_0.is_period_first_day,ed1_0.is_predicted,ed1_0.is_sync,ed1_0.modified_date_time,ed1_0.title,ed1_0.user_id from event_data ed1_0 where ed1_0.user_id=? and ed1_0.is_predicted=0
2025-02-19 11:10:41 [http-nio-8080-exec-6] INFO  p.d.A.calendar.CalendarController - Fetching period events for user
2025-02-19 11:10:41 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - select u1_0.id,u1_0.created_date_time,u1_0.email,u1_0.google_sub,u1_0.is_active,u1_0.modified_date_time,u1_0.name,u1_0.picture,u1_0.refresh_token from user u1_0 where u1_0.google_sub=?
2025-02-19 11:10:41 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - select ed1_0.id,ed1_0.calendar_event_id,ed1_0.created_date_time,ed1_0.event_date,ed1_0.events_series,ed1_0.is_period_first_day,ed1_0.is_predicted,ed1_0.is_sync,ed1_0.modified_date_time,ed1_0.title,ed1_0.user_id from event_data ed1_0 where ed1_0.user_id=? and ed1_0.is_predicted=0
2025-02-19 11:10:44 [http-nio-8080-exec-7] INFO  p.d.A.calendar.CalendarController - Generating new predictions
2025-02-19 11:10:44 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - select u1_0.id,u1_0.created_date_time,u1_0.email,u1_0.google_sub,u1_0.is_active,u1_0.modified_date_time,u1_0.name,u1_0.picture,u1_0.refresh_token from user u1_0 where u1_0.google_sub=?
2025-02-19 11:10:44 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - SELECT * FROM event_data WHERE id = (SELECT MAX(id) FROM event_data WHERE user_id = ? AND is_period_first_day = true AND is_predicted = false)
2025-02-19 11:10:44 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - select es1_0.id from events_series es1_0 left join user u1_0 on u1_0.id=es1_0.user_id where u1_0.id=? limit ?
2025-02-19 11:10:44 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - select es1_0.id,es1_0.calculated_cycle_length,es1_0.prediction_date,es1_0.user_id from events_series es1_0 left join user u1_0 on u1_0.id=es1_0.user_id where u1_0.id=?
2025-02-19 11:10:44 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - select ed1_0.id,ed1_0.calendar_event_id,ed1_0.created_date_time,ed1_0.event_date,ed1_0.events_series,ed1_0.is_period_first_day,ed1_0.is_predicted,ed1_0.is_sync,ed1_0.modified_date_time,ed1_0.title,ed1_0.user_id from event_data ed1_0 where ed1_0.user_id=? and ed1_0.is_predicted=1
2025-02-19 11:10:45 [http-nio-8080-exec-7] INFO  p.d.A.calendar.GoogleCalendarService - Successfully deleted event from Google Calendar: 39pa5ic931nm9o9rcgiol6db30
2025-02-19 11:10:45 [http-nio-8080-exec-7] INFO  p.d.A.calendar.GoogleCalendarService - Successfully deleted event from Google Calendar: 195gkc4geruhm55kns2k2ihsck
2025-02-19 11:10:45 [http-nio-8080-exec-7] INFO  p.d.A.calendar.GoogleCalendarService - Successfully deleted event from Google Calendar: 1k15uhe3bga89248nn7u6uhfls
2025-02-19 11:10:46 [http-nio-8080-exec-7] INFO  p.d.A.calendar.GoogleCalendarService - Successfully deleted event from Google Calendar: 6pol1g599umtucsiruasl22io0
2025-02-19 11:10:46 [http-nio-8080-exec-7] INFO  p.d.A.calendar.GoogleCalendarService - Successfully deleted event from Google Calendar: u5c60jbd3p0t3sta7805vtmae0
2025-02-19 11:10:46 [http-nio-8080-exec-7] INFO  p.d.A.calendar.GoogleCalendarService - Successfully deleted event from Google Calendar: if05jgq96pfmlqgi0uitp9gohg
2025-02-19 11:10:47 [http-nio-8080-exec-7] INFO  p.d.A.calendar.GoogleCalendarService - Successfully deleted event from Google Calendar: niagjfv1jlhutoe1195hs7lko8
2025-02-19 11:10:47 [http-nio-8080-exec-7] INFO  p.d.A.calendar.GoogleCalendarService - Successfully deleted event from Google Calendar: ve95lc4qg21kmjck3qkoiaipm8
2025-02-19 11:10:47 [http-nio-8080-exec-7] INFO  p.d.A.calendar.GoogleCalendarService - Successfully deleted event from Google Calendar: rkvaqqp6jl0pmirmn9notptnb4
2025-02-19 11:10:47 [http-nio-8080-exec-7] INFO  p.d.A.calendar.GoogleCalendarService - Successfully deleted event from Google Calendar: 9an5bm5rotjlatq8hc2mdn651o
2025-02-19 11:10:48 [http-nio-8080-exec-7] INFO  p.d.A.calendar.GoogleCalendarService - Successfully deleted event from Google Calendar: lunksqj37f0erigj58n5763mdo
2025-02-19 11:10:48 [http-nio-8080-exec-7] INFO  p.d.A.calendar.GoogleCalendarService - Successfully deleted event from Google Calendar: shn7dsqd3uerap30id7h7d1g9g
2025-02-19 11:10:48 [http-nio-8080-exec-7] INFO  p.d.A.calendar.GoogleCalendarService - Successfully deleted event from Google Calendar: v3mbq1t5f9eiksjmdiv8nfppts
2025-02-19 11:10:48 [http-nio-8080-exec-7] INFO  p.d.A.calendar.GoogleCalendarService - Successfully deleted event from Google Calendar: dfbu4kpighrk3dds14r7h5q4so
2025-02-19 11:10:49 [http-nio-8080-exec-7] INFO  p.d.A.calendar.GoogleCalendarService - Successfully deleted event from Google Calendar: ao65tsro3glafqdg8lu5cc2db8
2025-02-19 11:10:49 [http-nio-8080-exec-7] INFO  p.d.A.calendar.GoogleCalendarService - Successfully deleted event from Google Calendar: 4d614jmrqle2mqmc0skeml0mio
2025-02-19 11:10:49 [http-nio-8080-exec-7] INFO  p.d.A.calendar.GoogleCalendarService - Successfully deleted event from Google Calendar: 2vsqb8bbbnbb22s60er3hgqe10
2025-02-19 11:10:49 [http-nio-8080-exec-7] INFO  p.d.A.calendar.GoogleCalendarService - Successfully deleted event from Google Calendar: cokdel09mc1pka11kt10g82u34
2025-02-19 11:10:49 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - delete ed1_0 from event_data ed1_0 where ed1_0.user_id=? and ed1_0.is_predicted=1
2025-02-19 11:10:49 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - SELECT * FROM event_data WHERE id = (SELECT MAX(id) FROM event_data WHERE user_id = ? AND is_period_first_day = true AND is_predicted = false)
2025-02-19 11:10:49 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - select count(ed1_0.id) from event_data ed1_0 where ed1_0.user_id=? and ed1_0.is_predicted=0
2025-02-19 11:10:49 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - insert into events_series (calculated_cycle_length,prediction_date,user_id) values (?,?,?)
2025-02-19 11:10:49 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - SELECT * FROM event_data WHERE id = (SELECT MAX(id) FROM event_data WHERE user_id = ? AND is_period_first_day = true AND is_predicted = false)
2025-02-19 11:10:50 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - select count(*) from event_data ed1_0 where ed1_0.id=?
2025-02-19 11:10:50 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - insert into event_data (calendar_event_id,created_date_time,event_date,events_series,is_period_first_day,is_predicted,is_sync,modified_date_time,title,user_id) values (?,?,?,?,?,?,?,?,?,?)
2025-02-19 11:10:50 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - select count(*) from event_data ed1_0 where ed1_0.id=?
2025-02-19 11:10:50 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - insert into event_data (calendar_event_id,created_date_time,event_date,events_series,is_period_first_day,is_predicted,is_sync,modified_date_time,title,user_id) values (?,?,?,?,?,?,?,?,?,?)
2025-02-19 11:10:50 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - select count(*) from event_data ed1_0 where ed1_0.id=?
2025-02-19 11:10:50 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - insert into event_data (calendar_event_id,created_date_time,event_date,events_series,is_period_first_day,is_predicted,is_sync,modified_date_time,title,user_id) values (?,?,?,?,?,?,?,?,?,?)
2025-02-19 11:10:50 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - select count(*) from event_data ed1_0 where ed1_0.id=?
2025-02-19 11:10:50 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - insert into event_data (calendar_event_id,created_date_time,event_date,events_series,is_period_first_day,is_predicted,is_sync,modified_date_time,title,user_id) values (?,?,?,?,?,?,?,?,?,?)
2025-02-19 11:10:50 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - select count(*) from event_data ed1_0 where ed1_0.id=?
2025-02-19 11:10:50 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - insert into event_data (calendar_event_id,created_date_time,event_date,events_series,is_period_first_day,is_predicted,is_sync,modified_date_time,title,user_id) values (?,?,?,?,?,?,?,?,?,?)
2025-02-19 11:10:50 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - select count(*) from event_data ed1_0 where ed1_0.id=?
2025-02-19 11:10:50 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - insert into event_data (calendar_event_id,created_date_time,event_date,events_series,is_period_first_day,is_predicted,is_sync,modified_date_time,title,user_id) values (?,?,?,?,?,?,?,?,?,?)
2025-02-19 11:10:50 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - select count(*) from event_data ed1_0 where ed1_0.id=?
2025-02-19 11:10:50 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - insert into event_data (calendar_event_id,created_date_time,event_date,events_series,is_period_first_day,is_predicted,is_sync,modified_date_time,title,user_id) values (?,?,?,?,?,?,?,?,?,?)
2025-02-19 11:10:50 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - select count(*) from event_data ed1_0 where ed1_0.id=?
2025-02-19 11:10:50 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - insert into event_data (calendar_event_id,created_date_time,event_date,events_series,is_period_first_day,is_predicted,is_sync,modified_date_time,title,user_id) values (?,?,?,?,?,?,?,?,?,?)
2025-02-19 11:10:50 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - select count(*) from event_data ed1_0 where ed1_0.id=?
2025-02-19 11:10:50 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - insert into event_data (calendar_event_id,created_date_time,event_date,events_series,is_period_first_day,is_predicted,is_sync,modified_date_time,title,user_id) values (?,?,?,?,?,?,?,?,?,?)
2025-02-19 11:10:50 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - select count(*) from event_data ed1_0 where ed1_0.id=?
2025-02-19 11:10:50 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - insert into event_data (calendar_event_id,created_date_time,event_date,events_series,is_period_first_day,is_predicted,is_sync,modified_date_time,title,user_id) values (?,?,?,?,?,?,?,?,?,?)
2025-02-19 11:10:50 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - select count(*) from event_data ed1_0 where ed1_0.id=?
2025-02-19 11:10:50 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - insert into event_data (calendar_event_id,created_date_time,event_date,events_series,is_period_first_day,is_predicted,is_sync,modified_date_time,title,user_id) values (?,?,?,?,?,?,?,?,?,?)
2025-02-19 11:10:50 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - select count(*) from event_data ed1_0 where ed1_0.id=?
2025-02-19 11:10:50 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - insert into event_data (calendar_event_id,created_date_time,event_date,events_series,is_period_first_day,is_predicted,is_sync,modified_date_time,title,user_id) values (?,?,?,?,?,?,?,?,?,?)
2025-02-19 11:10:50 [http-nio-8080-exec-7] INFO  p.d.A.calendar.GoogleCalendarService - Successfully synced event: ?Period-Prediction? to Google Calendar
2025-02-19 11:10:50 [http-nio-8080-exec-7] INFO  p.d.A.calendar.GoogleCalendarService - Successfully synced event: ?Period-Prediction? to Google Calendar
2025-02-19 11:10:51 [http-nio-8080-exec-7] INFO  p.d.A.calendar.GoogleCalendarService - Successfully synced event: ?Period-Prediction? to Google Calendar
2025-02-19 11:10:51 [http-nio-8080-exec-7] INFO  p.d.A.calendar.GoogleCalendarService - Successfully synced event: ?Period-Prediction? to Google Calendar
2025-02-19 11:10:51 [http-nio-8080-exec-7] INFO  p.d.A.calendar.GoogleCalendarService - Successfully synced event: ?Period-Prediction? to Google Calendar
2025-02-19 11:10:52 [http-nio-8080-exec-7] INFO  p.d.A.calendar.GoogleCalendarService - Successfully synced event: ?Period-Prediction? to Google Calendar
2025-02-19 11:10:52 [http-nio-8080-exec-7] INFO  p.d.A.calendar.GoogleCalendarService - Successfully synced event: ??Ovulation-Prediction?? to Google Calendar
2025-02-19 11:10:52 [http-nio-8080-exec-7] INFO  p.d.A.calendar.GoogleCalendarService - Successfully synced event: ??Ovulation-Prediction?? to Google Calendar
2025-02-19 11:10:53 [http-nio-8080-exec-7] INFO  p.d.A.calendar.GoogleCalendarService - Successfully synced event: ??Ovulation-Prediction?? to Google Calendar
2025-02-19 11:10:53 [http-nio-8080-exec-7] INFO  p.d.A.calendar.GoogleCalendarService - Successfully synced event: ??Ovulation-Prediction?? to Google Calendar
2025-02-19 11:10:53 [http-nio-8080-exec-7] INFO  p.d.A.calendar.GoogleCalendarService - Successfully synced event: ??Ovulation-Prediction?? to Google Calendar
2025-02-19 11:10:53 [http-nio-8080-exec-7] INFO  p.d.A.calendar.GoogleCalendarService - Successfully synced event: ??Ovulation-Prediction?? to Google Calendar
2025-02-19 11:10:54 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - update event_data set calendar_event_id=?,event_date=?,events_series=?,is_period_first_day=?,is_predicted=?,is_sync=?,modified_date_time=?,title=? where id=?
2025-02-19 11:10:54 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - update event_data set calendar_event_id=?,event_date=?,events_series=?,is_period_first_day=?,is_predicted=?,is_sync=?,modified_date_time=?,title=? where id=?
2025-02-19 11:10:54 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - update event_data set calendar_event_id=?,event_date=?,events_series=?,is_period_first_day=?,is_predicted=?,is_sync=?,modified_date_time=?,title=? where id=?
2025-02-19 11:10:54 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - update event_data set calendar_event_id=?,event_date=?,events_series=?,is_period_first_day=?,is_predicted=?,is_sync=?,modified_date_time=?,title=? where id=?
2025-02-19 11:10:54 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - update event_data set calendar_event_id=?,event_date=?,events_series=?,is_period_first_day=?,is_predicted=?,is_sync=?,modified_date_time=?,title=? where id=?
2025-02-19 11:10:54 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - update event_data set calendar_event_id=?,event_date=?,events_series=?,is_period_first_day=?,is_predicted=?,is_sync=?,modified_date_time=?,title=? where id=?
2025-02-19 11:10:54 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - update event_data set calendar_event_id=?,event_date=?,events_series=?,is_period_first_day=?,is_predicted=?,is_sync=?,modified_date_time=?,title=? where id=?
2025-02-19 11:10:54 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - update event_data set calendar_event_id=?,event_date=?,events_series=?,is_period_first_day=?,is_predicted=?,is_sync=?,modified_date_time=?,title=? where id=?
2025-02-19 11:10:54 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - update event_data set calendar_event_id=?,event_date=?,events_series=?,is_period_first_day=?,is_predicted=?,is_sync=?,modified_date_time=?,title=? where id=?
2025-02-19 11:10:54 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - update event_data set calendar_event_id=?,event_date=?,events_series=?,is_period_first_day=?,is_predicted=?,is_sync=?,modified_date_time=?,title=? where id=?
2025-02-19 11:10:54 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - update event_data set calendar_event_id=?,event_date=?,events_series=?,is_period_first_day=?,is_predicted=?,is_sync=?,modified_date_time=?,title=? where id=?
2025-02-19 11:10:54 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - update event_data set calendar_event_id=?,event_date=?,events_series=?,is_period_first_day=?,is_predicted=?,is_sync=?,modified_date_time=?,title=? where id=?
2025-02-19 11:24:17 [main] INFO  predictor.demo.DemoApplication - Starting DemoApplication using Java 17.0.13 with PID 4152 (C:\Fullstack_apps\period-and-ovulation-predictor\backend\demo\target\classes started by Danil in C:\Fullstack_apps\period-and-ovulation-predictor)
2025-02-19 11:24:17 [main] INFO  predictor.demo.DemoApplication - No active profile set, falling back to 1 default profile: "default"
2025-02-19 11:24:23 [main] INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-02-19 11:24:23 [main] INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.34]
2025-02-19 11:24:23 [main] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-02-19 11:24:23 [main] INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-02-19 11:24:23 [main] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.6.5.Final
2025-02-19 11:24:24 [main] INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-02-19 11:24:25 [main] WARN  com.zaxxer.hikari.HikariConfig - predictor-period-ovulation - idleTimeout has been set but has no effect because the pool is operating as a fixed size pool.
2025-02-19 11:24:25 [main] INFO  com.zaxxer.hikari.HikariDataSource - predictor-period-ovulation - Starting...
2025-02-19 11:24:26 [main] INFO  com.zaxxer.hikari.pool.HikariPool - predictor-period-ovulation - Added connection com.mysql.cj.jdbc.ConnectionImpl@2c08c787
2025-02-19 11:24:26 [main] INFO  com.zaxxer.hikari.HikariDataSource - predictor-period-ovulation - Start completed.
2025-02-19 11:24:26 [main] WARN  org.hibernate.orm.deprecation - HHH90000025: MySQL8Dialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-02-19 11:24:26 [main] WARN  org.hibernate.orm.deprecation - HHH90000026: MySQL8Dialect has been deprecated; use org.hibernate.dialect.MySQLDialect instead
2025-02-19 11:24:26 [main] INFO  o.hibernate.orm.connections.pooling - HHH10001005: Database info:
	Database JDBC URL [Connecting through datasource 'HikariDataSource (predictor-period-ovulation)']
	Database driver: undefined/unknown
	Database version: 8.0
	Autocommit mode: undefined/unknown
	Isolation level: undefined/unknown
	Minimum pool size: undefined/unknown
	Maximum pool size: undefined/unknown
2025-02-19 11:24:29 [main] INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-02-19 11:24:29 [main] DEBUG org.hibernate.SQL - alter table event_data drop foreign key FKky6rwvta5hrsrpfxxnqle7hc6
2025-02-19 11:24:29 [main] DEBUG org.hibernate.SQL - alter table event_data drop foreign key FKnugyl72uxj2nmxbbj2bjtw4nb
2025-02-19 11:24:29 [main] DEBUG org.hibernate.SQL - alter table events_series drop foreign key FKihucq4fq1hhfi32h05gt97kwn
2025-02-19 11:24:29 [main] DEBUG org.hibernate.SQL - drop table if exists event_data
2025-02-19 11:24:29 [main] DEBUG org.hibernate.SQL - drop table if exists events_series
2025-02-19 11:24:29 [main] DEBUG org.hibernate.SQL - drop table if exists user
2025-02-19 11:24:29 [main] DEBUG org.hibernate.SQL - create table event_data (event_date date, events_series integer, id integer not null auto_increment, is_period_first_day bit not null, is_predicted bit not null, is_sync bit not null, user_id integer not null, created_date_time datetime(6), modified_date_time datetime(6), calendar_event_id varchar(255), title varchar(255), primary key (id)) engine=InnoDB
2025-02-19 11:24:29 [main] DEBUG org.hibernate.SQL - create table events_series (calculated_cycle_length float(53) not null, id integer not null auto_increment, prediction_date date, user_id integer not null, primary key (id)) engine=InnoDB
2025-02-19 11:24:29 [main] DEBUG org.hibernate.SQL - create table user (id integer not null auto_increment, is_active bit not null, created_date_time datetime(6), modified_date_time datetime(6), email varchar(255) not null, google_sub varchar(255), name varchar(255), picture varchar(255), refresh_token varchar(255), primary key (id)) engine=InnoDB
2025-02-19 11:24:29 [main] DEBUG org.hibernate.SQL - alter table user add constraint UKob8kqyqqgmefl0aco34akdtpe unique (email)
2025-02-19 11:24:29 [main] DEBUG org.hibernate.SQL - alter table user add constraint UKr4q9y86xwh8ew8ja4b3rrguwr unique (google_sub)
2025-02-19 11:24:29 [main] DEBUG org.hibernate.SQL - alter table event_data add constraint FKky6rwvta5hrsrpfxxnqle7hc6 foreign key (events_series) references events_series (id)
2025-02-19 11:24:29 [main] DEBUG org.hibernate.SQL - alter table event_data add constraint FKnugyl72uxj2nmxbbj2bjtw4nb foreign key (user_id) references user (id)
2025-02-19 11:24:30 [main] DEBUG org.hibernate.SQL - alter table events_series add constraint FKihucq4fq1hhfi32h05gt97kwn foreign key (user_id) references user (id)
2025-02-19 11:24:34 [main] WARN  o.s.b.a.o.j.JpaBaseConfiguration$JpaWebConfiguration - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2025-02-19 11:24:36 [main] INFO  predictor.demo.DemoApplication - Started DemoApplication in 20.581 seconds (process running for 21.668)
2025-02-19 11:24:49 [http-nio-8080-exec-1] INFO  o.a.tomcat.util.http.parser.Cookie - A cookie header was received [g_state={"i_l":0};] that contained an invalid cookie. That cookie will be ignored.
 Note: further occurrences of this error will be logged at DEBUG level.
2025-02-19 11:24:49 [http-nio-8080-exec-1] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-02-19 11:24:49 [http-nio-8080-exec-2] WARN  o.a.c.util.SessionIdGeneratorBase - Creation of SecureRandom instance for session ID generation using [SHA1PRNG] took [167] milliseconds.
2025-02-19 11:24:55 [http-nio-8080-exec-4] INFO  predictor.demo.AppConfiguration - Processing OAuth2 login for: naama.antoniouk@gmail.com
2025-02-19 11:24:56 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - select u1_0.id,u1_0.created_date_time,u1_0.email,u1_0.google_sub,u1_0.is_active,u1_0.modified_date_time,u1_0.name,u1_0.picture,u1_0.refresh_token from user u1_0 where u1_0.google_sub=?
2025-02-19 11:24:56 [http-nio-8080-exec-4] INFO  predictor.demo.AppConfiguration - User not found, will create new user for: naama.antoniouk@gmail.com
2025-02-19 11:24:56 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - select u1_0.id from user u1_0 where u1_0.email=? limit ?
2025-02-19 11:24:56 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - select u1_0.id from user u1_0 where u1_0.google_sub=? limit ?
2025-02-19 11:24:56 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - insert into user (created_date_time,email,google_sub,is_active,modified_date_time,name,picture,refresh_token) values (?,?,?,?,?,?,?,?)
2025-02-19 11:24:56 [http-nio-8080-exec-4] INFO  predictor.demo.AppConfiguration - Created new user with Google ID: 114720670413454628998
2025-02-19 11:24:57 [http-nio-8080-exec-5] INFO  p.d.A.calendar.CalendarController - Fetching period events for user
2025-02-19 11:24:57 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - select u1_0.id,u1_0.created_date_time,u1_0.email,u1_0.google_sub,u1_0.is_active,u1_0.modified_date_time,u1_0.name,u1_0.picture,u1_0.refresh_token from user u1_0 where u1_0.google_sub=?
2025-02-19 11:24:57 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - select ed1_0.id,ed1_0.calendar_event_id,ed1_0.created_date_time,ed1_0.event_date,ed1_0.events_series,ed1_0.is_period_first_day,ed1_0.is_predicted,ed1_0.is_sync,ed1_0.modified_date_time,ed1_0.title,ed1_0.user_id from event_data ed1_0 where ed1_0.user_id=? and ed1_0.is_predicted=0
2025-02-19 11:24:57 [http-nio-8080-exec-6] INFO  p.d.A.calendar.CalendarController - Fetching period events for user
2025-02-19 11:24:57 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - select u1_0.id,u1_0.created_date_time,u1_0.email,u1_0.google_sub,u1_0.is_active,u1_0.modified_date_time,u1_0.name,u1_0.picture,u1_0.refresh_token from user u1_0 where u1_0.google_sub=?
2025-02-19 11:24:57 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - select ed1_0.id,ed1_0.calendar_event_id,ed1_0.created_date_time,ed1_0.event_date,ed1_0.events_series,ed1_0.is_period_first_day,ed1_0.is_predicted,ed1_0.is_sync,ed1_0.modified_date_time,ed1_0.title,ed1_0.user_id from event_data ed1_0 where ed1_0.user_id=? and ed1_0.is_predicted=0
2025-02-19 11:30:12 [http-nio-8080-exec-10] INFO  p.d.A.calendar.CalendarController - Adding new period event
2025-02-19 11:30:12 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - select u1_0.id,u1_0.created_date_time,u1_0.email,u1_0.google_sub,u1_0.is_active,u1_0.modified_date_time,u1_0.name,u1_0.picture,u1_0.refresh_token from user u1_0 where u1_0.google_sub=?
2025-02-19 11:30:12 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - select count(*) from event_data ed1_0 where ed1_0.id=?
2025-02-19 11:30:12 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - insert into event_data (calendar_event_id,created_date_time,event_date,events_series,is_period_first_day,is_predicted,is_sync,modified_date_time,title,user_id) values (?,?,?,?,?,?,?,?,?,?)
2025-02-19 11:30:13 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - update event_data set calendar_event_id=?,event_date=?,events_series=?,is_period_first_day=?,is_predicted=?,is_sync=?,modified_date_time=?,title=? where id=?
2025-02-19 11:30:23 [http-nio-8080-exec-2] INFO  p.d.A.calendar.CalendarController - Adding new period event
2025-02-19 11:30:23 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - select u1_0.id,u1_0.created_date_time,u1_0.email,u1_0.google_sub,u1_0.is_active,u1_0.modified_date_time,u1_0.name,u1_0.picture,u1_0.refresh_token from user u1_0 where u1_0.google_sub=?
2025-02-19 11:30:23 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - select count(*) from event_data ed1_0 where ed1_0.id=?
2025-02-19 11:30:23 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - insert into event_data (calendar_event_id,created_date_time,event_date,events_series,is_period_first_day,is_predicted,is_sync,modified_date_time,title,user_id) values (?,?,?,?,?,?,?,?,?,?)
2025-02-19 11:30:23 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - update event_data set calendar_event_id=?,event_date=?,events_series=?,is_period_first_day=?,is_predicted=?,is_sync=?,modified_date_time=?,title=? where id=?
2025-02-19 11:30:34 [http-nio-8080-exec-4] INFO  p.d.A.calendar.CalendarController - Adding new period event
2025-02-19 11:30:34 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - select u1_0.id,u1_0.created_date_time,u1_0.email,u1_0.google_sub,u1_0.is_active,u1_0.modified_date_time,u1_0.name,u1_0.picture,u1_0.refresh_token from user u1_0 where u1_0.google_sub=?
2025-02-19 11:30:34 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - select count(*) from event_data ed1_0 where ed1_0.id=?
2025-02-19 11:30:34 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - insert into event_data (calendar_event_id,created_date_time,event_date,events_series,is_period_first_day,is_predicted,is_sync,modified_date_time,title,user_id) values (?,?,?,?,?,?,?,?,?,?)
2025-02-19 11:30:34 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - update event_data set calendar_event_id=?,event_date=?,events_series=?,is_period_first_day=?,is_predicted=?,is_sync=?,modified_date_time=?,title=? where id=?
2025-02-19 11:30:44 [http-nio-8080-exec-6] INFO  p.d.A.calendar.CalendarController - Adding new period event
2025-02-19 11:30:44 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - select u1_0.id,u1_0.created_date_time,u1_0.email,u1_0.google_sub,u1_0.is_active,u1_0.modified_date_time,u1_0.name,u1_0.picture,u1_0.refresh_token from user u1_0 where u1_0.google_sub=?
2025-02-19 11:30:44 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - select count(*) from event_data ed1_0 where ed1_0.id=?
2025-02-19 11:30:44 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - insert into event_data (calendar_event_id,created_date_time,event_date,events_series,is_period_first_day,is_predicted,is_sync,modified_date_time,title,user_id) values (?,?,?,?,?,?,?,?,?,?)
2025-02-19 11:30:45 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - update event_data set calendar_event_id=?,event_date=?,events_series=?,is_period_first_day=?,is_predicted=?,is_sync=?,modified_date_time=?,title=? where id=?
2025-02-19 11:30:53 [http-nio-8080-exec-8] INFO  p.d.A.calendar.CalendarController - Adding new period event
2025-02-19 11:30:53 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - select u1_0.id,u1_0.created_date_time,u1_0.email,u1_0.google_sub,u1_0.is_active,u1_0.modified_date_time,u1_0.name,u1_0.picture,u1_0.refresh_token from user u1_0 where u1_0.google_sub=?
2025-02-19 11:30:53 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - select count(*) from event_data ed1_0 where ed1_0.id=?
2025-02-19 11:30:53 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - insert into event_data (calendar_event_id,created_date_time,event_date,events_series,is_period_first_day,is_predicted,is_sync,modified_date_time,title,user_id) values (?,?,?,?,?,?,?,?,?,?)
2025-02-19 11:30:54 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - update event_data set calendar_event_id=?,event_date=?,events_series=?,is_period_first_day=?,is_predicted=?,is_sync=?,modified_date_time=?,title=? where id=?
2025-02-19 11:30:55 [http-nio-8080-exec-9] INFO  p.d.A.calendar.CalendarController - Fetching period events for user
2025-02-19 11:30:55 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - select u1_0.id,u1_0.created_date_time,u1_0.email,u1_0.google_sub,u1_0.is_active,u1_0.modified_date_time,u1_0.name,u1_0.picture,u1_0.refresh_token from user u1_0 where u1_0.google_sub=?
2025-02-19 11:30:55 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - select ed1_0.id,ed1_0.calendar_event_id,ed1_0.created_date_time,ed1_0.event_date,ed1_0.events_series,ed1_0.is_period_first_day,ed1_0.is_predicted,ed1_0.is_sync,ed1_0.modified_date_time,ed1_0.title,ed1_0.user_id from event_data ed1_0 where ed1_0.user_id=? and ed1_0.is_predicted=0
2025-02-19 11:30:55 [http-nio-8080-exec-10] INFO  p.d.A.calendar.CalendarController - Fetching period events for user
2025-02-19 11:30:55 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - select u1_0.id,u1_0.created_date_time,u1_0.email,u1_0.google_sub,u1_0.is_active,u1_0.modified_date_time,u1_0.name,u1_0.picture,u1_0.refresh_token from user u1_0 where u1_0.google_sub=?
2025-02-19 11:30:55 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - select ed1_0.id,ed1_0.calendar_event_id,ed1_0.created_date_time,ed1_0.event_date,ed1_0.events_series,ed1_0.is_period_first_day,ed1_0.is_predicted,ed1_0.is_sync,ed1_0.modified_date_time,ed1_0.title,ed1_0.user_id from event_data ed1_0 where ed1_0.user_id=? and ed1_0.is_predicted=0
2025-02-19 11:30:59 [http-nio-8080-exec-2] INFO  p.d.A.calendar.CalendarController - Deleting event: 5
2025-02-19 11:30:59 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - select u1_0.id,u1_0.created_date_time,u1_0.email,u1_0.google_sub,u1_0.is_active,u1_0.modified_date_time,u1_0.name,u1_0.picture,u1_0.refresh_token from user u1_0 where u1_0.google_sub=?
2025-02-19 11:30:59 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - select ed1_0.id,ed1_0.calendar_event_id,ed1_0.created_date_time,ed1_0.event_date,es1_0.id,es1_0.calculated_cycle_length,es1_0.prediction_date,es1_0.user_id,u1_0.id,u1_0.created_date_time,u1_0.email,u1_0.google_sub,u1_0.is_active,u1_0.modified_date_time,u1_0.name,u1_0.picture,u1_0.refresh_token,ed1_0.is_period_first_day,ed1_0.is_predicted,ed1_0.is_sync,ed1_0.modified_date_time,ed1_0.title,ed1_0.user_id,u2_0.id,u2_0.created_date_time,u2_0.email,u2_0.google_sub,u2_0.is_active,u2_0.modified_date_time,u2_0.name,u2_0.picture,u2_0.refresh_token from event_data ed1_0 left join events_series es1_0 on es1_0.id=ed1_0.events_series left join user u1_0 on u1_0.id=es1_0.user_id join user u2_0 on u2_0.id=ed1_0.user_id where ed1_0.id=?
2025-02-19 11:30:59 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - delete from event_data where id=?
2025-02-19 11:30:59 [http-nio-8080-exec-3] INFO  p.d.A.calendar.CalendarController - Fetching period events for user
2025-02-19 11:30:59 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - select u1_0.id,u1_0.created_date_time,u1_0.email,u1_0.google_sub,u1_0.is_active,u1_0.modified_date_time,u1_0.name,u1_0.picture,u1_0.refresh_token from user u1_0 where u1_0.google_sub=?
2025-02-19 11:30:59 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - select ed1_0.id,ed1_0.calendar_event_id,ed1_0.created_date_time,ed1_0.event_date,ed1_0.events_series,ed1_0.is_period_first_day,ed1_0.is_predicted,ed1_0.is_sync,ed1_0.modified_date_time,ed1_0.title,ed1_0.user_id from event_data ed1_0 where ed1_0.user_id=? and ed1_0.is_predicted=0
2025-02-19 11:31:05 [http-nio-8080-exec-4] INFO  p.d.A.calendar.CalendarController - Generating new predictions
2025-02-19 11:31:05 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - select u1_0.id,u1_0.created_date_time,u1_0.email,u1_0.google_sub,u1_0.is_active,u1_0.modified_date_time,u1_0.name,u1_0.picture,u1_0.refresh_token from user u1_0 where u1_0.google_sub=?
2025-02-19 11:31:05 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - SELECT * FROM event_data WHERE id = (SELECT MAX(id) FROM event_data WHERE user_id = ? AND is_period_first_day = true AND is_predicted = false)
2025-02-19 11:31:05 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - select es1_0.id from events_series es1_0 left join user u1_0 on u1_0.id=es1_0.user_id where u1_0.id=? limit ?
2025-02-19 11:31:05 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - WITH period_events AS (     SELECT event_date,            LAG(event_date) OVER (ORDER BY event_date DESC) AS prev_event_date     FROM event_data     WHERE user_id = ?     AND is_period_first_day = true     AND is_predicted = false ) SELECT AVG(DATEDIFF(prev_event_date, event_date)) FROM period_events WHERE prev_event_date IS NOT NULL
2025-02-19 11:31:05 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - SELECT * FROM event_data WHERE id = (SELECT MAX(id) FROM event_data WHERE user_id = ? AND is_period_first_day = true AND is_predicted = false)
2025-02-19 11:31:05 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - select count(ed1_0.id) from event_data ed1_0 where ed1_0.user_id=? and ed1_0.is_predicted=0
2025-02-19 11:31:05 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - insert into events_series (calculated_cycle_length,prediction_date,user_id) values (?,?,?)
2025-02-19 11:31:05 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - SELECT * FROM event_data WHERE id = (SELECT MAX(id) FROM event_data WHERE user_id = ? AND is_period_first_day = true AND is_predicted = false)
2025-02-19 11:31:05 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - select count(*) from event_data ed1_0 where ed1_0.id=?
2025-02-19 11:31:05 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - insert into event_data (calendar_event_id,created_date_time,event_date,events_series,is_period_first_day,is_predicted,is_sync,modified_date_time,title,user_id) values (?,?,?,?,?,?,?,?,?,?)
2025-02-19 11:31:05 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - select count(*) from event_data ed1_0 where ed1_0.id=?
2025-02-19 11:31:05 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - insert into event_data (calendar_event_id,created_date_time,event_date,events_series,is_period_first_day,is_predicted,is_sync,modified_date_time,title,user_id) values (?,?,?,?,?,?,?,?,?,?)
2025-02-19 11:31:05 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - select count(*) from event_data ed1_0 where ed1_0.id=?
2025-02-19 11:31:05 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - insert into event_data (calendar_event_id,created_date_time,event_date,events_series,is_period_first_day,is_predicted,is_sync,modified_date_time,title,user_id) values (?,?,?,?,?,?,?,?,?,?)
2025-02-19 11:31:05 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - select count(*) from event_data ed1_0 where ed1_0.id=?
2025-02-19 11:31:05 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - insert into event_data (calendar_event_id,created_date_time,event_date,events_series,is_period_first_day,is_predicted,is_sync,modified_date_time,title,user_id) values (?,?,?,?,?,?,?,?,?,?)
2025-02-19 11:31:05 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - select count(*) from event_data ed1_0 where ed1_0.id=?
2025-02-19 11:31:05 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - insert into event_data (calendar_event_id,created_date_time,event_date,events_series,is_period_first_day,is_predicted,is_sync,modified_date_time,title,user_id) values (?,?,?,?,?,?,?,?,?,?)
2025-02-19 11:31:05 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - select count(*) from event_data ed1_0 where ed1_0.id=?
2025-02-19 11:31:05 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - insert into event_data (calendar_event_id,created_date_time,event_date,events_series,is_period_first_day,is_predicted,is_sync,modified_date_time,title,user_id) values (?,?,?,?,?,?,?,?,?,?)
2025-02-19 11:31:05 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - select count(*) from event_data ed1_0 where ed1_0.id=?
2025-02-19 11:31:05 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - insert into event_data (calendar_event_id,created_date_time,event_date,events_series,is_period_first_day,is_predicted,is_sync,modified_date_time,title,user_id) values (?,?,?,?,?,?,?,?,?,?)
2025-02-19 11:31:05 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - select count(*) from event_data ed1_0 where ed1_0.id=?
2025-02-19 11:31:05 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - insert into event_data (calendar_event_id,created_date_time,event_date,events_series,is_period_first_day,is_predicted,is_sync,modified_date_time,title,user_id) values (?,?,?,?,?,?,?,?,?,?)
2025-02-19 11:31:05 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - select count(*) from event_data ed1_0 where ed1_0.id=?
2025-02-19 11:31:05 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - insert into event_data (calendar_event_id,created_date_time,event_date,events_series,is_period_first_day,is_predicted,is_sync,modified_date_time,title,user_id) values (?,?,?,?,?,?,?,?,?,?)
2025-02-19 11:31:05 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - select count(*) from event_data ed1_0 where ed1_0.id=?
2025-02-19 11:31:05 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - insert into event_data (calendar_event_id,created_date_time,event_date,events_series,is_period_first_day,is_predicted,is_sync,modified_date_time,title,user_id) values (?,?,?,?,?,?,?,?,?,?)
2025-02-19 11:31:05 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - select count(*) from event_data ed1_0 where ed1_0.id=?
2025-02-19 11:31:05 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - insert into event_data (calendar_event_id,created_date_time,event_date,events_series,is_period_first_day,is_predicted,is_sync,modified_date_time,title,user_id) values (?,?,?,?,?,?,?,?,?,?)
2025-02-19 11:31:05 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - select count(*) from event_data ed1_0 where ed1_0.id=?
2025-02-19 11:31:05 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - insert into event_data (calendar_event_id,created_date_time,event_date,events_series,is_period_first_day,is_predicted,is_sync,modified_date_time,title,user_id) values (?,?,?,?,?,?,?,?,?,?)
2025-02-19 11:31:05 [http-nio-8080-exec-4] INFO  p.d.A.calendar.GoogleCalendarService - Successfully synced event: ?Period-Prediction? to Google Calendar
2025-02-19 11:31:06 [http-nio-8080-exec-4] INFO  p.d.A.calendar.GoogleCalendarService - Successfully synced event: ?Period-Prediction? to Google Calendar
2025-02-19 11:31:06 [http-nio-8080-exec-4] INFO  p.d.A.calendar.GoogleCalendarService - Successfully synced event: ?Period-Prediction? to Google Calendar
2025-02-19 11:31:06 [http-nio-8080-exec-4] INFO  p.d.A.calendar.GoogleCalendarService - Successfully synced event: ?Period-Prediction? to Google Calendar
2025-02-19 11:31:06 [http-nio-8080-exec-4] INFO  p.d.A.calendar.GoogleCalendarService - Successfully synced event: ?Period-Prediction? to Google Calendar
2025-02-19 11:31:07 [http-nio-8080-exec-4] INFO  p.d.A.calendar.GoogleCalendarService - Successfully synced event: ?Period-Prediction? to Google Calendar
2025-02-19 11:31:07 [http-nio-8080-exec-4] INFO  p.d.A.calendar.GoogleCalendarService - Successfully synced event: ??Ovulation-Prediction?? to Google Calendar
2025-02-19 11:31:08 [http-nio-8080-exec-4] INFO  p.d.A.calendar.GoogleCalendarService - Successfully synced event: ??Ovulation-Prediction?? to Google Calendar
2025-02-19 11:31:08 [http-nio-8080-exec-4] INFO  p.d.A.calendar.GoogleCalendarService - Successfully synced event: ??Ovulation-Prediction?? to Google Calendar
2025-02-19 11:31:08 [http-nio-8080-exec-4] INFO  p.d.A.calendar.GoogleCalendarService - Successfully synced event: ??Ovulation-Prediction?? to Google Calendar
2025-02-19 11:31:09 [http-nio-8080-exec-4] INFO  p.d.A.calendar.GoogleCalendarService - Successfully synced event: ??Ovulation-Prediction?? to Google Calendar
2025-02-19 11:31:09 [http-nio-8080-exec-4] INFO  p.d.A.calendar.GoogleCalendarService - Successfully synced event: ??Ovulation-Prediction?? to Google Calendar
2025-02-19 11:31:09 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - update event_data set calendar_event_id=?,event_date=?,events_series=?,is_period_first_day=?,is_predicted=?,is_sync=?,modified_date_time=?,title=? where id=?
2025-02-19 11:31:09 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - update event_data set calendar_event_id=?,event_date=?,events_series=?,is_period_first_day=?,is_predicted=?,is_sync=?,modified_date_time=?,title=? where id=?
2025-02-19 11:31:09 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - update event_data set calendar_event_id=?,event_date=?,events_series=?,is_period_first_day=?,is_predicted=?,is_sync=?,modified_date_time=?,title=? where id=?
2025-02-19 11:31:09 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - update event_data set calendar_event_id=?,event_date=?,events_series=?,is_period_first_day=?,is_predicted=?,is_sync=?,modified_date_time=?,title=? where id=?
2025-02-19 11:31:09 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - update event_data set calendar_event_id=?,event_date=?,events_series=?,is_period_first_day=?,is_predicted=?,is_sync=?,modified_date_time=?,title=? where id=?
2025-02-19 11:31:09 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - update event_data set calendar_event_id=?,event_date=?,events_series=?,is_period_first_day=?,is_predicted=?,is_sync=?,modified_date_time=?,title=? where id=?
2025-02-19 11:31:09 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - update event_data set calendar_event_id=?,event_date=?,events_series=?,is_period_first_day=?,is_predicted=?,is_sync=?,modified_date_time=?,title=? where id=?
2025-02-19 11:31:09 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - update event_data set calendar_event_id=?,event_date=?,events_series=?,is_period_first_day=?,is_predicted=?,is_sync=?,modified_date_time=?,title=? where id=?
2025-02-19 11:31:09 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - update event_data set calendar_event_id=?,event_date=?,events_series=?,is_period_first_day=?,is_predicted=?,is_sync=?,modified_date_time=?,title=? where id=?
2025-02-19 11:31:09 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - update event_data set calendar_event_id=?,event_date=?,events_series=?,is_period_first_day=?,is_predicted=?,is_sync=?,modified_date_time=?,title=? where id=?
2025-02-19 11:31:09 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - update event_data set calendar_event_id=?,event_date=?,events_series=?,is_period_first_day=?,is_predicted=?,is_sync=?,modified_date_time=?,title=? where id=?
2025-02-19 11:31:09 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - update event_data set calendar_event_id=?,event_date=?,events_series=?,is_period_first_day=?,is_predicted=?,is_sync=?,modified_date_time=?,title=? where id=?
2025-02-19 11:32:29 [http-nio-8080-exec-7] INFO  p.d.A.calendar.CalendarController - Fetching period events for user
2025-02-19 11:32:29 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - select u1_0.id,u1_0.created_date_time,u1_0.email,u1_0.google_sub,u1_0.is_active,u1_0.modified_date_time,u1_0.name,u1_0.picture,u1_0.refresh_token from user u1_0 where u1_0.google_sub=?
2025-02-19 11:32:29 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - select ed1_0.id,ed1_0.calendar_event_id,ed1_0.created_date_time,ed1_0.event_date,ed1_0.events_series,ed1_0.is_period_first_day,ed1_0.is_predicted,ed1_0.is_sync,ed1_0.modified_date_time,ed1_0.title,ed1_0.user_id from event_data ed1_0 where ed1_0.user_id=? and ed1_0.is_predicted=0
2025-02-19 11:32:29 [http-nio-8080-exec-8] INFO  p.d.A.calendar.CalendarController - Fetching period events for user
2025-02-19 11:32:29 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - select u1_0.id,u1_0.created_date_time,u1_0.email,u1_0.google_sub,u1_0.is_active,u1_0.modified_date_time,u1_0.name,u1_0.picture,u1_0.refresh_token from user u1_0 where u1_0.google_sub=?
2025-02-19 11:32:29 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - select ed1_0.id,ed1_0.calendar_event_id,ed1_0.created_date_time,ed1_0.event_date,ed1_0.events_series,ed1_0.is_period_first_day,ed1_0.is_predicted,ed1_0.is_sync,ed1_0.modified_date_time,ed1_0.title,ed1_0.user_id from event_data ed1_0 where ed1_0.user_id=? and ed1_0.is_predicted=0
2025-02-19 11:45:14 [main] INFO  predictor.demo.DemoApplication - Starting DemoApplication using Java 17.0.13 with PID 18568 (C:\Fullstack_apps\period-and-ovulation-predictor\backend\demo\target\classes started by Danil in C:\Fullstack_apps\period-and-ovulation-predictor)
2025-02-19 11:45:14 [main] INFO  predictor.demo.DemoApplication - No active profile set, falling back to 1 default profile: "default"
2025-02-19 11:45:20 [main] INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-02-19 11:45:20 [main] INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.34]
2025-02-19 11:45:20 [main] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-02-19 11:45:21 [main] INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-02-19 11:45:21 [main] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.6.5.Final
2025-02-19 11:45:21 [main] INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-02-19 11:45:22 [main] WARN  com.zaxxer.hikari.HikariConfig - predictor-period-ovulation - idleTimeout has been set but has no effect because the pool is operating as a fixed size pool.
2025-02-19 11:45:22 [main] INFO  com.zaxxer.hikari.HikariDataSource - predictor-period-ovulation - Starting...
2025-02-19 11:45:23 [main] INFO  com.zaxxer.hikari.pool.HikariPool - predictor-period-ovulation - Added connection com.mysql.cj.jdbc.ConnectionImpl@2c08c787
2025-02-19 11:45:23 [main] INFO  com.zaxxer.hikari.HikariDataSource - predictor-period-ovulation - Start completed.
2025-02-19 11:45:23 [main] WARN  org.hibernate.orm.deprecation - HHH90000025: MySQL8Dialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-02-19 11:45:23 [main] WARN  org.hibernate.orm.deprecation - HHH90000026: MySQL8Dialect has been deprecated; use org.hibernate.dialect.MySQLDialect instead
2025-02-19 11:45:23 [main] INFO  o.hibernate.orm.connections.pooling - HHH10001005: Database info:
	Database JDBC URL [Connecting through datasource 'HikariDataSource (predictor-period-ovulation)']
	Database driver: undefined/unknown
	Database version: 8.0
	Autocommit mode: undefined/unknown
	Isolation level: undefined/unknown
	Minimum pool size: undefined/unknown
	Maximum pool size: undefined/unknown
2025-02-19 11:45:25 [main] INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-02-19 11:45:25 [main] DEBUG org.hibernate.SQL - alter table event_data drop foreign key FKky6rwvta5hrsrpfxxnqle7hc6
2025-02-19 11:45:26 [main] DEBUG org.hibernate.SQL - alter table event_data drop foreign key FKnugyl72uxj2nmxbbj2bjtw4nb
2025-02-19 11:45:26 [main] DEBUG org.hibernate.SQL - alter table events_series drop foreign key FKihucq4fq1hhfi32h05gt97kwn
2025-02-19 11:45:26 [main] DEBUG org.hibernate.SQL - drop table if exists event_data
2025-02-19 11:45:26 [main] DEBUG org.hibernate.SQL - drop table if exists events_series
2025-02-19 11:45:26 [main] DEBUG org.hibernate.SQL - drop table if exists user
2025-02-19 11:45:26 [main] DEBUG org.hibernate.SQL - create table event_data (event_date date, events_series integer, id integer not null auto_increment, is_period_first_day bit not null, is_predicted bit not null, is_sync bit not null, user_id integer not null, created_date_time datetime(6), modified_date_time datetime(6), calendar_event_id varchar(255), title varchar(255), primary key (id)) engine=InnoDB
2025-02-19 11:45:26 [main] DEBUG org.hibernate.SQL - create table events_series (calculated_cycle_length float(53) not null, id integer not null auto_increment, prediction_date date, user_id integer not null, primary key (id)) engine=InnoDB
2025-02-19 11:45:26 [main] DEBUG org.hibernate.SQL - create table user (id integer not null auto_increment, is_active bit not null, created_date_time datetime(6), modified_date_time datetime(6), email varchar(255) not null, google_sub varchar(255), name varchar(255), picture varchar(255), refresh_token varchar(255), primary key (id)) engine=InnoDB
2025-02-19 11:45:26 [main] DEBUG org.hibernate.SQL - alter table user add constraint UKob8kqyqqgmefl0aco34akdtpe unique (email)
2025-02-19 11:45:26 [main] DEBUG org.hibernate.SQL - alter table user add constraint UKr4q9y86xwh8ew8ja4b3rrguwr unique (google_sub)
2025-02-19 11:45:26 [main] DEBUG org.hibernate.SQL - alter table event_data add constraint FKky6rwvta5hrsrpfxxnqle7hc6 foreign key (events_series) references events_series (id)
2025-02-19 11:45:26 [main] DEBUG org.hibernate.SQL - alter table event_data add constraint FKnugyl72uxj2nmxbbj2bjtw4nb foreign key (user_id) references user (id)
2025-02-19 11:45:26 [main] DEBUG org.hibernate.SQL - alter table events_series add constraint FKihucq4fq1hhfi32h05gt97kwn foreign key (user_id) references user (id)
2025-02-19 11:45:29 [main] WARN  o.s.b.a.o.j.JpaBaseConfiguration$JpaWebConfiguration - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2025-02-19 11:45:31 [main] INFO  predictor.demo.DemoApplication - Started DemoApplication in 18.494 seconds (process running for 19.523)
2025-02-19 11:45:36 [http-nio-8080-exec-1] INFO  o.a.tomcat.util.http.parser.Cookie - A cookie header was received [g_state={"i_l":0};] that contained an invalid cookie. That cookie will be ignored.
 Note: further occurrences of this error will be logged at DEBUG level.
2025-02-19 11:45:36 [http-nio-8080-exec-1] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-02-19 11:45:37 [http-nio-8080-exec-2] WARN  o.a.c.util.SessionIdGeneratorBase - Creation of SecureRandom instance for session ID generation using [SHA1PRNG] took [153] milliseconds.
2025-02-19 11:45:43 [http-nio-8080-exec-4] INFO  predictor.demo.AppConfiguration - Processing OAuth2 login for: naama.antoniouk@gmail.com
2025-02-19 11:45:43 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - select u1_0.id,u1_0.created_date_time,u1_0.email,u1_0.google_sub,u1_0.is_active,u1_0.modified_date_time,u1_0.name,u1_0.picture,u1_0.refresh_token from user u1_0 where u1_0.google_sub=?
2025-02-19 11:45:43 [http-nio-8080-exec-4] INFO  predictor.demo.AppConfiguration - User not found, will create new user for: naama.antoniouk@gmail.com
2025-02-19 11:45:43 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - select u1_0.id from user u1_0 where u1_0.email=? limit ?
2025-02-19 11:45:43 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - select u1_0.id from user u1_0 where u1_0.google_sub=? limit ?
2025-02-19 11:45:43 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - insert into user (created_date_time,email,google_sub,is_active,modified_date_time,name,picture,refresh_token) values (?,?,?,?,?,?,?,?)
2025-02-19 11:45:44 [http-nio-8080-exec-4] INFO  predictor.demo.AppConfiguration - Created new user with Google ID: 114720670413454628998
2025-02-19 11:45:44 [http-nio-8080-exec-5] INFO  p.d.A.calendar.CalendarController - Fetching period events for user
2025-02-19 11:45:44 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - select u1_0.id,u1_0.created_date_time,u1_0.email,u1_0.google_sub,u1_0.is_active,u1_0.modified_date_time,u1_0.name,u1_0.picture,u1_0.refresh_token from user u1_0 where u1_0.google_sub=?
2025-02-19 11:45:44 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - select ed1_0.id,ed1_0.calendar_event_id,ed1_0.created_date_time,ed1_0.event_date,ed1_0.events_series,ed1_0.is_period_first_day,ed1_0.is_predicted,ed1_0.is_sync,ed1_0.modified_date_time,ed1_0.title,ed1_0.user_id from event_data ed1_0 where ed1_0.user_id=? and ed1_0.is_predicted=0
2025-02-19 11:45:44 [http-nio-8080-exec-6] INFO  p.d.A.calendar.CalendarController - Fetching period events for user
2025-02-19 11:45:44 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - select u1_0.id,u1_0.created_date_time,u1_0.email,u1_0.google_sub,u1_0.is_active,u1_0.modified_date_time,u1_0.name,u1_0.picture,u1_0.refresh_token from user u1_0 where u1_0.google_sub=?
2025-02-19 11:45:44 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - select ed1_0.id,ed1_0.calendar_event_id,ed1_0.created_date_time,ed1_0.event_date,ed1_0.events_series,ed1_0.is_period_first_day,ed1_0.is_predicted,ed1_0.is_sync,ed1_0.modified_date_time,ed1_0.title,ed1_0.user_id from event_data ed1_0 where ed1_0.user_id=? and ed1_0.is_predicted=0
2025-02-19 11:45:47 [http-nio-8080-exec-7] INFO  p.d.A.calendar.CalendarController - Fetching period events for user
2025-02-19 11:45:47 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - select u1_0.id,u1_0.created_date_time,u1_0.email,u1_0.google_sub,u1_0.is_active,u1_0.modified_date_time,u1_0.name,u1_0.picture,u1_0.refresh_token from user u1_0 where u1_0.google_sub=?
2025-02-19 11:45:47 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - select ed1_0.id,ed1_0.calendar_event_id,ed1_0.created_date_time,ed1_0.event_date,ed1_0.events_series,ed1_0.is_period_first_day,ed1_0.is_predicted,ed1_0.is_sync,ed1_0.modified_date_time,ed1_0.title,ed1_0.user_id from event_data ed1_0 where ed1_0.user_id=? and ed1_0.is_predicted=0
2025-02-19 11:45:47 [http-nio-8080-exec-8] INFO  p.d.A.calendar.CalendarController - Fetching period events for user
2025-02-19 11:45:47 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - select u1_0.id,u1_0.created_date_time,u1_0.email,u1_0.google_sub,u1_0.is_active,u1_0.modified_date_time,u1_0.name,u1_0.picture,u1_0.refresh_token from user u1_0 where u1_0.google_sub=?
2025-02-19 11:45:47 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - select ed1_0.id,ed1_0.calendar_event_id,ed1_0.created_date_time,ed1_0.event_date,ed1_0.events_series,ed1_0.is_period_first_day,ed1_0.is_predicted,ed1_0.is_sync,ed1_0.modified_date_time,ed1_0.title,ed1_0.user_id from event_data ed1_0 where ed1_0.user_id=? and ed1_0.is_predicted=0
2025-02-19 11:46:30 [main] INFO  predictor.demo.DemoApplication - Starting DemoApplication using Java 17.0.13 with PID 18888 (C:\Fullstack_apps\period-and-ovulation-predictor\backend\demo\target\classes started by Danil in C:\Fullstack_apps\period-and-ovulation-predictor)
2025-02-19 11:46:30 [main] INFO  predictor.demo.DemoApplication - No active profile set, falling back to 1 default profile: "default"
2025-02-19 11:46:36 [main] INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-02-19 11:46:36 [main] INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.34]
2025-02-19 11:46:36 [main] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-02-19 11:46:36 [main] INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-02-19 11:46:37 [main] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.6.5.Final
2025-02-19 11:46:37 [main] INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-02-19 11:46:38 [main] WARN  com.zaxxer.hikari.HikariConfig - predictor-period-ovulation - idleTimeout has been set but has no effect because the pool is operating as a fixed size pool.
2025-02-19 11:46:38 [main] INFO  com.zaxxer.hikari.HikariDataSource - predictor-period-ovulation - Starting...
2025-02-19 11:46:39 [main] INFO  com.zaxxer.hikari.pool.HikariPool - predictor-period-ovulation - Added connection com.mysql.cj.jdbc.ConnectionImpl@1b8d20e6
2025-02-19 11:46:39 [main] INFO  com.zaxxer.hikari.HikariDataSource - predictor-period-ovulation - Start completed.
2025-02-19 11:46:39 [main] WARN  org.hibernate.orm.deprecation - HHH90000025: MySQL8Dialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-02-19 11:46:39 [main] WARN  org.hibernate.orm.deprecation - HHH90000026: MySQL8Dialect has been deprecated; use org.hibernate.dialect.MySQLDialect instead
2025-02-19 11:46:39 [main] INFO  o.hibernate.orm.connections.pooling - HHH10001005: Database info:
	Database JDBC URL [Connecting through datasource 'HikariDataSource (predictor-period-ovulation)']
	Database driver: undefined/unknown
	Database version: 8.0
	Autocommit mode: undefined/unknown
	Isolation level: undefined/unknown
	Minimum pool size: undefined/unknown
	Maximum pool size: undefined/unknown
2025-02-19 11:46:42 [main] INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-02-19 11:46:46 [main] WARN  o.s.b.a.o.j.JpaBaseConfiguration$JpaWebConfiguration - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2025-02-19 11:46:48 [main] INFO  predictor.demo.DemoApplication - Started DemoApplication in 19.583 seconds (process running for 20.701)
2025-02-19 11:46:52 [http-nio-8080-exec-1] INFO  o.a.tomcat.util.http.parser.Cookie - A cookie header was received [g_state={"i_l":0};] that contained an invalid cookie. That cookie will be ignored.
 Note: further occurrences of this error will be logged at DEBUG level.
2025-02-19 11:46:52 [http-nio-8080-exec-1] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-02-19 11:46:53 [http-nio-8080-exec-2] WARN  o.a.c.util.SessionIdGeneratorBase - Creation of SecureRandom instance for session ID generation using [SHA1PRNG] took [165] milliseconds.
2025-02-19 11:46:57 [http-nio-8080-exec-4] INFO  predictor.demo.AppConfiguration - Processing OAuth2 login for: naama.antoniouk@gmail.com
2025-02-19 11:46:58 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - select u1_0.id,u1_0.created_date_time,u1_0.email,u1_0.google_sub,u1_0.is_active,u1_0.modified_date_time,u1_0.name,u1_0.picture,u1_0.refresh_token from user u1_0 where u1_0.google_sub=?
2025-02-19 11:46:58 [http-nio-8080-exec-4] INFO  predictor.demo.AppConfiguration - Found existing user: naama.antoniouk@gmail.com
2025-02-19 11:46:58 [http-nio-8080-exec-5] INFO  p.d.A.calendar.CalendarController - Fetching period events for user
2025-02-19 11:46:58 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - select u1_0.id,u1_0.created_date_time,u1_0.email,u1_0.google_sub,u1_0.is_active,u1_0.modified_date_time,u1_0.name,u1_0.picture,u1_0.refresh_token from user u1_0 where u1_0.google_sub=?
2025-02-19 11:46:58 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - select ed1_0.id,ed1_0.calendar_event_id,ed1_0.created_date_time,ed1_0.event_date,ed1_0.events_series,ed1_0.is_period_first_day,ed1_0.is_predicted,ed1_0.is_sync,ed1_0.modified_date_time,ed1_0.title,ed1_0.user_id from event_data ed1_0 where ed1_0.user_id=? and ed1_0.is_predicted=0
2025-02-19 11:46:58 [http-nio-8080-exec-6] INFO  p.d.A.calendar.CalendarController - Fetching period events for user
2025-02-19 11:46:58 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - select u1_0.id,u1_0.created_date_time,u1_0.email,u1_0.google_sub,u1_0.is_active,u1_0.modified_date_time,u1_0.name,u1_0.picture,u1_0.refresh_token from user u1_0 where u1_0.google_sub=?
2025-02-19 11:46:58 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - select ed1_0.id,ed1_0.calendar_event_id,ed1_0.created_date_time,ed1_0.event_date,ed1_0.events_series,ed1_0.is_period_first_day,ed1_0.is_predicted,ed1_0.is_sync,ed1_0.modified_date_time,ed1_0.title,ed1_0.user_id from event_data ed1_0 where ed1_0.user_id=? and ed1_0.is_predicted=0
2025-02-19 11:47:15 [http-nio-8080-exec-8] INFO  p.d.A.calendar.CalendarController - Adding new period event
2025-02-19 11:47:15 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - select u1_0.id,u1_0.created_date_time,u1_0.email,u1_0.google_sub,u1_0.is_active,u1_0.modified_date_time,u1_0.name,u1_0.picture,u1_0.refresh_token from user u1_0 where u1_0.google_sub=?
2025-02-19 11:47:15 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - select count(*) from event_data ed1_0 where ed1_0.id=?
2025-02-19 11:47:15 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - insert into event_data (calendar_event_id,created_date_time,event_date,events_series,is_period_first_day,is_predicted,is_sync,modified_date_time,title,user_id) values (?,?,?,?,?,?,?,?,?,?)
2025-02-19 11:47:16 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - update event_data set calendar_event_id=?,event_date=?,events_series=?,is_period_first_day=?,is_predicted=?,is_sync=?,modified_date_time=?,title=? where id=?
2025-02-19 11:47:24 [http-nio-8080-exec-10] INFO  p.d.A.calendar.CalendarController - Adding new period event
2025-02-19 11:47:24 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - select u1_0.id,u1_0.created_date_time,u1_0.email,u1_0.google_sub,u1_0.is_active,u1_0.modified_date_time,u1_0.name,u1_0.picture,u1_0.refresh_token from user u1_0 where u1_0.google_sub=?
2025-02-19 11:47:24 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - select count(*) from event_data ed1_0 where ed1_0.id=?
2025-02-19 11:47:24 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - insert into event_data (calendar_event_id,created_date_time,event_date,events_series,is_period_first_day,is_predicted,is_sync,modified_date_time,title,user_id) values (?,?,?,?,?,?,?,?,?,?)
2025-02-19 11:47:24 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - update event_data set calendar_event_id=?,event_date=?,events_series=?,is_period_first_day=?,is_predicted=?,is_sync=?,modified_date_time=?,title=? where id=?
2025-02-19 11:47:34 [http-nio-8080-exec-2] INFO  p.d.A.calendar.CalendarController - Adding new period event
2025-02-19 11:47:34 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - select u1_0.id,u1_0.created_date_time,u1_0.email,u1_0.google_sub,u1_0.is_active,u1_0.modified_date_time,u1_0.name,u1_0.picture,u1_0.refresh_token from user u1_0 where u1_0.google_sub=?
2025-02-19 11:47:34 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - select count(*) from event_data ed1_0 where ed1_0.id=?
2025-02-19 11:47:34 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - insert into event_data (calendar_event_id,created_date_time,event_date,events_series,is_period_first_day,is_predicted,is_sync,modified_date_time,title,user_id) values (?,?,?,?,?,?,?,?,?,?)
2025-02-19 11:47:34 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - update event_data set calendar_event_id=?,event_date=?,events_series=?,is_period_first_day=?,is_predicted=?,is_sync=?,modified_date_time=?,title=? where id=?
2025-02-19 11:47:42 [http-nio-8080-exec-4] INFO  p.d.A.calendar.CalendarController - Adding new period event
2025-02-19 11:47:42 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - select u1_0.id,u1_0.created_date_time,u1_0.email,u1_0.google_sub,u1_0.is_active,u1_0.modified_date_time,u1_0.name,u1_0.picture,u1_0.refresh_token from user u1_0 where u1_0.google_sub=?
2025-02-19 11:47:42 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - select count(*) from event_data ed1_0 where ed1_0.id=?
2025-02-19 11:47:42 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - insert into event_data (calendar_event_id,created_date_time,event_date,events_series,is_period_first_day,is_predicted,is_sync,modified_date_time,title,user_id) values (?,?,?,?,?,?,?,?,?,?)
2025-02-19 11:47:43 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - update event_data set calendar_event_id=?,event_date=?,events_series=?,is_period_first_day=?,is_predicted=?,is_sync=?,modified_date_time=?,title=? where id=?
2025-02-19 11:47:45 [http-nio-8080-exec-5] INFO  p.d.A.calendar.CalendarController - Fetching period events for user
2025-02-19 11:47:45 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - select u1_0.id,u1_0.created_date_time,u1_0.email,u1_0.google_sub,u1_0.is_active,u1_0.modified_date_time,u1_0.name,u1_0.picture,u1_0.refresh_token from user u1_0 where u1_0.google_sub=?
2025-02-19 11:47:45 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - select ed1_0.id,ed1_0.calendar_event_id,ed1_0.created_date_time,ed1_0.event_date,ed1_0.events_series,ed1_0.is_period_first_day,ed1_0.is_predicted,ed1_0.is_sync,ed1_0.modified_date_time,ed1_0.title,ed1_0.user_id from event_data ed1_0 where ed1_0.user_id=? and ed1_0.is_predicted=0
2025-02-19 11:47:45 [http-nio-8080-exec-6] INFO  p.d.A.calendar.CalendarController - Fetching period events for user
2025-02-19 11:47:45 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - select u1_0.id,u1_0.created_date_time,u1_0.email,u1_0.google_sub,u1_0.is_active,u1_0.modified_date_time,u1_0.name,u1_0.picture,u1_0.refresh_token from user u1_0 where u1_0.google_sub=?
2025-02-19 11:47:45 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - select ed1_0.id,ed1_0.calendar_event_id,ed1_0.created_date_time,ed1_0.event_date,ed1_0.events_series,ed1_0.is_period_first_day,ed1_0.is_predicted,ed1_0.is_sync,ed1_0.modified_date_time,ed1_0.title,ed1_0.user_id from event_data ed1_0 where ed1_0.user_id=? and ed1_0.is_predicted=0
2025-02-19 11:47:48 [http-nio-8080-exec-7] INFO  p.d.A.calendar.CalendarController - Generating new predictions
2025-02-19 11:47:48 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - select u1_0.id,u1_0.created_date_time,u1_0.email,u1_0.google_sub,u1_0.is_active,u1_0.modified_date_time,u1_0.name,u1_0.picture,u1_0.refresh_token from user u1_0 where u1_0.google_sub=?
2025-02-19 11:47:48 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - SELECT * FROM event_data WHERE id = (SELECT MAX(id) FROM event_data WHERE user_id = ? AND is_period_first_day = true AND is_predicted = false)
2025-02-19 11:47:48 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - select es1_0.id from events_series es1_0 left join user u1_0 on u1_0.id=es1_0.user_id where u1_0.id=? limit ?
2025-02-19 11:47:48 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - WITH period_events AS (     SELECT event_date,            LAG(event_date) OVER (ORDER BY event_date DESC) AS prev_event_date     FROM event_data     WHERE user_id = ?     AND is_period_first_day = true     AND is_predicted = false ) SELECT AVG(DATEDIFF(prev_event_date, event_date)) FROM period_events WHERE prev_event_date IS NOT NULL
2025-02-19 11:47:48 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - SELECT * FROM event_data WHERE id = (SELECT MAX(id) FROM event_data WHERE user_id = ? AND is_period_first_day = true AND is_predicted = false)
2025-02-19 11:47:48 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - select count(ed1_0.id) from event_data ed1_0 where ed1_0.user_id=? and ed1_0.is_predicted=0
2025-02-19 11:47:48 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - insert into events_series (calculated_cycle_length,prediction_date,user_id) values (?,?,?)
2025-02-19 11:47:48 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - SELECT * FROM event_data WHERE id = (SELECT MAX(id) FROM event_data WHERE user_id = ? AND is_period_first_day = true AND is_predicted = false)
2025-02-19 11:47:48 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - select count(*) from event_data ed1_0 where ed1_0.id=?
2025-02-19 11:47:48 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - insert into event_data (calendar_event_id,created_date_time,event_date,events_series,is_period_first_day,is_predicted,is_sync,modified_date_time,title,user_id) values (?,?,?,?,?,?,?,?,?,?)
2025-02-19 11:47:48 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - select count(*) from event_data ed1_0 where ed1_0.id=?
2025-02-19 11:47:48 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - insert into event_data (calendar_event_id,created_date_time,event_date,events_series,is_period_first_day,is_predicted,is_sync,modified_date_time,title,user_id) values (?,?,?,?,?,?,?,?,?,?)
2025-02-19 11:47:48 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - select count(*) from event_data ed1_0 where ed1_0.id=?
2025-02-19 11:47:48 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - insert into event_data (calendar_event_id,created_date_time,event_date,events_series,is_period_first_day,is_predicted,is_sync,modified_date_time,title,user_id) values (?,?,?,?,?,?,?,?,?,?)
2025-02-19 11:47:48 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - select count(*) from event_data ed1_0 where ed1_0.id=?
2025-02-19 11:47:48 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - insert into event_data (calendar_event_id,created_date_time,event_date,events_series,is_period_first_day,is_predicted,is_sync,modified_date_time,title,user_id) values (?,?,?,?,?,?,?,?,?,?)
2025-02-19 11:47:48 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - select count(*) from event_data ed1_0 where ed1_0.id=?
2025-02-19 11:47:48 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - insert into event_data (calendar_event_id,created_date_time,event_date,events_series,is_period_first_day,is_predicted,is_sync,modified_date_time,title,user_id) values (?,?,?,?,?,?,?,?,?,?)
2025-02-19 11:47:48 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - select count(*) from event_data ed1_0 where ed1_0.id=?
2025-02-19 11:47:48 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - insert into event_data (calendar_event_id,created_date_time,event_date,events_series,is_period_first_day,is_predicted,is_sync,modified_date_time,title,user_id) values (?,?,?,?,?,?,?,?,?,?)
2025-02-19 11:47:48 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - select count(*) from event_data ed1_0 where ed1_0.id=?
2025-02-19 11:47:48 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - insert into event_data (calendar_event_id,created_date_time,event_date,events_series,is_period_first_day,is_predicted,is_sync,modified_date_time,title,user_id) values (?,?,?,?,?,?,?,?,?,?)
2025-02-19 11:47:48 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - select count(*) from event_data ed1_0 where ed1_0.id=?
2025-02-19 11:47:48 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - insert into event_data (calendar_event_id,created_date_time,event_date,events_series,is_period_first_day,is_predicted,is_sync,modified_date_time,title,user_id) values (?,?,?,?,?,?,?,?,?,?)
2025-02-19 11:47:48 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - select count(*) from event_data ed1_0 where ed1_0.id=?
2025-02-19 11:47:48 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - insert into event_data (calendar_event_id,created_date_time,event_date,events_series,is_period_first_day,is_predicted,is_sync,modified_date_time,title,user_id) values (?,?,?,?,?,?,?,?,?,?)
2025-02-19 11:47:48 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - select count(*) from event_data ed1_0 where ed1_0.id=?
2025-02-19 11:47:48 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - insert into event_data (calendar_event_id,created_date_time,event_date,events_series,is_period_first_day,is_predicted,is_sync,modified_date_time,title,user_id) values (?,?,?,?,?,?,?,?,?,?)
2025-02-19 11:47:48 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - select count(*) from event_data ed1_0 where ed1_0.id=?
2025-02-19 11:47:48 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - insert into event_data (calendar_event_id,created_date_time,event_date,events_series,is_period_first_day,is_predicted,is_sync,modified_date_time,title,user_id) values (?,?,?,?,?,?,?,?,?,?)
2025-02-19 11:47:48 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - select count(*) from event_data ed1_0 where ed1_0.id=?
2025-02-19 11:47:48 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - insert into event_data (calendar_event_id,created_date_time,event_date,events_series,is_period_first_day,is_predicted,is_sync,modified_date_time,title,user_id) values (?,?,?,?,?,?,?,?,?,?)
2025-02-19 11:47:49 [http-nio-8080-exec-7] INFO  p.d.A.calendar.GoogleCalendarService - Successfully synced event: ?Period-Prediction? to Google Calendar
2025-02-19 11:47:49 [http-nio-8080-exec-7] INFO  p.d.A.calendar.GoogleCalendarService - Successfully synced event: ?Period-Prediction? to Google Calendar
2025-02-19 11:47:50 [http-nio-8080-exec-7] INFO  p.d.A.calendar.GoogleCalendarService - Successfully synced event: ?Period-Prediction? to Google Calendar
2025-02-19 11:47:50 [http-nio-8080-exec-7] INFO  p.d.A.calendar.GoogleCalendarService - Successfully synced event: ?Period-Prediction? to Google Calendar
2025-02-19 11:47:50 [http-nio-8080-exec-7] INFO  p.d.A.calendar.GoogleCalendarService - Successfully synced event: ?Period-Prediction? to Google Calendar
2025-02-19 11:47:51 [http-nio-8080-exec-7] INFO  p.d.A.calendar.GoogleCalendarService - Successfully synced event: ?Period-Prediction? to Google Calendar
2025-02-19 11:47:51 [http-nio-8080-exec-7] INFO  p.d.A.calendar.GoogleCalendarService - Successfully synced event: ??Ovulation-Prediction?? to Google Calendar
2025-02-19 11:47:51 [http-nio-8080-exec-7] INFO  p.d.A.calendar.GoogleCalendarService - Successfully synced event: ??Ovulation-Prediction?? to Google Calendar
2025-02-19 11:47:52 [http-nio-8080-exec-7] INFO  p.d.A.calendar.GoogleCalendarService - Successfully synced event: ??Ovulation-Prediction?? to Google Calendar
2025-02-19 11:47:52 [http-nio-8080-exec-7] INFO  p.d.A.calendar.GoogleCalendarService - Successfully synced event: ??Ovulation-Prediction?? to Google Calendar
2025-02-19 11:47:52 [http-nio-8080-exec-7] INFO  p.d.A.calendar.GoogleCalendarService - Successfully synced event: ??Ovulation-Prediction?? to Google Calendar
2025-02-19 11:47:53 [http-nio-8080-exec-7] INFO  p.d.A.calendar.GoogleCalendarService - Successfully synced event: ??Ovulation-Prediction?? to Google Calendar
2025-02-19 11:47:53 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - update event_data set calendar_event_id=?,event_date=?,events_series=?,is_period_first_day=?,is_predicted=?,is_sync=?,modified_date_time=?,title=? where id=?
2025-02-19 11:47:53 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - update event_data set calendar_event_id=?,event_date=?,events_series=?,is_period_first_day=?,is_predicted=?,is_sync=?,modified_date_time=?,title=? where id=?
2025-02-19 11:47:53 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - update event_data set calendar_event_id=?,event_date=?,events_series=?,is_period_first_day=?,is_predicted=?,is_sync=?,modified_date_time=?,title=? where id=?
2025-02-19 11:47:53 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - update event_data set calendar_event_id=?,event_date=?,events_series=?,is_period_first_day=?,is_predicted=?,is_sync=?,modified_date_time=?,title=? where id=?
2025-02-19 11:47:53 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - update event_data set calendar_event_id=?,event_date=?,events_series=?,is_period_first_day=?,is_predicted=?,is_sync=?,modified_date_time=?,title=? where id=?
2025-02-19 11:47:53 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - update event_data set calendar_event_id=?,event_date=?,events_series=?,is_period_first_day=?,is_predicted=?,is_sync=?,modified_date_time=?,title=? where id=?
2025-02-19 11:47:53 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - update event_data set calendar_event_id=?,event_date=?,events_series=?,is_period_first_day=?,is_predicted=?,is_sync=?,modified_date_time=?,title=? where id=?
2025-02-19 11:47:53 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - update event_data set calendar_event_id=?,event_date=?,events_series=?,is_period_first_day=?,is_predicted=?,is_sync=?,modified_date_time=?,title=? where id=?
2025-02-19 11:47:53 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - update event_data set calendar_event_id=?,event_date=?,events_series=?,is_period_first_day=?,is_predicted=?,is_sync=?,modified_date_time=?,title=? where id=?
2025-02-19 11:47:53 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - update event_data set calendar_event_id=?,event_date=?,events_series=?,is_period_first_day=?,is_predicted=?,is_sync=?,modified_date_time=?,title=? where id=?
2025-02-19 11:47:53 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - update event_data set calendar_event_id=?,event_date=?,events_series=?,is_period_first_day=?,is_predicted=?,is_sync=?,modified_date_time=?,title=? where id=?
2025-02-19 11:47:53 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - update event_data set calendar_event_id=?,event_date=?,events_series=?,is_period_first_day=?,is_predicted=?,is_sync=?,modified_date_time=?,title=? where id=?
2025-02-19 11:55:33 [main] INFO  predictor.demo.DemoApplication - Starting DemoApplication using Java 17.0.13 with PID 18284 (C:\Fullstack_apps\period-and-ovulation-predictor\backend\demo\target\classes started by Danil in C:\Fullstack_apps\period-and-ovulation-predictor)
2025-02-19 11:55:33 [main] INFO  predictor.demo.DemoApplication - No active profile set, falling back to 1 default profile: "default"
2025-02-19 11:55:39 [main] INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-02-19 11:55:39 [main] INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.34]
2025-02-19 11:55:39 [main] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-02-19 11:55:39 [main] INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-02-19 11:55:40 [main] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.6.5.Final
2025-02-19 11:55:40 [main] INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-02-19 11:55:41 [main] WARN  com.zaxxer.hikari.HikariConfig - predictor-period-ovulation - idleTimeout has been set but has no effect because the pool is operating as a fixed size pool.
2025-02-19 11:55:41 [main] INFO  com.zaxxer.hikari.HikariDataSource - predictor-period-ovulation - Starting...
2025-02-19 11:55:41 [main] INFO  com.zaxxer.hikari.pool.HikariPool - predictor-period-ovulation - Added connection com.mysql.cj.jdbc.ConnectionImpl@67f591c2
2025-02-19 11:55:41 [main] INFO  com.zaxxer.hikari.HikariDataSource - predictor-period-ovulation - Start completed.
2025-02-19 11:55:42 [main] WARN  org.hibernate.orm.deprecation - HHH90000025: MySQL8Dialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-02-19 11:55:42 [main] WARN  org.hibernate.orm.deprecation - HHH90000026: MySQL8Dialect has been deprecated; use org.hibernate.dialect.MySQLDialect instead
2025-02-19 11:55:42 [main] INFO  o.hibernate.orm.connections.pooling - HHH10001005: Database info:
	Database JDBC URL [Connecting through datasource 'HikariDataSource (predictor-period-ovulation)']
	Database driver: undefined/unknown
	Database version: 8.0
	Autocommit mode: undefined/unknown
	Isolation level: undefined/unknown
	Minimum pool size: undefined/unknown
	Maximum pool size: undefined/unknown
2025-02-19 11:55:44 [main] INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-02-19 11:55:44 [main] DEBUG org.hibernate.SQL - alter table event_data drop foreign key FKky6rwvta5hrsrpfxxnqle7hc6
2025-02-19 11:55:44 [main] DEBUG org.hibernate.SQL - alter table event_data drop foreign key FKnugyl72uxj2nmxbbj2bjtw4nb
2025-02-19 11:55:44 [main] DEBUG org.hibernate.SQL - alter table events_series drop foreign key FKihucq4fq1hhfi32h05gt97kwn
2025-02-19 11:55:44 [main] DEBUG org.hibernate.SQL - drop table if exists event_data
2025-02-19 11:55:45 [main] DEBUG org.hibernate.SQL - drop table if exists events_series
2025-02-19 11:55:45 [main] DEBUG org.hibernate.SQL - drop table if exists user
2025-02-19 11:55:45 [main] DEBUG org.hibernate.SQL - create table event_data (event_date date, events_series integer, id integer not null auto_increment, is_period_first_day bit not null, is_predicted bit not null, is_sync bit not null, user_id integer not null, created_date_time datetime(6), modified_date_time datetime(6), calendar_event_id varchar(255), title varchar(255), primary key (id)) engine=InnoDB
2025-02-19 11:55:45 [main] DEBUG org.hibernate.SQL - create table events_series (calculated_cycle_length float(53) not null, id integer not null auto_increment, prediction_date date, user_id integer not null, primary key (id)) engine=InnoDB
2025-02-19 11:55:45 [main] DEBUG org.hibernate.SQL - create table user (id integer not null auto_increment, is_active bit not null, created_date_time datetime(6), modified_date_time datetime(6), email varchar(255) not null, google_sub varchar(255), name varchar(255), picture varchar(255), refresh_token varchar(255), primary key (id)) engine=InnoDB
2025-02-19 11:55:45 [main] DEBUG org.hibernate.SQL - alter table user add constraint UKob8kqyqqgmefl0aco34akdtpe unique (email)
2025-02-19 11:55:45 [main] DEBUG org.hibernate.SQL - alter table user add constraint UKr4q9y86xwh8ew8ja4b3rrguwr unique (google_sub)
2025-02-19 11:55:45 [main] DEBUG org.hibernate.SQL - alter table event_data add constraint FKky6rwvta5hrsrpfxxnqle7hc6 foreign key (events_series) references events_series (id)
2025-02-19 11:55:45 [main] DEBUG org.hibernate.SQL - alter table event_data add constraint FKnugyl72uxj2nmxbbj2bjtw4nb foreign key (user_id) references user (id)
2025-02-19 11:55:45 [main] DEBUG org.hibernate.SQL - alter table events_series add constraint FKihucq4fq1hhfi32h05gt97kwn foreign key (user_id) references user (id)
2025-02-19 11:55:48 [main] WARN  o.s.b.a.o.j.JpaBaseConfiguration$JpaWebConfiguration - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2025-02-19 11:55:50 [main] INFO  predictor.demo.DemoApplication - Started DemoApplication in 18.325 seconds (process running for 19.472)
2025-02-19 12:02:27 [http-nio-8080-exec-2] INFO  o.a.tomcat.util.http.parser.Cookie - A cookie header was received [g_state={"i_l":0};] that contained an invalid cookie. That cookie will be ignored.
 Note: further occurrences of this error will be logged at DEBUG level.
2025-02-19 12:02:27 [http-nio-8080-exec-2] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-02-19 12:02:28 [http-nio-8080-exec-1] WARN  o.a.c.util.SessionIdGeneratorBase - Creation of SecureRandom instance for session ID generation using [SHA1PRNG] took [169] milliseconds.
2025-02-19 12:02:33 [http-nio-8080-exec-4] INFO  predictor.demo.AppConfiguration - Processing OAuth2 login for: naama.antoniouk@gmail.com
2025-02-19 12:02:33 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - select u1_0.id,u1_0.created_date_time,u1_0.email,u1_0.google_sub,u1_0.is_active,u1_0.modified_date_time,u1_0.name,u1_0.picture,u1_0.refresh_token from user u1_0 where u1_0.google_sub=?
2025-02-19 12:02:33 [http-nio-8080-exec-4] INFO  predictor.demo.AppConfiguration - User not found, will create new user for: naama.antoniouk@gmail.com
2025-02-19 12:02:33 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - select u1_0.id from user u1_0 where u1_0.email=? limit ?
2025-02-19 12:02:33 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - select u1_0.id from user u1_0 where u1_0.google_sub=? limit ?
2025-02-19 12:02:34 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - insert into user (created_date_time,email,google_sub,is_active,modified_date_time,name,picture,refresh_token) values (?,?,?,?,?,?,?,?)
2025-02-19 12:02:34 [http-nio-8080-exec-4] INFO  predictor.demo.AppConfiguration - Created new user with Google ID: 114720670413454628998
2025-02-19 12:02:34 [http-nio-8080-exec-5] INFO  p.d.A.calendar.CalendarController - Fetching period events for user
2025-02-19 12:02:34 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - select u1_0.id,u1_0.created_date_time,u1_0.email,u1_0.google_sub,u1_0.is_active,u1_0.modified_date_time,u1_0.name,u1_0.picture,u1_0.refresh_token from user u1_0 where u1_0.google_sub=?
2025-02-19 12:02:34 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - select ed1_0.id,ed1_0.calendar_event_id,ed1_0.created_date_time,ed1_0.event_date,ed1_0.events_series,ed1_0.is_period_first_day,ed1_0.is_predicted,ed1_0.is_sync,ed1_0.modified_date_time,ed1_0.title,ed1_0.user_id from event_data ed1_0 where ed1_0.user_id=? and ed1_0.is_predicted=0
2025-02-19 12:02:34 [http-nio-8080-exec-6] INFO  p.d.A.calendar.CalendarController - Fetching period events for user
2025-02-19 12:02:34 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - select u1_0.id,u1_0.created_date_time,u1_0.email,u1_0.google_sub,u1_0.is_active,u1_0.modified_date_time,u1_0.name,u1_0.picture,u1_0.refresh_token from user u1_0 where u1_0.google_sub=?
2025-02-19 12:02:34 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - select ed1_0.id,ed1_0.calendar_event_id,ed1_0.created_date_time,ed1_0.event_date,ed1_0.events_series,ed1_0.is_period_first_day,ed1_0.is_predicted,ed1_0.is_sync,ed1_0.modified_date_time,ed1_0.title,ed1_0.user_id from event_data ed1_0 where ed1_0.user_id=? and ed1_0.is_predicted=0
2025-02-19 12:02:44 [http-nio-8080-exec-8] INFO  p.d.A.calendar.CalendarController - Adding new period event
2025-02-19 12:02:44 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - select u1_0.id,u1_0.created_date_time,u1_0.email,u1_0.google_sub,u1_0.is_active,u1_0.modified_date_time,u1_0.name,u1_0.picture,u1_0.refresh_token from user u1_0 where u1_0.google_sub=?
2025-02-19 12:02:44 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - select count(*) from event_data ed1_0 where ed1_0.id=?
2025-02-19 12:02:44 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - insert into event_data (calendar_event_id,created_date_time,event_date,events_series,is_period_first_day,is_predicted,is_sync,modified_date_time,title,user_id) values (?,?,?,?,?,?,?,?,?,?)
2025-02-19 12:02:45 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - update event_data set calendar_event_id=?,event_date=?,events_series=?,is_period_first_day=?,is_predicted=?,is_sync=?,modified_date_time=?,title=? where id=?
2025-02-19 12:02:50 [http-nio-8080-exec-10] INFO  p.d.A.calendar.CalendarController - Adding new period event
2025-02-19 12:02:50 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - select u1_0.id,u1_0.created_date_time,u1_0.email,u1_0.google_sub,u1_0.is_active,u1_0.modified_date_time,u1_0.name,u1_0.picture,u1_0.refresh_token from user u1_0 where u1_0.google_sub=?
2025-02-19 12:02:50 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - select count(*) from event_data ed1_0 where ed1_0.id=?
2025-02-19 12:02:50 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - insert into event_data (calendar_event_id,created_date_time,event_date,events_series,is_period_first_day,is_predicted,is_sync,modified_date_time,title,user_id) values (?,?,?,?,?,?,?,?,?,?)
2025-02-19 12:02:50 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - update event_data set calendar_event_id=?,event_date=?,events_series=?,is_period_first_day=?,is_predicted=?,is_sync=?,modified_date_time=?,title=? where id=?
2025-02-19 12:03:08 [http-nio-8080-exec-1] INFO  p.d.A.calendar.CalendarController - Adding new period event
2025-02-19 12:03:08 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - select u1_0.id,u1_0.created_date_time,u1_0.email,u1_0.google_sub,u1_0.is_active,u1_0.modified_date_time,u1_0.name,u1_0.picture,u1_0.refresh_token from user u1_0 where u1_0.google_sub=?
2025-02-19 12:03:08 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - select count(*) from event_data ed1_0 where ed1_0.id=?
2025-02-19 12:03:08 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - insert into event_data (calendar_event_id,created_date_time,event_date,events_series,is_period_first_day,is_predicted,is_sync,modified_date_time,title,user_id) values (?,?,?,?,?,?,?,?,?,?)
2025-02-19 12:03:09 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - update event_data set calendar_event_id=?,event_date=?,events_series=?,is_period_first_day=?,is_predicted=?,is_sync=?,modified_date_time=?,title=? where id=?
2025-02-19 12:03:19 [http-nio-8080-exec-4] INFO  p.d.A.calendar.CalendarController - Adding new period event
2025-02-19 12:03:19 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - select u1_0.id,u1_0.created_date_time,u1_0.email,u1_0.google_sub,u1_0.is_active,u1_0.modified_date_time,u1_0.name,u1_0.picture,u1_0.refresh_token from user u1_0 where u1_0.google_sub=?
2025-02-19 12:03:19 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - select count(*) from event_data ed1_0 where ed1_0.id=?
2025-02-19 12:03:19 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - insert into event_data (calendar_event_id,created_date_time,event_date,events_series,is_period_first_day,is_predicted,is_sync,modified_date_time,title,user_id) values (?,?,?,?,?,?,?,?,?,?)
2025-02-19 12:03:19 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - update event_data set calendar_event_id=?,event_date=?,events_series=?,is_period_first_day=?,is_predicted=?,is_sync=?,modified_date_time=?,title=? where id=?
2025-02-19 12:03:20 [http-nio-8080-exec-5] INFO  p.d.A.calendar.CalendarController - Fetching period events for user
2025-02-19 12:03:20 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - select u1_0.id,u1_0.created_date_time,u1_0.email,u1_0.google_sub,u1_0.is_active,u1_0.modified_date_time,u1_0.name,u1_0.picture,u1_0.refresh_token from user u1_0 where u1_0.google_sub=?
2025-02-19 12:03:20 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - select ed1_0.id,ed1_0.calendar_event_id,ed1_0.created_date_time,ed1_0.event_date,ed1_0.events_series,ed1_0.is_period_first_day,ed1_0.is_predicted,ed1_0.is_sync,ed1_0.modified_date_time,ed1_0.title,ed1_0.user_id from event_data ed1_0 where ed1_0.user_id=? and ed1_0.is_predicted=0
2025-02-19 12:03:20 [http-nio-8080-exec-6] INFO  p.d.A.calendar.CalendarController - Fetching period events for user
2025-02-19 12:03:20 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - select u1_0.id,u1_0.created_date_time,u1_0.email,u1_0.google_sub,u1_0.is_active,u1_0.modified_date_time,u1_0.name,u1_0.picture,u1_0.refresh_token from user u1_0 where u1_0.google_sub=?
2025-02-19 12:03:20 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - select ed1_0.id,ed1_0.calendar_event_id,ed1_0.created_date_time,ed1_0.event_date,ed1_0.events_series,ed1_0.is_period_first_day,ed1_0.is_predicted,ed1_0.is_sync,ed1_0.modified_date_time,ed1_0.title,ed1_0.user_id from event_data ed1_0 where ed1_0.user_id=? and ed1_0.is_predicted=0
2025-02-19 12:03:34 [http-nio-8080-exec-8] INFO  p.d.A.calendar.CalendarController - Generating new predictions
2025-02-19 12:03:34 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - select u1_0.id,u1_0.created_date_time,u1_0.email,u1_0.google_sub,u1_0.is_active,u1_0.modified_date_time,u1_0.name,u1_0.picture,u1_0.refresh_token from user u1_0 where u1_0.google_sub=?
2025-02-19 12:03:34 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - SELECT * FROM event_data WHERE id = (SELECT MAX(id) FROM event_data WHERE user_id = ? AND is_period_first_day = true AND is_predicted = false)
2025-02-19 12:03:34 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - select es1_0.id from events_series es1_0 left join user u1_0 on u1_0.id=es1_0.user_id where u1_0.id=? limit ?
2025-02-19 12:03:34 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - WITH period_events AS (     SELECT event_date,            LAG(event_date) OVER (ORDER BY event_date DESC) AS prev_event_date     FROM event_data     WHERE user_id = ?     AND is_period_first_day = true     AND is_predicted = false ) SELECT AVG(DATEDIFF(prev_event_date, event_date)) FROM period_events WHERE prev_event_date IS NOT NULL
2025-02-19 12:03:34 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - SELECT * FROM event_data WHERE id = (SELECT MAX(id) FROM event_data WHERE user_id = ? AND is_period_first_day = true AND is_predicted = false)
2025-02-19 12:03:34 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - select count(ed1_0.id) from event_data ed1_0 where ed1_0.user_id=? and ed1_0.is_predicted=0
2025-02-19 12:03:34 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - insert into events_series (calculated_cycle_length,prediction_date,user_id) values (?,?,?)
2025-02-19 12:03:34 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - SELECT * FROM event_data WHERE id = (SELECT MAX(id) FROM event_data WHERE user_id = ? AND is_period_first_day = true AND is_predicted = false)
2025-02-19 12:03:34 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - select count(*) from event_data ed1_0 where ed1_0.id=?
2025-02-19 12:03:34 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - insert into event_data (calendar_event_id,created_date_time,event_date,events_series,is_period_first_day,is_predicted,is_sync,modified_date_time,title,user_id) values (?,?,?,?,?,?,?,?,?,?)
2025-02-19 12:03:34 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - select count(*) from event_data ed1_0 where ed1_0.id=?
2025-02-19 12:03:34 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - insert into event_data (calendar_event_id,created_date_time,event_date,events_series,is_period_first_day,is_predicted,is_sync,modified_date_time,title,user_id) values (?,?,?,?,?,?,?,?,?,?)
2025-02-19 12:03:34 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - select count(*) from event_data ed1_0 where ed1_0.id=?
2025-02-19 12:03:34 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - insert into event_data (calendar_event_id,created_date_time,event_date,events_series,is_period_first_day,is_predicted,is_sync,modified_date_time,title,user_id) values (?,?,?,?,?,?,?,?,?,?)
2025-02-19 12:03:34 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - select count(*) from event_data ed1_0 where ed1_0.id=?
2025-02-19 12:03:34 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - insert into event_data (calendar_event_id,created_date_time,event_date,events_series,is_period_first_day,is_predicted,is_sync,modified_date_time,title,user_id) values (?,?,?,?,?,?,?,?,?,?)
2025-02-19 12:03:34 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - select count(*) from event_data ed1_0 where ed1_0.id=?
2025-02-19 12:03:34 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - insert into event_data (calendar_event_id,created_date_time,event_date,events_series,is_period_first_day,is_predicted,is_sync,modified_date_time,title,user_id) values (?,?,?,?,?,?,?,?,?,?)
2025-02-19 12:03:34 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - select count(*) from event_data ed1_0 where ed1_0.id=?
2025-02-19 12:03:34 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - insert into event_data (calendar_event_id,created_date_time,event_date,events_series,is_period_first_day,is_predicted,is_sync,modified_date_time,title,user_id) values (?,?,?,?,?,?,?,?,?,?)
2025-02-19 12:03:34 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - select count(*) from event_data ed1_0 where ed1_0.id=?
2025-02-19 12:03:34 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - insert into event_data (calendar_event_id,created_date_time,event_date,events_series,is_period_first_day,is_predicted,is_sync,modified_date_time,title,user_id) values (?,?,?,?,?,?,?,?,?,?)
2025-02-19 12:03:34 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - select count(*) from event_data ed1_0 where ed1_0.id=?
2025-02-19 12:03:34 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - insert into event_data (calendar_event_id,created_date_time,event_date,events_series,is_period_first_day,is_predicted,is_sync,modified_date_time,title,user_id) values (?,?,?,?,?,?,?,?,?,?)
2025-02-19 12:03:34 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - select count(*) from event_data ed1_0 where ed1_0.id=?
2025-02-19 12:03:34 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - insert into event_data (calendar_event_id,created_date_time,event_date,events_series,is_period_first_day,is_predicted,is_sync,modified_date_time,title,user_id) values (?,?,?,?,?,?,?,?,?,?)
2025-02-19 12:03:34 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - select count(*) from event_data ed1_0 where ed1_0.id=?
2025-02-19 12:03:34 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - insert into event_data (calendar_event_id,created_date_time,event_date,events_series,is_period_first_day,is_predicted,is_sync,modified_date_time,title,user_id) values (?,?,?,?,?,?,?,?,?,?)
2025-02-19 12:03:34 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - select count(*) from event_data ed1_0 where ed1_0.id=?
2025-02-19 12:03:34 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - insert into event_data (calendar_event_id,created_date_time,event_date,events_series,is_period_first_day,is_predicted,is_sync,modified_date_time,title,user_id) values (?,?,?,?,?,?,?,?,?,?)
2025-02-19 12:03:34 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - select count(*) from event_data ed1_0 where ed1_0.id=?
2025-02-19 12:03:34 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - insert into event_data (calendar_event_id,created_date_time,event_date,events_series,is_period_first_day,is_predicted,is_sync,modified_date_time,title,user_id) values (?,?,?,?,?,?,?,?,?,?)
2025-02-19 12:03:35 [http-nio-8080-exec-8] INFO  p.d.A.calendar.GoogleCalendarService - Successfully synced event: ?Period-Prediction? to Google Calendar
2025-02-19 12:03:35 [http-nio-8080-exec-8] INFO  p.d.A.calendar.GoogleCalendarService - Successfully synced event: ?Period-Prediction? to Google Calendar
2025-02-19 12:03:36 [http-nio-8080-exec-8] INFO  p.d.A.calendar.GoogleCalendarService - Successfully synced event: ?Period-Prediction? to Google Calendar
2025-02-19 12:03:36 [http-nio-8080-exec-8] INFO  p.d.A.calendar.GoogleCalendarService - Successfully synced event: ?Period-Prediction? to Google Calendar
2025-02-19 12:03:36 [http-nio-8080-exec-8] INFO  p.d.A.calendar.GoogleCalendarService - Successfully synced event: ?Period-Prediction? to Google Calendar
2025-02-19 12:03:36 [http-nio-8080-exec-8] INFO  p.d.A.calendar.GoogleCalendarService - Successfully synced event: ?Period-Prediction? to Google Calendar
2025-02-19 12:03:37 [http-nio-8080-exec-8] INFO  p.d.A.calendar.GoogleCalendarService - Successfully synced event: ??Ovulation-Prediction?? to Google Calendar
2025-02-19 12:03:37 [http-nio-8080-exec-8] INFO  p.d.A.calendar.GoogleCalendarService - Successfully synced event: ??Ovulation-Prediction?? to Google Calendar
2025-02-19 12:03:37 [http-nio-8080-exec-8] INFO  p.d.A.calendar.GoogleCalendarService - Successfully synced event: ??Ovulation-Prediction?? to Google Calendar
2025-02-19 12:03:38 [http-nio-8080-exec-8] INFO  p.d.A.calendar.GoogleCalendarService - Successfully synced event: ??Ovulation-Prediction?? to Google Calendar
2025-02-19 12:03:38 [http-nio-8080-exec-8] INFO  p.d.A.calendar.GoogleCalendarService - Successfully synced event: ??Ovulation-Prediction?? to Google Calendar
2025-02-19 12:03:38 [http-nio-8080-exec-8] INFO  p.d.A.calendar.GoogleCalendarService - Successfully synced event: ??Ovulation-Prediction?? to Google Calendar
2025-02-19 12:03:38 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - update event_data set calendar_event_id=?,event_date=?,events_series=?,is_period_first_day=?,is_predicted=?,is_sync=?,modified_date_time=?,title=? where id=?
2025-02-19 12:03:38 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - update event_data set calendar_event_id=?,event_date=?,events_series=?,is_period_first_day=?,is_predicted=?,is_sync=?,modified_date_time=?,title=? where id=?
2025-02-19 12:03:38 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - update event_data set calendar_event_id=?,event_date=?,events_series=?,is_period_first_day=?,is_predicted=?,is_sync=?,modified_date_time=?,title=? where id=?
2025-02-19 12:03:38 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - update event_data set calendar_event_id=?,event_date=?,events_series=?,is_period_first_day=?,is_predicted=?,is_sync=?,modified_date_time=?,title=? where id=?
2025-02-19 12:03:38 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - update event_data set calendar_event_id=?,event_date=?,events_series=?,is_period_first_day=?,is_predicted=?,is_sync=?,modified_date_time=?,title=? where id=?
2025-02-19 12:03:38 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - update event_data set calendar_event_id=?,event_date=?,events_series=?,is_period_first_day=?,is_predicted=?,is_sync=?,modified_date_time=?,title=? where id=?
2025-02-19 12:03:38 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - update event_data set calendar_event_id=?,event_date=?,events_series=?,is_period_first_day=?,is_predicted=?,is_sync=?,modified_date_time=?,title=? where id=?
2025-02-19 12:03:38 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - update event_data set calendar_event_id=?,event_date=?,events_series=?,is_period_first_day=?,is_predicted=?,is_sync=?,modified_date_time=?,title=? where id=?
2025-02-19 12:03:38 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - update event_data set calendar_event_id=?,event_date=?,events_series=?,is_period_first_day=?,is_predicted=?,is_sync=?,modified_date_time=?,title=? where id=?
2025-02-19 12:03:38 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - update event_data set calendar_event_id=?,event_date=?,events_series=?,is_period_first_day=?,is_predicted=?,is_sync=?,modified_date_time=?,title=? where id=?
2025-02-19 12:03:38 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - update event_data set calendar_event_id=?,event_date=?,events_series=?,is_period_first_day=?,is_predicted=?,is_sync=?,modified_date_time=?,title=? where id=?
2025-02-19 12:03:38 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - update event_data set calendar_event_id=?,event_date=?,events_series=?,is_period_first_day=?,is_predicted=?,is_sync=?,modified_date_time=?,title=? where id=?
2025-02-19 12:06:06 [main] INFO  predictor.demo.DemoApplication - Starting DemoApplication using Java 17.0.13 with PID 848 (C:\Fullstack_apps\period-and-ovulation-predictor\backend\demo\target\classes started by Danil in C:\Fullstack_apps\period-and-ovulation-predictor)
2025-02-19 12:06:06 [main] INFO  predictor.demo.DemoApplication - No active profile set, falling back to 1 default profile: "default"
2025-02-19 12:06:12 [main] INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-02-19 12:06:12 [main] INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.34]
2025-02-19 12:06:12 [main] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-02-19 12:06:12 [main] INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-02-19 12:06:13 [main] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.6.5.Final
2025-02-19 12:06:13 [main] INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-02-19 12:06:14 [main] WARN  com.zaxxer.hikari.HikariConfig - predictor-period-ovulation - idleTimeout has been set but has no effect because the pool is operating as a fixed size pool.
2025-02-19 12:06:14 [main] INFO  com.zaxxer.hikari.HikariDataSource - predictor-period-ovulation - Starting...
2025-02-19 12:06:15 [main] INFO  com.zaxxer.hikari.pool.HikariPool - predictor-period-ovulation - Added connection com.mysql.cj.jdbc.ConnectionImpl@67f591c2
2025-02-19 12:06:15 [main] INFO  com.zaxxer.hikari.HikariDataSource - predictor-period-ovulation - Start completed.
2025-02-19 12:06:15 [main] WARN  org.hibernate.orm.deprecation - HHH90000025: MySQL8Dialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-02-19 12:06:15 [main] WARN  org.hibernate.orm.deprecation - HHH90000026: MySQL8Dialect has been deprecated; use org.hibernate.dialect.MySQLDialect instead
2025-02-19 12:06:15 [main] INFO  o.hibernate.orm.connections.pooling - HHH10001005: Database info:
	Database JDBC URL [Connecting through datasource 'HikariDataSource (predictor-period-ovulation)']
	Database driver: undefined/unknown
	Database version: 8.0
	Autocommit mode: undefined/unknown
	Isolation level: undefined/unknown
	Minimum pool size: undefined/unknown
	Maximum pool size: undefined/unknown
2025-02-19 12:06:18 [main] INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-02-19 12:06:18 [main] DEBUG org.hibernate.SQL - alter table event_data drop foreign key FKky6rwvta5hrsrpfxxnqle7hc6
2025-02-19 12:06:18 [main] DEBUG org.hibernate.SQL - alter table event_data drop foreign key FKnugyl72uxj2nmxbbj2bjtw4nb
2025-02-19 12:06:18 [main] DEBUG org.hibernate.SQL - alter table events_series drop foreign key FKihucq4fq1hhfi32h05gt97kwn
2025-02-19 12:06:18 [main] DEBUG org.hibernate.SQL - drop table if exists event_data
2025-02-19 12:06:18 [main] DEBUG org.hibernate.SQL - drop table if exists events_series
2025-02-19 12:06:18 [main] DEBUG org.hibernate.SQL - drop table if exists user
2025-02-19 12:06:18 [main] DEBUG org.hibernate.SQL - create table event_data (event_date date, events_series integer, id integer not null auto_increment, is_period_first_day bit not null, is_predicted bit not null, is_sync bit not null, user_id integer not null, created_date_time datetime(6), modified_date_time datetime(6), calendar_event_id varchar(255), title varchar(255), primary key (id)) engine=InnoDB
2025-02-19 12:06:18 [main] DEBUG org.hibernate.SQL - create table events_series (calculated_cycle_length float(53) not null, id integer not null auto_increment, prediction_date date, user_id integer not null, primary key (id)) engine=InnoDB
2025-02-19 12:06:18 [main] DEBUG org.hibernate.SQL - create table user (id integer not null auto_increment, is_active bit not null, created_date_time datetime(6), modified_date_time datetime(6), email varchar(255) not null, google_sub varchar(255), name varchar(255), picture varchar(255), refresh_token varchar(255), primary key (id)) engine=InnoDB
2025-02-19 12:06:18 [main] DEBUG org.hibernate.SQL - alter table user add constraint UKob8kqyqqgmefl0aco34akdtpe unique (email)
2025-02-19 12:06:18 [main] DEBUG org.hibernate.SQL - alter table user add constraint UKr4q9y86xwh8ew8ja4b3rrguwr unique (google_sub)
2025-02-19 12:06:18 [main] DEBUG org.hibernate.SQL - alter table event_data add constraint FKky6rwvta5hrsrpfxxnqle7hc6 foreign key (events_series) references events_series (id)
2025-02-19 12:06:18 [main] DEBUG org.hibernate.SQL - alter table event_data add constraint FKnugyl72uxj2nmxbbj2bjtw4nb foreign key (user_id) references user (id)
2025-02-19 12:06:18 [main] DEBUG org.hibernate.SQL - alter table events_series add constraint FKihucq4fq1hhfi32h05gt97kwn foreign key (user_id) references user (id)
2025-02-19 12:06:21 [main] WARN  o.s.b.a.o.j.JpaBaseConfiguration$JpaWebConfiguration - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2025-02-19 12:06:23 [main] INFO  predictor.demo.DemoApplication - Started DemoApplication in 18.809 seconds (process running for 19.807)
2025-02-19 12:06:33 [http-nio-8080-exec-1] INFO  o.a.tomcat.util.http.parser.Cookie - A cookie header was received [g_state={"i_l":0};] that contained an invalid cookie. That cookie will be ignored.
 Note: further occurrences of this error will be logged at DEBUG level.
2025-02-19 12:06:33 [http-nio-8080-exec-1] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-02-19 12:06:33 [http-nio-8080-exec-2] WARN  o.a.c.util.SessionIdGeneratorBase - Creation of SecureRandom instance for session ID generation using [SHA1PRNG] took [151] milliseconds.
2025-02-19 12:06:38 [http-nio-8080-exec-4] INFO  predictor.demo.AppConfiguration - Processing OAuth2 login for: naama.antoniouk@gmail.com
2025-02-19 12:06:38 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - select u1_0.id,u1_0.created_date_time,u1_0.email,u1_0.google_sub,u1_0.is_active,u1_0.modified_date_time,u1_0.name,u1_0.picture,u1_0.refresh_token from user u1_0 where u1_0.google_sub=?
2025-02-19 12:06:38 [http-nio-8080-exec-4] INFO  predictor.demo.AppConfiguration - User not found, will create new user for: naama.antoniouk@gmail.com
2025-02-19 12:06:38 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - select u1_0.id from user u1_0 where u1_0.email=? limit ?
2025-02-19 12:06:38 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - select u1_0.id from user u1_0 where u1_0.google_sub=? limit ?
2025-02-19 12:06:38 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - insert into user (created_date_time,email,google_sub,is_active,modified_date_time,name,picture,refresh_token) values (?,?,?,?,?,?,?,?)
2025-02-19 12:06:38 [http-nio-8080-exec-4] INFO  predictor.demo.AppConfiguration - Created new user with Google ID: 114720670413454628998
2025-02-19 12:06:39 [http-nio-8080-exec-5] INFO  p.d.A.calendar.CalendarController - Fetching period events for user
2025-02-19 12:06:39 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - select u1_0.id,u1_0.created_date_time,u1_0.email,u1_0.google_sub,u1_0.is_active,u1_0.modified_date_time,u1_0.name,u1_0.picture,u1_0.refresh_token from user u1_0 where u1_0.google_sub=?
2025-02-19 12:06:39 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - select ed1_0.id,ed1_0.calendar_event_id,ed1_0.created_date_time,ed1_0.event_date,ed1_0.events_series,ed1_0.is_period_first_day,ed1_0.is_predicted,ed1_0.is_sync,ed1_0.modified_date_time,ed1_0.title,ed1_0.user_id from event_data ed1_0 where ed1_0.user_id=? and ed1_0.is_predicted=0
2025-02-19 12:06:39 [http-nio-8080-exec-6] INFO  p.d.A.calendar.CalendarController - Fetching period events for user
2025-02-19 12:06:39 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - select u1_0.id,u1_0.created_date_time,u1_0.email,u1_0.google_sub,u1_0.is_active,u1_0.modified_date_time,u1_0.name,u1_0.picture,u1_0.refresh_token from user u1_0 where u1_0.google_sub=?
2025-02-19 12:06:39 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - select ed1_0.id,ed1_0.calendar_event_id,ed1_0.created_date_time,ed1_0.event_date,ed1_0.events_series,ed1_0.is_period_first_day,ed1_0.is_predicted,ed1_0.is_sync,ed1_0.modified_date_time,ed1_0.title,ed1_0.user_id from event_data ed1_0 where ed1_0.user_id=? and ed1_0.is_predicted=0
2025-02-19 12:10:42 [http-nio-8080-exec-10] INFO  p.d.A.calendar.CalendarController - Adding new period event
2025-02-19 12:10:42 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - select u1_0.id,u1_0.created_date_time,u1_0.email,u1_0.google_sub,u1_0.is_active,u1_0.modified_date_time,u1_0.name,u1_0.picture,u1_0.refresh_token from user u1_0 where u1_0.google_sub=?
2025-02-19 12:10:42 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - select count(*) from event_data ed1_0 where ed1_0.id=?
2025-02-19 12:10:42 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - insert into event_data (calendar_event_id,created_date_time,event_date,events_series,is_period_first_day,is_predicted,is_sync,modified_date_time,title,user_id) values (?,?,?,?,?,?,?,?,?,?)
2025-02-19 12:10:43 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - update event_data set calendar_event_id=?,event_date=?,events_series=?,is_period_first_day=?,is_predicted=?,is_sync=?,modified_date_time=?,title=? where id=?
2025-02-19 12:10:55 [http-nio-8080-exec-2] INFO  p.d.A.calendar.CalendarController - Adding new period event
2025-02-19 12:10:55 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - select u1_0.id,u1_0.created_date_time,u1_0.email,u1_0.google_sub,u1_0.is_active,u1_0.modified_date_time,u1_0.name,u1_0.picture,u1_0.refresh_token from user u1_0 where u1_0.google_sub=?
2025-02-19 12:10:55 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - select count(*) from event_data ed1_0 where ed1_0.id=?
2025-02-19 12:10:55 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - insert into event_data (calendar_event_id,created_date_time,event_date,events_series,is_period_first_day,is_predicted,is_sync,modified_date_time,title,user_id) values (?,?,?,?,?,?,?,?,?,?)
2025-02-19 12:10:55 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - update event_data set calendar_event_id=?,event_date=?,events_series=?,is_period_first_day=?,is_predicted=?,is_sync=?,modified_date_time=?,title=? where id=?
2025-02-19 12:11:06 [http-nio-8080-exec-4] INFO  p.d.A.calendar.CalendarController - Adding new period event
2025-02-19 12:11:06 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - select u1_0.id,u1_0.created_date_time,u1_0.email,u1_0.google_sub,u1_0.is_active,u1_0.modified_date_time,u1_0.name,u1_0.picture,u1_0.refresh_token from user u1_0 where u1_0.google_sub=?
2025-02-19 12:11:06 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - select count(*) from event_data ed1_0 where ed1_0.id=?
2025-02-19 12:11:06 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - insert into event_data (calendar_event_id,created_date_time,event_date,events_series,is_period_first_day,is_predicted,is_sync,modified_date_time,title,user_id) values (?,?,?,?,?,?,?,?,?,?)
2025-02-19 12:11:07 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - update event_data set calendar_event_id=?,event_date=?,events_series=?,is_period_first_day=?,is_predicted=?,is_sync=?,modified_date_time=?,title=? where id=?
2025-02-19 12:11:21 [http-nio-8080-exec-6] INFO  p.d.A.calendar.CalendarController - Adding new period event
2025-02-19 12:11:21 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - select u1_0.id,u1_0.created_date_time,u1_0.email,u1_0.google_sub,u1_0.is_active,u1_0.modified_date_time,u1_0.name,u1_0.picture,u1_0.refresh_token from user u1_0 where u1_0.google_sub=?
2025-02-19 12:11:21 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - select count(*) from event_data ed1_0 where ed1_0.id=?
2025-02-19 12:11:21 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - insert into event_data (calendar_event_id,created_date_time,event_date,events_series,is_period_first_day,is_predicted,is_sync,modified_date_time,title,user_id) values (?,?,?,?,?,?,?,?,?,?)
2025-02-19 12:11:22 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - update event_data set calendar_event_id=?,event_date=?,events_series=?,is_period_first_day=?,is_predicted=?,is_sync=?,modified_date_time=?,title=? where id=?
2025-02-19 12:19:02 [http-nio-8080-exec-9] INFO  p.d.A.calendar.CalendarController - Fetching period events for user
2025-02-19 12:19:02 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - select u1_0.id,u1_0.created_date_time,u1_0.email,u1_0.google_sub,u1_0.is_active,u1_0.modified_date_time,u1_0.name,u1_0.picture,u1_0.refresh_token from user u1_0 where u1_0.google_sub=?
2025-02-19 12:19:02 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - select ed1_0.id,ed1_0.calendar_event_id,ed1_0.created_date_time,ed1_0.event_date,ed1_0.events_series,ed1_0.is_period_first_day,ed1_0.is_predicted,ed1_0.is_sync,ed1_0.modified_date_time,ed1_0.title,ed1_0.user_id from event_data ed1_0 where ed1_0.user_id=? and ed1_0.is_predicted=0
2025-02-19 12:19:02 [http-nio-8080-exec-10] INFO  p.d.A.calendar.CalendarController - Fetching period events for user
2025-02-19 12:19:02 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - select u1_0.id,u1_0.created_date_time,u1_0.email,u1_0.google_sub,u1_0.is_active,u1_0.modified_date_time,u1_0.name,u1_0.picture,u1_0.refresh_token from user u1_0 where u1_0.google_sub=?
2025-02-19 12:19:02 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - select ed1_0.id,ed1_0.calendar_event_id,ed1_0.created_date_time,ed1_0.event_date,ed1_0.events_series,ed1_0.is_period_first_day,ed1_0.is_predicted,ed1_0.is_sync,ed1_0.modified_date_time,ed1_0.title,ed1_0.user_id from event_data ed1_0 where ed1_0.user_id=? and ed1_0.is_predicted=0
2025-02-19 12:19:30 [http-nio-8080-exec-1] INFO  p.d.A.calendar.CalendarController - Generating new predictions
2025-02-19 12:19:30 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - select u1_0.id,u1_0.created_date_time,u1_0.email,u1_0.google_sub,u1_0.is_active,u1_0.modified_date_time,u1_0.name,u1_0.picture,u1_0.refresh_token from user u1_0 where u1_0.google_sub=?
2025-02-19 12:19:30 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - SELECT * FROM event_data WHERE id = (SELECT MAX(id) FROM event_data WHERE user_id = ? AND is_period_first_day = true AND is_predicted = false)
2025-02-19 12:19:30 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - select es1_0.id from events_series es1_0 left join user u1_0 on u1_0.id=es1_0.user_id where u1_0.id=? limit ?
2025-02-19 12:19:30 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - WITH period_events AS (     SELECT event_date,            LAG(event_date) OVER (ORDER BY event_date DESC) AS prev_event_date     FROM event_data     WHERE user_id = ?     AND is_period_first_day = true     AND is_predicted = false ) SELECT AVG(DATEDIFF(prev_event_date, event_date)) FROM period_events WHERE prev_event_date IS NOT NULL
2025-02-19 12:19:30 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - SELECT * FROM event_data WHERE id = (SELECT MAX(id) FROM event_data WHERE user_id = ? AND is_period_first_day = true AND is_predicted = false)
2025-02-19 12:19:30 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - select count(ed1_0.id) from event_data ed1_0 where ed1_0.user_id=? and ed1_0.is_predicted=0
2025-02-19 12:19:30 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - insert into events_series (calculated_cycle_length,prediction_date,user_id) values (?,?,?)
2025-02-19 12:19:30 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - SELECT * FROM event_data WHERE id = (SELECT MAX(id) FROM event_data WHERE user_id = ? AND is_period_first_day = true AND is_predicted = false)
2025-02-19 12:19:30 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - select count(*) from event_data ed1_0 where ed1_0.id=?
2025-02-19 12:19:30 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - insert into event_data (calendar_event_id,created_date_time,event_date,events_series,is_period_first_day,is_predicted,is_sync,modified_date_time,title,user_id) values (?,?,?,?,?,?,?,?,?,?)
2025-02-19 12:19:30 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - select count(*) from event_data ed1_0 where ed1_0.id=?
2025-02-19 12:19:30 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - insert into event_data (calendar_event_id,created_date_time,event_date,events_series,is_period_first_day,is_predicted,is_sync,modified_date_time,title,user_id) values (?,?,?,?,?,?,?,?,?,?)
2025-02-19 12:19:30 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - select count(*) from event_data ed1_0 where ed1_0.id=?
2025-02-19 12:19:30 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - insert into event_data (calendar_event_id,created_date_time,event_date,events_series,is_period_first_day,is_predicted,is_sync,modified_date_time,title,user_id) values (?,?,?,?,?,?,?,?,?,?)
2025-02-19 12:19:30 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - select count(*) from event_data ed1_0 where ed1_0.id=?
2025-02-19 12:19:30 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - insert into event_data (calendar_event_id,created_date_time,event_date,events_series,is_period_first_day,is_predicted,is_sync,modified_date_time,title,user_id) values (?,?,?,?,?,?,?,?,?,?)
2025-02-19 12:19:30 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - select count(*) from event_data ed1_0 where ed1_0.id=?
2025-02-19 12:19:30 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - insert into event_data (calendar_event_id,created_date_time,event_date,events_series,is_period_first_day,is_predicted,is_sync,modified_date_time,title,user_id) values (?,?,?,?,?,?,?,?,?,?)
2025-02-19 12:19:30 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - select count(*) from event_data ed1_0 where ed1_0.id=?
2025-02-19 12:19:30 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - insert into event_data (calendar_event_id,created_date_time,event_date,events_series,is_period_first_day,is_predicted,is_sync,modified_date_time,title,user_id) values (?,?,?,?,?,?,?,?,?,?)
2025-02-19 12:19:30 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - select count(*) from event_data ed1_0 where ed1_0.id=?
2025-02-19 12:19:30 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - insert into event_data (calendar_event_id,created_date_time,event_date,events_series,is_period_first_day,is_predicted,is_sync,modified_date_time,title,user_id) values (?,?,?,?,?,?,?,?,?,?)
2025-02-19 12:19:30 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - select count(*) from event_data ed1_0 where ed1_0.id=?
2025-02-19 12:19:30 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - insert into event_data (calendar_event_id,created_date_time,event_date,events_series,is_period_first_day,is_predicted,is_sync,modified_date_time,title,user_id) values (?,?,?,?,?,?,?,?,?,?)
2025-02-19 12:19:30 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - select count(*) from event_data ed1_0 where ed1_0.id=?
2025-02-19 12:19:30 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - insert into event_data (calendar_event_id,created_date_time,event_date,events_series,is_period_first_day,is_predicted,is_sync,modified_date_time,title,user_id) values (?,?,?,?,?,?,?,?,?,?)
2025-02-19 12:19:30 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - select count(*) from event_data ed1_0 where ed1_0.id=?
2025-02-19 12:19:30 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - insert into event_data (calendar_event_id,created_date_time,event_date,events_series,is_period_first_day,is_predicted,is_sync,modified_date_time,title,user_id) values (?,?,?,?,?,?,?,?,?,?)
2025-02-19 12:19:30 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - select count(*) from event_data ed1_0 where ed1_0.id=?
2025-02-19 12:19:30 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - insert into event_data (calendar_event_id,created_date_time,event_date,events_series,is_period_first_day,is_predicted,is_sync,modified_date_time,title,user_id) values (?,?,?,?,?,?,?,?,?,?)
2025-02-19 12:19:30 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - select count(*) from event_data ed1_0 where ed1_0.id=?
2025-02-19 12:19:30 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - insert into event_data (calendar_event_id,created_date_time,event_date,events_series,is_period_first_day,is_predicted,is_sync,modified_date_time,title,user_id) values (?,?,?,?,?,?,?,?,?,?)
2025-02-19 12:19:31 [http-nio-8080-exec-1] INFO  p.d.A.calendar.GoogleCalendarService - Successfully synced event: ?Period-Prediction? to Google Calendar
2025-02-19 12:19:31 [http-nio-8080-exec-1] INFO  p.d.A.calendar.GoogleCalendarService - Successfully synced event: ?Period-Prediction? to Google Calendar
2025-02-19 12:19:31 [http-nio-8080-exec-1] INFO  p.d.A.calendar.GoogleCalendarService - Successfully synced event: ?Period-Prediction? to Google Calendar
2025-02-19 12:19:33 [http-nio-8080-exec-1] INFO  p.d.A.calendar.GoogleCalendarService - Successfully synced event: ?Period-Prediction? to Google Calendar
2025-02-19 12:19:33 [http-nio-8080-exec-1] INFO  p.d.A.calendar.GoogleCalendarService - Successfully synced event: ?Period-Prediction? to Google Calendar
2025-02-19 12:19:34 [http-nio-8080-exec-1] INFO  p.d.A.calendar.GoogleCalendarService - Successfully synced event: ?Period-Prediction? to Google Calendar
2025-02-19 12:19:34 [http-nio-8080-exec-1] INFO  p.d.A.calendar.GoogleCalendarService - Successfully synced event: ??Ovulation-Prediction?? to Google Calendar
2025-02-19 12:19:35 [http-nio-8080-exec-1] INFO  p.d.A.calendar.GoogleCalendarService - Successfully synced event: ??Ovulation-Prediction?? to Google Calendar
2025-02-19 12:19:35 [http-nio-8080-exec-1] INFO  p.d.A.calendar.GoogleCalendarService - Successfully synced event: ??Ovulation-Prediction?? to Google Calendar
2025-02-19 12:19:35 [http-nio-8080-exec-1] INFO  p.d.A.calendar.GoogleCalendarService - Successfully synced event: ??Ovulation-Prediction?? to Google Calendar
2025-02-19 12:19:36 [http-nio-8080-exec-1] INFO  p.d.A.calendar.GoogleCalendarService - Successfully synced event: ??Ovulation-Prediction?? to Google Calendar
2025-02-19 12:19:36 [http-nio-8080-exec-1] INFO  p.d.A.calendar.GoogleCalendarService - Successfully synced event: ??Ovulation-Prediction?? to Google Calendar
2025-02-19 12:19:36 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - update event_data set calendar_event_id=?,event_date=?,events_series=?,is_period_first_day=?,is_predicted=?,is_sync=?,modified_date_time=?,title=? where id=?
2025-02-19 12:19:36 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - update event_data set calendar_event_id=?,event_date=?,events_series=?,is_period_first_day=?,is_predicted=?,is_sync=?,modified_date_time=?,title=? where id=?
2025-02-19 12:19:36 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - update event_data set calendar_event_id=?,event_date=?,events_series=?,is_period_first_day=?,is_predicted=?,is_sync=?,modified_date_time=?,title=? where id=?
2025-02-19 12:19:36 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - update event_data set calendar_event_id=?,event_date=?,events_series=?,is_period_first_day=?,is_predicted=?,is_sync=?,modified_date_time=?,title=? where id=?
2025-02-19 12:19:36 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - update event_data set calendar_event_id=?,event_date=?,events_series=?,is_period_first_day=?,is_predicted=?,is_sync=?,modified_date_time=?,title=? where id=?
2025-02-19 12:19:36 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - update event_data set calendar_event_id=?,event_date=?,events_series=?,is_period_first_day=?,is_predicted=?,is_sync=?,modified_date_time=?,title=? where id=?
2025-02-19 12:19:36 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - update event_data set calendar_event_id=?,event_date=?,events_series=?,is_period_first_day=?,is_predicted=?,is_sync=?,modified_date_time=?,title=? where id=?
2025-02-19 12:19:36 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - update event_data set calendar_event_id=?,event_date=?,events_series=?,is_period_first_day=?,is_predicted=?,is_sync=?,modified_date_time=?,title=? where id=?
2025-02-19 12:19:36 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - update event_data set calendar_event_id=?,event_date=?,events_series=?,is_period_first_day=?,is_predicted=?,is_sync=?,modified_date_time=?,title=? where id=?
2025-02-19 12:19:36 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - update event_data set calendar_event_id=?,event_date=?,events_series=?,is_period_first_day=?,is_predicted=?,is_sync=?,modified_date_time=?,title=? where id=?
2025-02-19 12:19:36 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - update event_data set calendar_event_id=?,event_date=?,events_series=?,is_period_first_day=?,is_predicted=?,is_sync=?,modified_date_time=?,title=? where id=?
2025-02-19 12:19:36 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - update event_data set calendar_event_id=?,event_date=?,events_series=?,is_period_first_day=?,is_predicted=?,is_sync=?,modified_date_time=?,title=? where id=?
2025-02-19 12:33:32 [http-nio-8080-exec-4] INFO  p.d.A.calendar.CalendarController - Adding new period event
2025-02-19 12:33:32 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - select u1_0.id,u1_0.created_date_time,u1_0.email,u1_0.google_sub,u1_0.is_active,u1_0.modified_date_time,u1_0.name,u1_0.picture,u1_0.refresh_token from user u1_0 where u1_0.google_sub=?
2025-02-19 12:33:32 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - select count(*) from event_data ed1_0 where ed1_0.id=?
2025-02-19 12:33:32 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - insert into event_data (calendar_event_id,created_date_time,event_date,events_series,is_period_first_day,is_predicted,is_sync,modified_date_time,title,user_id) values (?,?,?,?,?,?,?,?,?,?)
2025-02-19 12:33:33 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - update event_data set calendar_event_id=?,event_date=?,events_series=?,is_period_first_day=?,is_predicted=?,is_sync=?,modified_date_time=?,title=? where id=?
2025-02-19 12:33:44 [http-nio-8080-exec-5] INFO  p.d.A.calendar.CalendarController - Generating new predictions
2025-02-19 12:33:44 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - select u1_0.id,u1_0.created_date_time,u1_0.email,u1_0.google_sub,u1_0.is_active,u1_0.modified_date_time,u1_0.name,u1_0.picture,u1_0.refresh_token from user u1_0 where u1_0.google_sub=?
2025-02-19 12:33:44 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - SELECT * FROM event_data WHERE id = (SELECT MAX(id) FROM event_data WHERE user_id = ? AND is_period_first_day = true AND is_predicted = false)
2025-02-19 12:33:44 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - select es1_0.id from events_series es1_0 left join user u1_0 on u1_0.id=es1_0.user_id where u1_0.id=? limit ?
2025-02-19 12:33:44 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - select es1_0.id,es1_0.calculated_cycle_length,es1_0.prediction_date,es1_0.user_id from events_series es1_0 left join user u1_0 on u1_0.id=es1_0.user_id where u1_0.id=?
2025-02-19 12:33:44 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - select ed1_0.id,ed1_0.calendar_event_id,ed1_0.created_date_time,ed1_0.event_date,ed1_0.events_series,ed1_0.is_period_first_day,ed1_0.is_predicted,ed1_0.is_sync,ed1_0.modified_date_time,ed1_0.title,ed1_0.user_id from event_data ed1_0 where ed1_0.user_id=? and ed1_0.is_predicted=1
2025-02-19 12:33:45 [http-nio-8080-exec-5] INFO  p.d.A.calendar.GoogleCalendarService - Successfully deleted event from Google Calendar: n4dmm2op5bu6sjsasritstmjic
2025-02-19 12:33:45 [http-nio-8080-exec-5] INFO  p.d.A.calendar.GoogleCalendarService - Successfully deleted event from Google Calendar: vcp6ci9sjgi5k3ukgg4td5rnl0
2025-02-19 12:33:45 [http-nio-8080-exec-5] INFO  p.d.A.calendar.GoogleCalendarService - Successfully deleted event from Google Calendar: nsl74q0ohcvm3gem7ccgrfultc
2025-02-19 12:33:46 [http-nio-8080-exec-5] INFO  p.d.A.calendar.GoogleCalendarService - Successfully deleted event from Google Calendar: ktijpt9c302qm9e30r1cle8dj0
2025-02-19 12:33:46 [http-nio-8080-exec-5] INFO  p.d.A.calendar.GoogleCalendarService - Successfully deleted event from Google Calendar: 4ej2qqdqs7qivv7464ku216a3g
2025-02-19 12:33:46 [http-nio-8080-exec-5] INFO  p.d.A.calendar.GoogleCalendarService - Successfully deleted event from Google Calendar: u200ssggdtaqtsghi3huutlkuo
2025-02-19 12:33:46 [http-nio-8080-exec-5] INFO  p.d.A.calendar.GoogleCalendarService - Successfully deleted event from Google Calendar: 87b1h52pc3c5u7ijkoqqnnanvk
2025-02-19 12:33:47 [http-nio-8080-exec-5] INFO  p.d.A.calendar.GoogleCalendarService - Successfully deleted event from Google Calendar: t2ffo8mc954k8rthqod8glve1g
2025-02-19 12:33:47 [http-nio-8080-exec-5] INFO  p.d.A.calendar.GoogleCalendarService - Successfully deleted event from Google Calendar: s82jmabhe6mqtfr91i1meobvfk
2025-02-19 12:33:47 [http-nio-8080-exec-5] INFO  p.d.A.calendar.GoogleCalendarService - Successfully deleted event from Google Calendar: fmdrqu0dnv4sp39dhtha2qjg8g
2025-02-19 12:33:47 [http-nio-8080-exec-5] INFO  p.d.A.calendar.GoogleCalendarService - Successfully deleted event from Google Calendar: 8q0ubca8kqsdosrpd755urn6qc
2025-02-19 12:33:48 [http-nio-8080-exec-5] INFO  p.d.A.calendar.GoogleCalendarService - Successfully deleted event from Google Calendar: l3d5gcttd15fu3ljjnjtjto0dg
2025-02-19 12:33:48 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - delete ed1_0 from event_data ed1_0 where ed1_0.user_id=? and ed1_0.is_predicted=1
2025-02-19 12:33:48 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - SELECT * FROM event_data WHERE id = (SELECT MAX(id) FROM event_data WHERE user_id = ? AND is_period_first_day = true AND is_predicted = false)
2025-02-19 12:33:48 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - select count(ed1_0.id) from event_data ed1_0 where ed1_0.user_id=? and ed1_0.is_predicted=0
2025-02-19 12:33:48 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - insert into events_series (calculated_cycle_length,prediction_date,user_id) values (?,?,?)
2025-02-19 12:33:48 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - SELECT * FROM event_data WHERE id = (SELECT MAX(id) FROM event_data WHERE user_id = ? AND is_period_first_day = true AND is_predicted = false)
2025-02-19 12:33:48 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - select count(*) from event_data ed1_0 where ed1_0.id=?
2025-02-19 12:33:48 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - insert into event_data (calendar_event_id,created_date_time,event_date,events_series,is_period_first_day,is_predicted,is_sync,modified_date_time,title,user_id) values (?,?,?,?,?,?,?,?,?,?)
2025-02-19 12:33:48 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - select count(*) from event_data ed1_0 where ed1_0.id=?
2025-02-19 12:33:48 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - insert into event_data (calendar_event_id,created_date_time,event_date,events_series,is_period_first_day,is_predicted,is_sync,modified_date_time,title,user_id) values (?,?,?,?,?,?,?,?,?,?)
2025-02-19 12:33:48 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - select count(*) from event_data ed1_0 where ed1_0.id=?
2025-02-19 12:33:48 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - insert into event_data (calendar_event_id,created_date_time,event_date,events_series,is_period_first_day,is_predicted,is_sync,modified_date_time,title,user_id) values (?,?,?,?,?,?,?,?,?,?)
2025-02-19 12:33:48 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - select count(*) from event_data ed1_0 where ed1_0.id=?
2025-02-19 12:33:48 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - insert into event_data (calendar_event_id,created_date_time,event_date,events_series,is_period_first_day,is_predicted,is_sync,modified_date_time,title,user_id) values (?,?,?,?,?,?,?,?,?,?)
2025-02-19 12:33:48 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - select count(*) from event_data ed1_0 where ed1_0.id=?
2025-02-19 12:33:48 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - insert into event_data (calendar_event_id,created_date_time,event_date,events_series,is_period_first_day,is_predicted,is_sync,modified_date_time,title,user_id) values (?,?,?,?,?,?,?,?,?,?)
2025-02-19 12:33:48 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - select count(*) from event_data ed1_0 where ed1_0.id=?
2025-02-19 12:33:48 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - insert into event_data (calendar_event_id,created_date_time,event_date,events_series,is_period_first_day,is_predicted,is_sync,modified_date_time,title,user_id) values (?,?,?,?,?,?,?,?,?,?)
2025-02-19 12:33:48 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - select count(*) from event_data ed1_0 where ed1_0.id=?
2025-02-19 12:33:48 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - insert into event_data (calendar_event_id,created_date_time,event_date,events_series,is_period_first_day,is_predicted,is_sync,modified_date_time,title,user_id) values (?,?,?,?,?,?,?,?,?,?)
2025-02-19 12:33:48 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - select count(*) from event_data ed1_0 where ed1_0.id=?
2025-02-19 12:33:48 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - insert into event_data (calendar_event_id,created_date_time,event_date,events_series,is_period_first_day,is_predicted,is_sync,modified_date_time,title,user_id) values (?,?,?,?,?,?,?,?,?,?)
2025-02-19 12:33:48 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - select count(*) from event_data ed1_0 where ed1_0.id=?
2025-02-19 12:33:48 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - insert into event_data (calendar_event_id,created_date_time,event_date,events_series,is_period_first_day,is_predicted,is_sync,modified_date_time,title,user_id) values (?,?,?,?,?,?,?,?,?,?)
2025-02-19 12:33:48 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - select count(*) from event_data ed1_0 where ed1_0.id=?
2025-02-19 12:33:48 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - insert into event_data (calendar_event_id,created_date_time,event_date,events_series,is_period_first_day,is_predicted,is_sync,modified_date_time,title,user_id) values (?,?,?,?,?,?,?,?,?,?)
2025-02-19 12:33:48 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - select count(*) from event_data ed1_0 where ed1_0.id=?
2025-02-19 12:33:48 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - insert into event_data (calendar_event_id,created_date_time,event_date,events_series,is_period_first_day,is_predicted,is_sync,modified_date_time,title,user_id) values (?,?,?,?,?,?,?,?,?,?)
2025-02-19 12:33:48 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - select count(*) from event_data ed1_0 where ed1_0.id=?
2025-02-19 12:33:48 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - insert into event_data (calendar_event_id,created_date_time,event_date,events_series,is_period_first_day,is_predicted,is_sync,modified_date_time,title,user_id) values (?,?,?,?,?,?,?,?,?,?)
2025-02-19 12:33:48 [http-nio-8080-exec-5] INFO  p.d.A.calendar.GoogleCalendarService - Successfully synced event: ?Period-Prediction? to Google Calendar
2025-02-19 12:33:48 [http-nio-8080-exec-5] INFO  p.d.A.calendar.GoogleCalendarService - Successfully synced event: ?Period-Prediction? to Google Calendar
2025-02-19 12:33:49 [http-nio-8080-exec-5] INFO  p.d.A.calendar.GoogleCalendarService - Successfully synced event: ?Period-Prediction? to Google Calendar
2025-02-19 12:33:49 [http-nio-8080-exec-5] INFO  p.d.A.calendar.GoogleCalendarService - Successfully synced event: ?Period-Prediction? to Google Calendar
2025-02-19 12:33:49 [http-nio-8080-exec-5] INFO  p.d.A.calendar.GoogleCalendarService - Successfully synced event: ?Period-Prediction? to Google Calendar
2025-02-19 12:33:50 [http-nio-8080-exec-5] INFO  p.d.A.calendar.GoogleCalendarService - Successfully synced event: ?Period-Prediction? to Google Calendar
2025-02-19 12:33:50 [http-nio-8080-exec-5] INFO  p.d.A.calendar.GoogleCalendarService - Successfully synced event: ??Ovulation-Prediction?? to Google Calendar
2025-02-19 12:33:50 [http-nio-8080-exec-5] INFO  p.d.A.calendar.GoogleCalendarService - Successfully synced event: ??Ovulation-Prediction?? to Google Calendar
2025-02-19 12:33:51 [http-nio-8080-exec-5] INFO  p.d.A.calendar.GoogleCalendarService - Successfully synced event: ??Ovulation-Prediction?? to Google Calendar
2025-02-19 12:33:51 [http-nio-8080-exec-5] INFO  p.d.A.calendar.GoogleCalendarService - Successfully synced event: ??Ovulation-Prediction?? to Google Calendar
2025-02-19 12:33:51 [http-nio-8080-exec-5] INFO  p.d.A.calendar.GoogleCalendarService - Successfully synced event: ??Ovulation-Prediction?? to Google Calendar
2025-02-19 12:33:52 [http-nio-8080-exec-5] INFO  p.d.A.calendar.GoogleCalendarService - Successfully synced event: ??Ovulation-Prediction?? to Google Calendar
2025-02-19 12:33:52 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - update event_data set calendar_event_id=?,event_date=?,events_series=?,is_period_first_day=?,is_predicted=?,is_sync=?,modified_date_time=?,title=? where id=?
2025-02-19 12:33:52 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - update event_data set calendar_event_id=?,event_date=?,events_series=?,is_period_first_day=?,is_predicted=?,is_sync=?,modified_date_time=?,title=? where id=?
2025-02-19 12:33:52 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - update event_data set calendar_event_id=?,event_date=?,events_series=?,is_period_first_day=?,is_predicted=?,is_sync=?,modified_date_time=?,title=? where id=?
2025-02-19 12:33:52 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - update event_data set calendar_event_id=?,event_date=?,events_series=?,is_period_first_day=?,is_predicted=?,is_sync=?,modified_date_time=?,title=? where id=?
2025-02-19 12:33:52 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - update event_data set calendar_event_id=?,event_date=?,events_series=?,is_period_first_day=?,is_predicted=?,is_sync=?,modified_date_time=?,title=? where id=?
2025-02-19 12:33:52 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - update event_data set calendar_event_id=?,event_date=?,events_series=?,is_period_first_day=?,is_predicted=?,is_sync=?,modified_date_time=?,title=? where id=?
2025-02-19 12:33:52 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - update event_data set calendar_event_id=?,event_date=?,events_series=?,is_period_first_day=?,is_predicted=?,is_sync=?,modified_date_time=?,title=? where id=?
2025-02-19 12:33:52 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - update event_data set calendar_event_id=?,event_date=?,events_series=?,is_period_first_day=?,is_predicted=?,is_sync=?,modified_date_time=?,title=? where id=?
2025-02-19 12:33:52 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - update event_data set calendar_event_id=?,event_date=?,events_series=?,is_period_first_day=?,is_predicted=?,is_sync=?,modified_date_time=?,title=? where id=?
2025-02-19 12:33:52 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - update event_data set calendar_event_id=?,event_date=?,events_series=?,is_period_first_day=?,is_predicted=?,is_sync=?,modified_date_time=?,title=? where id=?
2025-02-19 12:33:52 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - update event_data set calendar_event_id=?,event_date=?,events_series=?,is_period_first_day=?,is_predicted=?,is_sync=?,modified_date_time=?,title=? where id=?
2025-02-19 12:33:52 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - update event_data set calendar_event_id=?,event_date=?,events_series=?,is_period_first_day=?,is_predicted=?,is_sync=?,modified_date_time=?,title=? where id=?
2025-02-19 12:46:17 [http-nio-8080-exec-7] INFO  p.d.A.calendar.CalendarController - Fetching period events for user
2025-02-19 12:46:17 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - select u1_0.id,u1_0.created_date_time,u1_0.email,u1_0.google_sub,u1_0.is_active,u1_0.modified_date_time,u1_0.name,u1_0.picture,u1_0.refresh_token from user u1_0 where u1_0.google_sub=?
2025-02-19 12:46:17 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - select ed1_0.id,ed1_0.calendar_event_id,ed1_0.created_date_time,ed1_0.event_date,ed1_0.events_series,ed1_0.is_period_first_day,ed1_0.is_predicted,ed1_0.is_sync,ed1_0.modified_date_time,ed1_0.title,ed1_0.user_id from event_data ed1_0 where ed1_0.user_id=? and ed1_0.is_predicted=0
2025-02-19 12:46:17 [http-nio-8080-exec-9] INFO  p.d.A.calendar.CalendarController - Fetching period events for user
2025-02-19 12:46:17 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - select u1_0.id,u1_0.created_date_time,u1_0.email,u1_0.google_sub,u1_0.is_active,u1_0.modified_date_time,u1_0.name,u1_0.picture,u1_0.refresh_token from user u1_0 where u1_0.google_sub=?
2025-02-19 12:46:17 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - select ed1_0.id,ed1_0.calendar_event_id,ed1_0.created_date_time,ed1_0.event_date,ed1_0.events_series,ed1_0.is_period_first_day,ed1_0.is_predicted,ed1_0.is_sync,ed1_0.modified_date_time,ed1_0.title,ed1_0.user_id from event_data ed1_0 where ed1_0.user_id=? and ed1_0.is_predicted=0
2025-02-19 12:46:28 [http-nio-8080-exec-10] INFO  p.d.A.calendar.CalendarController - Generating new predictions
2025-02-19 12:46:28 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - select u1_0.id,u1_0.created_date_time,u1_0.email,u1_0.google_sub,u1_0.is_active,u1_0.modified_date_time,u1_0.name,u1_0.picture,u1_0.refresh_token from user u1_0 where u1_0.google_sub=?
2025-02-19 12:46:28 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - SELECT * FROM event_data WHERE id = (SELECT MAX(id) FROM event_data WHERE user_id = ? AND is_period_first_day = true AND is_predicted = false)
2025-02-19 12:46:28 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - select es1_0.id from events_series es1_0 left join user u1_0 on u1_0.id=es1_0.user_id where u1_0.id=? limit ?
2025-02-19 12:46:28 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - select es1_0.id,es1_0.calculated_cycle_length,es1_0.prediction_date,es1_0.user_id from events_series es1_0 left join user u1_0 on u1_0.id=es1_0.user_id where u1_0.id=?
2025-02-19 12:46:28 [http-nio-8080-exec-10] ERROR p.d.A.calendar.CalendarController - Error generating predictions
org.springframework.dao.IncorrectResultSizeDataAccessException: Query did not return a unique result: 2 results were returned
	at org.springframework.orm.jpa.vendor.HibernateJpaDialect.convertHibernateAccessException(HibernateJpaDialect.java:301)
	at org.springframework.orm.jpa.vendor.HibernateJpaDialect.translateExceptionIfPossible(HibernateJpaDialect.java:244)
	at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.translateExceptionIfPossible(AbstractEntityManagerFactoryBean.java:560)
	at org.springframework.dao.support.ChainedPersistenceExceptionTranslator.translateExceptionIfPossible(ChainedPersistenceExceptionTranslator.java:61)
	at org.springframework.dao.support.DataAccessUtils.translateIfNecessary(DataAccessUtils.java:343)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:160)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:136)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:223)
	at jdk.proxy2/jdk.proxy2.$Proxy138.findByUserId(Unknown Source)
	at predictor.demo.AppModules.eventsSeries.EventSeriesServiceImp.createNewEventsSeries(EventSeriesServiceImp.java:107)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:359)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:723)
	at predictor.demo.AppModules.eventsSeries.EventSeriesServiceImp$$SpringCGLIB$$0.createNewEventsSeries(<generated>)
	at predictor.demo.AppModules.calendar.CalendarController.generatePredictions(CalendarController.java:137)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:257)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:190)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:986)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:891)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1088)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:978)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:914)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:590)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:195)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:101)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.ui.DefaultLogoutPageGeneratingFilter.doFilterInternal(DefaultLogoutPageGeneratingFilter.java:58)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.ui.DefaultLoginPageGeneratingFilter.doFilter(DefaultLoginPageGeneratingFilter.java:220)
	at org.springframework.security.web.authentication.ui.DefaultLoginPageGeneratingFilter.doFilter(DefaultLoginPageGeneratingFilter.java:206)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.ui.DefaultResourcesFilter.doFilter(DefaultResourcesFilter.java:72)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:227)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:221)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.doFilterInternal(OAuth2AuthorizationRequestRedirectFilter.java:198)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:243)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:238)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:362)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:278)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:483)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:397)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:905)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1741)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1190)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:840)
Caused by: org.hibernate.NonUniqueResultException: Query did not return a unique result: 2 results were returned
	at org.hibernate.query.spi.AbstractSelectionQuery.uniqueElement(AbstractSelectionQuery.java:298)
	at org.hibernate.query.spi.AbstractSelectionQuery.getSingleResult(AbstractSelectionQuery.java:281)
	at org.springframework.data.jpa.repository.query.JpaQueryExecution$SingleEntityExecution.doExecute(JpaQueryExecution.java:224)
	at org.springframework.data.jpa.repository.query.JpaQueryExecution.execute(JpaQueryExecution.java:93)
	at org.springframework.data.jpa.repository.query.AbstractJpaQuery.doExecute(AbstractJpaQuery.java:152)
	at org.springframework.data.jpa.repository.query.AbstractJpaQuery.execute(AbstractJpaQuery.java:140)
	at org.springframework.data.repository.core.support.RepositoryMethodInvoker.doInvoke(RepositoryMethodInvoker.java:170)
	at org.springframework.data.repository.core.support.RepositoryMethodInvoker.invoke(RepositoryMethodInvoker.java:158)
	at org.springframework.data.repository.core.support.QueryExecutorMethodInterceptor.doInvoke(QueryExecutorMethodInterceptor.java:170)
	at org.springframework.data.repository.core.support.QueryExecutorMethodInterceptor.invoke(QueryExecutorMethodInterceptor.java:149)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.data.projection.DefaultMethodInvokingMethodInterceptor.invoke(DefaultMethodInvokingMethodInterceptor.java:69)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:380)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:138)
	... 122 common frames omitted
2025-02-19 12:47:41 [http-nio-8080-exec-1] INFO  p.d.A.calendar.CalendarController - Fetching period events for user
2025-02-19 12:47:41 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - select u1_0.id,u1_0.created_date_time,u1_0.email,u1_0.google_sub,u1_0.is_active,u1_0.modified_date_time,u1_0.name,u1_0.picture,u1_0.refresh_token from user u1_0 where u1_0.google_sub=?
2025-02-19 12:47:41 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - select ed1_0.id,ed1_0.calendar_event_id,ed1_0.created_date_time,ed1_0.event_date,ed1_0.events_series,ed1_0.is_period_first_day,ed1_0.is_predicted,ed1_0.is_sync,ed1_0.modified_date_time,ed1_0.title,ed1_0.user_id from event_data ed1_0 where ed1_0.user_id=? and ed1_0.is_predicted=0
2025-02-19 12:47:41 [http-nio-8080-exec-2] INFO  p.d.A.calendar.CalendarController - Fetching period events for user
2025-02-19 12:47:41 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - select u1_0.id,u1_0.created_date_time,u1_0.email,u1_0.google_sub,u1_0.is_active,u1_0.modified_date_time,u1_0.name,u1_0.picture,u1_0.refresh_token from user u1_0 where u1_0.google_sub=?
2025-02-19 12:47:41 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - select ed1_0.id,ed1_0.calendar_event_id,ed1_0.created_date_time,ed1_0.event_date,ed1_0.events_series,ed1_0.is_period_first_day,ed1_0.is_predicted,ed1_0.is_sync,ed1_0.modified_date_time,ed1_0.title,ed1_0.user_id from event_data ed1_0 where ed1_0.user_id=? and ed1_0.is_predicted=0
2025-02-19 12:47:58 [http-nio-8080-exec-3] INFO  p.d.A.calendar.CalendarController - Generating new predictions
2025-02-19 12:47:58 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - select u1_0.id,u1_0.created_date_time,u1_0.email,u1_0.google_sub,u1_0.is_active,u1_0.modified_date_time,u1_0.name,u1_0.picture,u1_0.refresh_token from user u1_0 where u1_0.google_sub=?
2025-02-19 12:47:58 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - SELECT * FROM event_data WHERE id = (SELECT MAX(id) FROM event_data WHERE user_id = ? AND is_period_first_day = true AND is_predicted = false)
2025-02-19 12:47:58 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - select es1_0.id from events_series es1_0 left join user u1_0 on u1_0.id=es1_0.user_id where u1_0.id=? limit ?
2025-02-19 12:47:58 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - select es1_0.id,es1_0.calculated_cycle_length,es1_0.prediction_date,es1_0.user_id from events_series es1_0 left join user u1_0 on u1_0.id=es1_0.user_id where u1_0.id=?
2025-02-19 12:47:58 [http-nio-8080-exec-3] ERROR p.d.A.calendar.CalendarController - Error generating predictions
org.springframework.dao.IncorrectResultSizeDataAccessException: Query did not return a unique result: 2 results were returned
	at org.springframework.orm.jpa.vendor.HibernateJpaDialect.convertHibernateAccessException(HibernateJpaDialect.java:301)
	at org.springframework.orm.jpa.vendor.HibernateJpaDialect.translateExceptionIfPossible(HibernateJpaDialect.java:244)
	at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.translateExceptionIfPossible(AbstractEntityManagerFactoryBean.java:560)
	at org.springframework.dao.support.ChainedPersistenceExceptionTranslator.translateExceptionIfPossible(ChainedPersistenceExceptionTranslator.java:61)
	at org.springframework.dao.support.DataAccessUtils.translateIfNecessary(DataAccessUtils.java:343)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:160)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.data.jpa.repository.support.CrudMethodMetadataPostProcessor$CrudMethodMetadataPopulatingMethodInterceptor.invoke(CrudMethodMetadataPostProcessor.java:136)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:223)
	at jdk.proxy2/jdk.proxy2.$Proxy138.findByUserId(Unknown Source)
	at predictor.demo.AppModules.eventsSeries.EventSeriesServiceImp.createNewEventsSeries(EventSeriesServiceImp.java:107)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:359)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:723)
	at predictor.demo.AppModules.eventsSeries.EventSeriesServiceImp$$SpringCGLIB$$0.createNewEventsSeries(<generated>)
	at predictor.demo.AppModules.calendar.CalendarController.generatePredictions(CalendarController.java:137)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:569)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:257)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:190)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:986)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:891)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1088)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:978)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:914)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:590)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885)
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:195)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108)
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365)
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:101)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:126)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:120)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.ui.DefaultLogoutPageGeneratingFilter.doFilterInternal(DefaultLogoutPageGeneratingFilter.java:58)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.ui.DefaultLoginPageGeneratingFilter.doFilter(DefaultLoginPageGeneratingFilter.java:220)
	at org.springframework.security.web.authentication.ui.DefaultLoginPageGeneratingFilter.doFilter(DefaultLoginPageGeneratingFilter.java:206)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.ui.DefaultResourcesFilter.doFilter(DefaultResourcesFilter.java:72)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:227)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:221)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.oauth2.client.web.OAuth2AuthorizationRequestRedirectFilter.doFilterInternal(OAuth2AuthorizationRequestRedirectFilter.java:198)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82)
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:243)
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113)
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74)
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:238)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:362)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:278)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:483)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:397)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:905)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1741)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1190)
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63)
	at java.base/java.lang.Thread.run(Thread.java:840)
Caused by: org.hibernate.NonUniqueResultException: Query did not return a unique result: 2 results were returned
	at org.hibernate.query.spi.AbstractSelectionQuery.uniqueElement(AbstractSelectionQuery.java:298)
	at org.hibernate.query.spi.AbstractSelectionQuery.getSingleResult(AbstractSelectionQuery.java:281)
	at org.springframework.data.jpa.repository.query.JpaQueryExecution$SingleEntityExecution.doExecute(JpaQueryExecution.java:224)
	at org.springframework.data.jpa.repository.query.JpaQueryExecution.execute(JpaQueryExecution.java:93)
	at org.springframework.data.jpa.repository.query.AbstractJpaQuery.doExecute(AbstractJpaQuery.java:152)
	at org.springframework.data.jpa.repository.query.AbstractJpaQuery.execute(AbstractJpaQuery.java:140)
	at org.springframework.data.repository.core.support.RepositoryMethodInvoker.doInvoke(RepositoryMethodInvoker.java:170)
	at org.springframework.data.repository.core.support.RepositoryMethodInvoker.invoke(RepositoryMethodInvoker.java:158)
	at org.springframework.data.repository.core.support.QueryExecutorMethodInterceptor.doInvoke(QueryExecutorMethodInterceptor.java:170)
	at org.springframework.data.repository.core.support.QueryExecutorMethodInterceptor.invoke(QueryExecutorMethodInterceptor.java:149)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.data.projection.DefaultMethodInvokingMethodInterceptor.invoke(DefaultMethodInvokingMethodInterceptor.java:69)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:380)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:138)
	... 122 common frames omitted
2025-02-19 12:48:34 [main] INFO  predictor.demo.DemoApplication - Starting DemoApplication using Java 17.0.13 with PID 4108 (C:\Fullstack_apps\period-and-ovulation-predictor\backend\demo\target\classes started by Danil in C:\Fullstack_apps\period-and-ovulation-predictor)
2025-02-19 12:48:34 [main] INFO  predictor.demo.DemoApplication - No active profile set, falling back to 1 default profile: "default"
2025-02-19 12:48:39 [main] INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-02-19 12:48:39 [main] INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.34]
2025-02-19 12:48:39 [main] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-02-19 12:48:39 [main] INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-02-19 12:48:40 [main] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.6.5.Final
2025-02-19 12:48:40 [main] INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-02-19 12:48:41 [main] WARN  com.zaxxer.hikari.HikariConfig - predictor-period-ovulation - idleTimeout has been set but has no effect because the pool is operating as a fixed size pool.
2025-02-19 12:48:41 [main] INFO  com.zaxxer.hikari.HikariDataSource - predictor-period-ovulation - Starting...
2025-02-19 12:48:42 [main] INFO  com.zaxxer.hikari.pool.HikariPool - predictor-period-ovulation - Added connection com.mysql.cj.jdbc.ConnectionImpl@2c08c787
2025-02-19 12:48:42 [main] INFO  com.zaxxer.hikari.HikariDataSource - predictor-period-ovulation - Start completed.
2025-02-19 12:48:42 [main] WARN  org.hibernate.orm.deprecation - HHH90000025: MySQL8Dialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-02-19 12:48:42 [main] WARN  org.hibernate.orm.deprecation - HHH90000026: MySQL8Dialect has been deprecated; use org.hibernate.dialect.MySQLDialect instead
2025-02-19 12:48:42 [main] INFO  o.hibernate.orm.connections.pooling - HHH10001005: Database info:
	Database JDBC URL [Connecting through datasource 'HikariDataSource (predictor-period-ovulation)']
	Database driver: undefined/unknown
	Database version: 8.0
	Autocommit mode: undefined/unknown
	Isolation level: undefined/unknown
	Minimum pool size: undefined/unknown
	Maximum pool size: undefined/unknown
2025-02-19 12:48:45 [main] INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-02-19 12:48:45 [main] DEBUG org.hibernate.SQL - alter table event_data drop foreign key FKky6rwvta5hrsrpfxxnqle7hc6
2025-02-19 12:48:45 [main] DEBUG org.hibernate.SQL - alter table event_data drop foreign key FKnugyl72uxj2nmxbbj2bjtw4nb
2025-02-19 12:48:45 [main] DEBUG org.hibernate.SQL - alter table events_series drop foreign key FKihucq4fq1hhfi32h05gt97kwn
2025-02-19 12:48:45 [main] DEBUG org.hibernate.SQL - drop table if exists event_data
2025-02-19 12:48:45 [main] DEBUG org.hibernate.SQL - drop table if exists events_series
2025-02-19 12:48:45 [main] DEBUG org.hibernate.SQL - drop table if exists user
2025-02-19 12:48:45 [main] DEBUG org.hibernate.SQL - create table event_data (event_date date, events_series integer, id integer not null auto_increment, is_period_first_day bit not null, is_predicted bit not null, is_sync bit not null, user_id integer not null, created_date_time datetime(6), modified_date_time datetime(6), calendar_event_id varchar(255), title varchar(255), primary key (id)) engine=InnoDB
2025-02-19 12:48:45 [main] DEBUG org.hibernate.SQL - create table events_series (calculated_cycle_length float(53) not null, id integer not null auto_increment, prediction_date date, user_id integer not null, primary key (id)) engine=InnoDB
2025-02-19 12:48:45 [main] DEBUG org.hibernate.SQL - create table user (id integer not null auto_increment, is_active bit not null, created_date_time datetime(6), modified_date_time datetime(6), email varchar(255) not null, google_sub varchar(255), name varchar(255), picture varchar(255), refresh_token varchar(255), primary key (id)) engine=InnoDB
2025-02-19 12:48:45 [main] DEBUG org.hibernate.SQL - alter table user add constraint UKob8kqyqqgmefl0aco34akdtpe unique (email)
2025-02-19 12:48:45 [main] DEBUG org.hibernate.SQL - alter table user add constraint UKr4q9y86xwh8ew8ja4b3rrguwr unique (google_sub)
2025-02-19 12:48:45 [main] DEBUG org.hibernate.SQL - alter table event_data add constraint FKky6rwvta5hrsrpfxxnqle7hc6 foreign key (events_series) references events_series (id)
2025-02-19 12:48:45 [main] DEBUG org.hibernate.SQL - alter table event_data add constraint FKnugyl72uxj2nmxbbj2bjtw4nb foreign key (user_id) references user (id)
2025-02-19 12:48:45 [main] DEBUG org.hibernate.SQL - alter table events_series add constraint FKihucq4fq1hhfi32h05gt97kwn foreign key (user_id) references user (id)
2025-02-19 12:48:49 [main] WARN  o.s.b.a.o.j.JpaBaseConfiguration$JpaWebConfiguration - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2025-02-19 12:48:50 [main] INFO  predictor.demo.DemoApplication - Started DemoApplication in 18.603 seconds (process running for 19.723)
2025-02-19 12:49:18 [main] INFO  predictor.demo.DemoApplication - Starting DemoApplication using Java 17.0.13 with PID 16336 (C:\Fullstack_apps\period-and-ovulation-predictor\backend\demo\target\classes started by Danil in C:\Fullstack_apps\period-and-ovulation-predictor)
2025-02-19 12:49:18 [main] INFO  predictor.demo.DemoApplication - No active profile set, falling back to 1 default profile: "default"
2025-02-19 12:49:24 [main] INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-02-19 12:49:24 [main] INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.34]
2025-02-19 12:49:24 [main] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-02-19 12:49:24 [main] INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-02-19 12:49:25 [main] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.6.5.Final
2025-02-19 12:49:25 [main] INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-02-19 12:49:26 [main] WARN  com.zaxxer.hikari.HikariConfig - predictor-period-ovulation - idleTimeout has been set but has no effect because the pool is operating as a fixed size pool.
2025-02-19 12:49:26 [main] INFO  com.zaxxer.hikari.HikariDataSource - predictor-period-ovulation - Starting...
2025-02-19 12:49:27 [main] INFO  com.zaxxer.hikari.pool.HikariPool - predictor-period-ovulation - Added connection com.mysql.cj.jdbc.ConnectionImpl@284c4f02
2025-02-19 12:49:27 [main] INFO  com.zaxxer.hikari.HikariDataSource - predictor-period-ovulation - Start completed.
2025-02-19 12:49:27 [main] WARN  org.hibernate.orm.deprecation - HHH90000025: MySQL8Dialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-02-19 12:49:27 [main] WARN  org.hibernate.orm.deprecation - HHH90000026: MySQL8Dialect has been deprecated; use org.hibernate.dialect.MySQLDialect instead
2025-02-19 12:49:27 [main] INFO  o.hibernate.orm.connections.pooling - HHH10001005: Database info:
	Database JDBC URL [Connecting through datasource 'HikariDataSource (predictor-period-ovulation)']
	Database driver: undefined/unknown
	Database version: 8.0
	Autocommit mode: undefined/unknown
	Isolation level: undefined/unknown
	Minimum pool size: undefined/unknown
	Maximum pool size: undefined/unknown
2025-02-19 12:49:30 [main] INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-02-19 12:49:34 [main] WARN  o.s.b.a.o.j.JpaBaseConfiguration$JpaWebConfiguration - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2025-02-19 12:49:36 [main] INFO  predictor.demo.DemoApplication - Started DemoApplication in 19.373 seconds (process running for 20.468)
2025-02-19 12:51:00 [http-nio-8080-exec-1] INFO  o.a.tomcat.util.http.parser.Cookie - A cookie header was received [g_state={"i_l":0};] that contained an invalid cookie. That cookie will be ignored.
 Note: further occurrences of this error will be logged at DEBUG level.
2025-02-19 12:51:00 [http-nio-8080-exec-1] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-02-19 12:51:00 [http-nio-8080-exec-2] WARN  o.a.c.util.SessionIdGeneratorBase - Creation of SecureRandom instance for session ID generation using [SHA1PRNG] took [154] milliseconds.
2025-02-19 12:51:06 [http-nio-8080-exec-3] INFO  predictor.demo.AppConfiguration - Processing OAuth2 login for: naama.antoniouk@gmail.com
2025-02-19 12:51:07 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - select u1_0.id,u1_0.created_date_time,u1_0.email,u1_0.google_sub,u1_0.is_active,u1_0.modified_date_time,u1_0.name,u1_0.picture,u1_0.refresh_token from user u1_0 where u1_0.google_sub=?
2025-02-19 12:51:07 [http-nio-8080-exec-3] INFO  predictor.demo.AppConfiguration - User not found, will create new user for: naama.antoniouk@gmail.com
2025-02-19 12:51:07 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - select u1_0.id from user u1_0 where u1_0.email=? limit ?
2025-02-19 12:51:07 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - select u1_0.id from user u1_0 where u1_0.google_sub=? limit ?
2025-02-19 12:51:07 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - insert into user (created_date_time,email,google_sub,is_active,modified_date_time,name,picture,refresh_token) values (?,?,?,?,?,?,?,?)
2025-02-19 12:51:07 [http-nio-8080-exec-3] INFO  predictor.demo.AppConfiguration - Created new user with Google ID: 114720670413454628998
2025-02-19 12:51:08 [http-nio-8080-exec-5] INFO  p.d.A.calendar.CalendarController - Fetching period events for user
2025-02-19 12:51:08 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - select u1_0.id,u1_0.created_date_time,u1_0.email,u1_0.google_sub,u1_0.is_active,u1_0.modified_date_time,u1_0.name,u1_0.picture,u1_0.refresh_token from user u1_0 where u1_0.google_sub=?
2025-02-19 12:51:08 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - select ed1_0.id,ed1_0.calendar_event_id,ed1_0.created_date_time,ed1_0.event_date,ed1_0.events_series,ed1_0.is_period_first_day,ed1_0.is_predicted,ed1_0.is_sync,ed1_0.modified_date_time,ed1_0.title,ed1_0.user_id from event_data ed1_0 where ed1_0.user_id=? and ed1_0.is_predicted=0
2025-02-19 12:51:08 [http-nio-8080-exec-6] INFO  p.d.A.calendar.CalendarController - Fetching period events for user
2025-02-19 12:51:08 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - select u1_0.id,u1_0.created_date_time,u1_0.email,u1_0.google_sub,u1_0.is_active,u1_0.modified_date_time,u1_0.name,u1_0.picture,u1_0.refresh_token from user u1_0 where u1_0.google_sub=?
2025-02-19 12:51:08 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - select ed1_0.id,ed1_0.calendar_event_id,ed1_0.created_date_time,ed1_0.event_date,ed1_0.events_series,ed1_0.is_period_first_day,ed1_0.is_predicted,ed1_0.is_sync,ed1_0.modified_date_time,ed1_0.title,ed1_0.user_id from event_data ed1_0 where ed1_0.user_id=? and ed1_0.is_predicted=0
2025-02-19 12:51:11 [http-nio-8080-exec-8] INFO  p.d.A.calendar.CalendarController - Adding new period event
2025-02-19 12:51:11 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - select u1_0.id,u1_0.created_date_time,u1_0.email,u1_0.google_sub,u1_0.is_active,u1_0.modified_date_time,u1_0.name,u1_0.picture,u1_0.refresh_token from user u1_0 where u1_0.google_sub=?
2025-02-19 12:51:11 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - select count(*) from event_data ed1_0 where ed1_0.id=?
2025-02-19 12:51:11 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - insert into event_data (calendar_event_id,created_date_time,event_date,events_series,is_period_first_day,is_predicted,is_sync,modified_date_time,title,user_id) values (?,?,?,?,?,?,?,?,?,?)
2025-02-19 12:51:11 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - update event_data set calendar_event_id=?,event_date=?,events_series=?,is_period_first_day=?,is_predicted=?,is_sync=?,modified_date_time=?,title=? where id=?
2025-02-19 12:51:15 [http-nio-8080-exec-9] INFO  p.d.A.calendar.CalendarController - Fetching period events for user
2025-02-19 12:51:15 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - select u1_0.id,u1_0.created_date_time,u1_0.email,u1_0.google_sub,u1_0.is_active,u1_0.modified_date_time,u1_0.name,u1_0.picture,u1_0.refresh_token from user u1_0 where u1_0.google_sub=?
2025-02-19 12:51:15 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - select ed1_0.id,ed1_0.calendar_event_id,ed1_0.created_date_time,ed1_0.event_date,ed1_0.events_series,ed1_0.is_period_first_day,ed1_0.is_predicted,ed1_0.is_sync,ed1_0.modified_date_time,ed1_0.title,ed1_0.user_id from event_data ed1_0 where ed1_0.user_id=? and ed1_0.is_predicted=0
2025-02-19 12:51:15 [http-nio-8080-exec-10] INFO  p.d.A.calendar.CalendarController - Fetching period events for user
2025-02-19 12:51:15 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - select u1_0.id,u1_0.created_date_time,u1_0.email,u1_0.google_sub,u1_0.is_active,u1_0.modified_date_time,u1_0.name,u1_0.picture,u1_0.refresh_token from user u1_0 where u1_0.google_sub=?
2025-02-19 12:51:15 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - select ed1_0.id,ed1_0.calendar_event_id,ed1_0.created_date_time,ed1_0.event_date,ed1_0.events_series,ed1_0.is_period_first_day,ed1_0.is_predicted,ed1_0.is_sync,ed1_0.modified_date_time,ed1_0.title,ed1_0.user_id from event_data ed1_0 where ed1_0.user_id=? and ed1_0.is_predicted=0
2025-02-19 12:51:16 [http-nio-8080-exec-2] INFO  p.d.A.calendar.CalendarController - Deleting event: 1
2025-02-19 12:51:16 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - select u1_0.id,u1_0.created_date_time,u1_0.email,u1_0.google_sub,u1_0.is_active,u1_0.modified_date_time,u1_0.name,u1_0.picture,u1_0.refresh_token from user u1_0 where u1_0.google_sub=?
2025-02-19 12:51:16 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - select ed1_0.id,ed1_0.calendar_event_id,ed1_0.created_date_time,ed1_0.event_date,es1_0.id,es1_0.calculated_cycle_length,es1_0.prediction_date,es1_0.user_id,u1_0.id,u1_0.created_date_time,u1_0.email,u1_0.google_sub,u1_0.is_active,u1_0.modified_date_time,u1_0.name,u1_0.picture,u1_0.refresh_token,ed1_0.is_period_first_day,ed1_0.is_predicted,ed1_0.is_sync,ed1_0.modified_date_time,ed1_0.title,ed1_0.user_id,u2_0.id,u2_0.created_date_time,u2_0.email,u2_0.google_sub,u2_0.is_active,u2_0.modified_date_time,u2_0.name,u2_0.picture,u2_0.refresh_token from event_data ed1_0 left join events_series es1_0 on es1_0.id=ed1_0.events_series left join user u1_0 on u1_0.id=es1_0.user_id join user u2_0 on u2_0.id=ed1_0.user_id where ed1_0.id=?
2025-02-19 12:51:16 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - delete from event_data where id=?
2025-02-19 12:51:16 [http-nio-8080-exec-4] INFO  p.d.A.calendar.CalendarController - Fetching period events for user
2025-02-19 12:51:16 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - select u1_0.id,u1_0.created_date_time,u1_0.email,u1_0.google_sub,u1_0.is_active,u1_0.modified_date_time,u1_0.name,u1_0.picture,u1_0.refresh_token from user u1_0 where u1_0.google_sub=?
2025-02-19 12:51:16 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - select ed1_0.id,ed1_0.calendar_event_id,ed1_0.created_date_time,ed1_0.event_date,ed1_0.events_series,ed1_0.is_period_first_day,ed1_0.is_predicted,ed1_0.is_sync,ed1_0.modified_date_time,ed1_0.title,ed1_0.user_id from event_data ed1_0 where ed1_0.user_id=? and ed1_0.is_predicted=0
2025-02-19 12:51:50 [http-nio-8080-exec-5] INFO  p.d.A.calendar.CalendarController - Adding new period event
2025-02-19 12:51:50 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - select u1_0.id,u1_0.created_date_time,u1_0.email,u1_0.google_sub,u1_0.is_active,u1_0.modified_date_time,u1_0.name,u1_0.picture,u1_0.refresh_token from user u1_0 where u1_0.google_sub=?
2025-02-19 12:51:50 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - select count(*) from event_data ed1_0 where ed1_0.id=?
2025-02-19 12:51:50 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - insert into event_data (calendar_event_id,created_date_time,event_date,events_series,is_period_first_day,is_predicted,is_sync,modified_date_time,title,user_id) values (?,?,?,?,?,?,?,?,?,?)
2025-02-19 12:51:50 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - update event_data set calendar_event_id=?,event_date=?,events_series=?,is_period_first_day=?,is_predicted=?,is_sync=?,modified_date_time=?,title=? where id=?
2025-02-19 12:52:00 [http-nio-8080-exec-7] INFO  p.d.A.calendar.CalendarController - Adding new period event
2025-02-19 12:52:00 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - select u1_0.id,u1_0.created_date_time,u1_0.email,u1_0.google_sub,u1_0.is_active,u1_0.modified_date_time,u1_0.name,u1_0.picture,u1_0.refresh_token from user u1_0 where u1_0.google_sub=?
2025-02-19 12:52:00 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - select count(*) from event_data ed1_0 where ed1_0.id=?
2025-02-19 12:52:00 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - insert into event_data (calendar_event_id,created_date_time,event_date,events_series,is_period_first_day,is_predicted,is_sync,modified_date_time,title,user_id) values (?,?,?,?,?,?,?,?,?,?)
2025-02-19 12:52:01 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - update event_data set calendar_event_id=?,event_date=?,events_series=?,is_period_first_day=?,is_predicted=?,is_sync=?,modified_date_time=?,title=? where id=?
2025-02-19 12:52:10 [http-nio-8080-exec-10] INFO  p.d.A.calendar.CalendarController - Adding new period event
2025-02-19 12:52:10 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - select u1_0.id,u1_0.created_date_time,u1_0.email,u1_0.google_sub,u1_0.is_active,u1_0.modified_date_time,u1_0.name,u1_0.picture,u1_0.refresh_token from user u1_0 where u1_0.google_sub=?
2025-02-19 12:52:10 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - select count(*) from event_data ed1_0 where ed1_0.id=?
2025-02-19 12:52:10 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - insert into event_data (calendar_event_id,created_date_time,event_date,events_series,is_period_first_day,is_predicted,is_sync,modified_date_time,title,user_id) values (?,?,?,?,?,?,?,?,?,?)
2025-02-19 12:52:11 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - update event_data set calendar_event_id=?,event_date=?,events_series=?,is_period_first_day=?,is_predicted=?,is_sync=?,modified_date_time=?,title=? where id=?
2025-02-19 12:52:25 [http-nio-8080-exec-2] INFO  p.d.A.calendar.CalendarController - Adding new period event
2025-02-19 12:52:25 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - select u1_0.id,u1_0.created_date_time,u1_0.email,u1_0.google_sub,u1_0.is_active,u1_0.modified_date_time,u1_0.name,u1_0.picture,u1_0.refresh_token from user u1_0 where u1_0.google_sub=?
2025-02-19 12:52:25 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - select count(*) from event_data ed1_0 where ed1_0.id=?
2025-02-19 12:52:25 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - insert into event_data (calendar_event_id,created_date_time,event_date,events_series,is_period_first_day,is_predicted,is_sync,modified_date_time,title,user_id) values (?,?,?,?,?,?,?,?,?,?)
2025-02-19 12:52:26 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - update event_data set calendar_event_id=?,event_date=?,events_series=?,is_period_first_day=?,is_predicted=?,is_sync=?,modified_date_time=?,title=? where id=?
2025-02-19 12:52:32 [http-nio-8080-exec-3] INFO  p.d.A.calendar.CalendarController - Adding new period event
2025-02-19 12:52:32 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - select u1_0.id,u1_0.created_date_time,u1_0.email,u1_0.google_sub,u1_0.is_active,u1_0.modified_date_time,u1_0.name,u1_0.picture,u1_0.refresh_token from user u1_0 where u1_0.google_sub=?
2025-02-19 12:52:32 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - select count(*) from event_data ed1_0 where ed1_0.id=?
2025-02-19 12:52:32 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - insert into event_data (calendar_event_id,created_date_time,event_date,events_series,is_period_first_day,is_predicted,is_sync,modified_date_time,title,user_id) values (?,?,?,?,?,?,?,?,?,?)
2025-02-19 12:52:32 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - update event_data set calendar_event_id=?,event_date=?,events_series=?,is_period_first_day=?,is_predicted=?,is_sync=?,modified_date_time=?,title=? where id=?
2025-02-19 12:52:46 [http-nio-8080-exec-5] INFO  p.d.A.calendar.CalendarController - Generating new predictions
2025-02-19 12:52:46 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - select u1_0.id,u1_0.created_date_time,u1_0.email,u1_0.google_sub,u1_0.is_active,u1_0.modified_date_time,u1_0.name,u1_0.picture,u1_0.refresh_token from user u1_0 where u1_0.google_sub=?
2025-02-19 12:52:46 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - SELECT * FROM event_data WHERE id = (SELECT MAX(id) FROM event_data WHERE user_id = ? AND is_period_first_day = true AND is_predicted = false)
2025-02-19 12:52:46 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - select es1_0.id from events_series es1_0 left join user u1_0 on u1_0.id=es1_0.user_id where u1_0.id=? limit ?
2025-02-19 12:52:46 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - WITH period_events AS (     SELECT event_date,            LAG(event_date) OVER (ORDER BY event_date DESC) AS prev_event_date     FROM event_data     WHERE user_id = ?     AND is_period_first_day = true     AND is_predicted = false ) SELECT AVG(DATEDIFF(prev_event_date, event_date)) FROM period_events WHERE prev_event_date IS NOT NULL
2025-02-19 12:52:46 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - SELECT * FROM event_data WHERE id = (SELECT MAX(id) FROM event_data WHERE user_id = ? AND is_period_first_day = true AND is_predicted = false)
2025-02-19 12:52:46 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - select count(ed1_0.id) from event_data ed1_0 where ed1_0.user_id=? and ed1_0.is_predicted=0
2025-02-19 12:52:46 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - insert into events_series (calculated_cycle_length,prediction_date,user_id) values (?,?,?)
2025-02-19 12:52:46 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - SELECT * FROM event_data WHERE id = (SELECT MAX(id) FROM event_data WHERE user_id = ? AND is_period_first_day = true AND is_predicted = false)
2025-02-19 12:52:46 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - select count(*) from event_data ed1_0 where ed1_0.id=?
2025-02-19 12:52:46 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - insert into event_data (calendar_event_id,created_date_time,event_date,events_series,is_period_first_day,is_predicted,is_sync,modified_date_time,title,user_id) values (?,?,?,?,?,?,?,?,?,?)
2025-02-19 12:52:46 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - select count(*) from event_data ed1_0 where ed1_0.id=?
2025-02-19 12:52:46 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - insert into event_data (calendar_event_id,created_date_time,event_date,events_series,is_period_first_day,is_predicted,is_sync,modified_date_time,title,user_id) values (?,?,?,?,?,?,?,?,?,?)
2025-02-19 12:52:46 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - select count(*) from event_data ed1_0 where ed1_0.id=?
2025-02-19 12:52:46 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - insert into event_data (calendar_event_id,created_date_time,event_date,events_series,is_period_first_day,is_predicted,is_sync,modified_date_time,title,user_id) values (?,?,?,?,?,?,?,?,?,?)
2025-02-19 12:52:46 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - select count(*) from event_data ed1_0 where ed1_0.id=?
2025-02-19 12:52:46 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - insert into event_data (calendar_event_id,created_date_time,event_date,events_series,is_period_first_day,is_predicted,is_sync,modified_date_time,title,user_id) values (?,?,?,?,?,?,?,?,?,?)
2025-02-19 12:52:46 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - select count(*) from event_data ed1_0 where ed1_0.id=?
2025-02-19 12:52:46 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - insert into event_data (calendar_event_id,created_date_time,event_date,events_series,is_period_first_day,is_predicted,is_sync,modified_date_time,title,user_id) values (?,?,?,?,?,?,?,?,?,?)
2025-02-19 12:52:46 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - select count(*) from event_data ed1_0 where ed1_0.id=?
2025-02-19 12:52:46 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - insert into event_data (calendar_event_id,created_date_time,event_date,events_series,is_period_first_day,is_predicted,is_sync,modified_date_time,title,user_id) values (?,?,?,?,?,?,?,?,?,?)
2025-02-19 12:52:46 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - select count(*) from event_data ed1_0 where ed1_0.id=?
2025-02-19 12:52:46 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - insert into event_data (calendar_event_id,created_date_time,event_date,events_series,is_period_first_day,is_predicted,is_sync,modified_date_time,title,user_id) values (?,?,?,?,?,?,?,?,?,?)
2025-02-19 12:52:46 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - select count(*) from event_data ed1_0 where ed1_0.id=?
2025-02-19 12:52:46 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - insert into event_data (calendar_event_id,created_date_time,event_date,events_series,is_period_first_day,is_predicted,is_sync,modified_date_time,title,user_id) values (?,?,?,?,?,?,?,?,?,?)
2025-02-19 12:52:47 [http-nio-8080-exec-5] INFO  p.d.A.calendar.GoogleCalendarService - Successfully synced event: ?Period-Prediction? to Google Calendar
2025-02-19 12:52:47 [http-nio-8080-exec-5] INFO  p.d.A.calendar.GoogleCalendarService - Successfully synced event: ?Period-Prediction? to Google Calendar
2025-02-19 12:52:48 [http-nio-8080-exec-5] INFO  p.d.A.calendar.GoogleCalendarService - Successfully synced event: ??Ovulation-Prediction?? to Google Calendar
2025-02-19 12:52:48 [http-nio-8080-exec-5] INFO  p.d.A.calendar.GoogleCalendarService - Successfully synced event: ??Ovulation-Prediction?? to Google Calendar
2025-02-19 12:52:48 [http-nio-8080-exec-5] INFO  p.d.A.calendar.GoogleCalendarService - Successfully synced event: ??Ovulation-Prediction?? to Google Calendar
2025-02-19 12:52:49 [http-nio-8080-exec-5] INFO  p.d.A.calendar.GoogleCalendarService - Successfully synced event: ??Ovulation-Prediction?? to Google Calendar
2025-02-19 12:52:49 [http-nio-8080-exec-5] INFO  p.d.A.calendar.GoogleCalendarService - Successfully synced event: ??Ovulation-Prediction?? to Google Calendar
2025-02-19 12:52:50 [http-nio-8080-exec-5] INFO  p.d.A.calendar.GoogleCalendarService - Successfully synced event: ??Ovulation-Prediction?? to Google Calendar
2025-02-19 12:52:50 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - update event_data set calendar_event_id=?,event_date=?,events_series=?,is_period_first_day=?,is_predicted=?,is_sync=?,modified_date_time=?,title=? where id=?
2025-02-19 12:52:50 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - update event_data set calendar_event_id=?,event_date=?,events_series=?,is_period_first_day=?,is_predicted=?,is_sync=?,modified_date_time=?,title=? where id=?
2025-02-19 12:52:50 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - update event_data set calendar_event_id=?,event_date=?,events_series=?,is_period_first_day=?,is_predicted=?,is_sync=?,modified_date_time=?,title=? where id=?
2025-02-19 12:52:50 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - update event_data set calendar_event_id=?,event_date=?,events_series=?,is_period_first_day=?,is_predicted=?,is_sync=?,modified_date_time=?,title=? where id=?
2025-02-19 12:52:50 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - update event_data set calendar_event_id=?,event_date=?,events_series=?,is_period_first_day=?,is_predicted=?,is_sync=?,modified_date_time=?,title=? where id=?
2025-02-19 12:52:50 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - update event_data set calendar_event_id=?,event_date=?,events_series=?,is_period_first_day=?,is_predicted=?,is_sync=?,modified_date_time=?,title=? where id=?
2025-02-19 12:52:50 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - update event_data set calendar_event_id=?,event_date=?,events_series=?,is_period_first_day=?,is_predicted=?,is_sync=?,modified_date_time=?,title=? where id=?
2025-02-19 12:52:50 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - update event_data set calendar_event_id=?,event_date=?,events_series=?,is_period_first_day=?,is_predicted=?,is_sync=?,modified_date_time=?,title=? where id=?
2025-02-19 12:58:39 [main] INFO  predictor.demo.DemoApplication - Starting DemoApplication using Java 17.0.13 with PID 17688 (C:\Fullstack_apps\period-and-ovulation-predictor\backend\demo\target\classes started by Danil in C:\Fullstack_apps\period-and-ovulation-predictor)
2025-02-19 12:58:39 [main] INFO  predictor.demo.DemoApplication - No active profile set, falling back to 1 default profile: "default"
2025-02-19 12:58:44 [main] INFO  o.a.catalina.core.StandardService - Starting service [Tomcat]
2025-02-19 12:58:44 [main] INFO  o.a.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.34]
2025-02-19 12:58:44 [main] INFO  o.a.c.c.C.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-02-19 12:58:45 [main] INFO  o.h.jpa.internal.util.LogHelper - HHH000204: Processing PersistenceUnitInfo [name: default]
2025-02-19 12:58:45 [main] INFO  org.hibernate.Version - HHH000412: Hibernate ORM core version 6.6.5.Final
2025-02-19 12:58:45 [main] INFO  o.h.c.i.RegionFactoryInitiator - HHH000026: Second-level cache disabled
2025-02-19 12:58:47 [main] WARN  com.zaxxer.hikari.HikariConfig - predictor-period-ovulation - idleTimeout has been set but has no effect because the pool is operating as a fixed size pool.
2025-02-19 12:58:47 [main] INFO  com.zaxxer.hikari.HikariDataSource - predictor-period-ovulation - Starting...
2025-02-19 12:58:48 [main] INFO  com.zaxxer.hikari.pool.HikariPool - predictor-period-ovulation - Added connection com.mysql.cj.jdbc.ConnectionImpl@284c4f02
2025-02-19 12:58:48 [main] INFO  com.zaxxer.hikari.HikariDataSource - predictor-period-ovulation - Start completed.
2025-02-19 12:58:48 [main] WARN  org.hibernate.orm.deprecation - HHH90000025: MySQL8Dialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)
2025-02-19 12:58:48 [main] WARN  org.hibernate.orm.deprecation - HHH90000026: MySQL8Dialect has been deprecated; use org.hibernate.dialect.MySQLDialect instead
2025-02-19 12:58:48 [main] INFO  o.hibernate.orm.connections.pooling - HHH10001005: Database info:
	Database JDBC URL [Connecting through datasource 'HikariDataSource (predictor-period-ovulation)']
	Database driver: undefined/unknown
	Database version: 8.0
	Autocommit mode: undefined/unknown
	Isolation level: undefined/unknown
	Minimum pool size: undefined/unknown
	Maximum pool size: undefined/unknown
2025-02-19 12:58:51 [main] INFO  o.h.e.t.j.p.i.JtaPlatformInitiator - HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
2025-02-19 12:58:55 [main] WARN  o.s.b.a.o.j.JpaBaseConfiguration$JpaWebConfiguration - spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2025-02-19 12:58:57 [main] INFO  predictor.demo.DemoApplication - Started DemoApplication in 19.989 seconds (process running for 21.077)
